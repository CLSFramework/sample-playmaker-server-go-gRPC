// version 1.6

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v4.25.1
// source: service.proto

package service_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ViewWidth int32

const (
	ViewWidth_NARROW ViewWidth = 0
	ViewWidth_NORMAL ViewWidth = 1
	ViewWidth_WIDE   ViewWidth = 2
)

// Enum value maps for ViewWidth.
var (
	ViewWidth_name = map[int32]string{
		0: "NARROW",
		1: "NORMAL",
		2: "WIDE",
	}
	ViewWidth_value = map[string]int32{
		"NARROW": 0,
		"NORMAL": 1,
		"WIDE":   2,
	}
)

func (x ViewWidth) Enum() *ViewWidth {
	p := new(ViewWidth)
	*p = x
	return p
}

func (x ViewWidth) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViewWidth) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[0].Descriptor()
}

func (ViewWidth) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[0]
}

func (x ViewWidth) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ViewWidth.Descriptor instead.
func (ViewWidth) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

type RpcServerLanguageType int32

const (
	RpcServerLanguageType_UNKNOWN_LANGUAGE RpcServerLanguageType = 0
	RpcServerLanguageType_PYThON           RpcServerLanguageType = 1
	RpcServerLanguageType_JAVA             RpcServerLanguageType = 2
	RpcServerLanguageType_CPP              RpcServerLanguageType = 3
	RpcServerLanguageType_CSHARP           RpcServerLanguageType = 4
	RpcServerLanguageType_RUBY             RpcServerLanguageType = 5
	RpcServerLanguageType_JAVE_SCRIPT      RpcServerLanguageType = 6
	RpcServerLanguageType_GO               RpcServerLanguageType = 7
)

// Enum value maps for RpcServerLanguageType.
var (
	RpcServerLanguageType_name = map[int32]string{
		0: "UNKNOWN_LANGUAGE",
		1: "PYThON",
		2: "JAVA",
		3: "CPP",
		4: "CSHARP",
		5: "RUBY",
		6: "JAVE_SCRIPT",
		7: "GO",
	}
	RpcServerLanguageType_value = map[string]int32{
		"UNKNOWN_LANGUAGE": 0,
		"PYThON":           1,
		"JAVA":             2,
		"CPP":              3,
		"CSHARP":           4,
		"RUBY":             5,
		"JAVE_SCRIPT":      6,
		"GO":               7,
	}
)

func (x RpcServerLanguageType) Enum() *RpcServerLanguageType {
	p := new(RpcServerLanguageType)
	*p = x
	return p
}

func (x RpcServerLanguageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RpcServerLanguageType) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[1].Descriptor()
}

func (RpcServerLanguageType) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[1]
}

func (x RpcServerLanguageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RpcServerLanguageType.Descriptor instead.
func (RpcServerLanguageType) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{1}
}

type Side int32

const (
	Side_UNKNOWN Side = 0
	Side_LEFT    Side = 1
	Side_RIGHT   Side = 2
)

// Enum value maps for Side.
var (
	Side_name = map[int32]string{
		0: "UNKNOWN",
		1: "LEFT",
		2: "RIGHT",
	}
	Side_value = map[string]int32{
		"UNKNOWN": 0,
		"LEFT":    1,
		"RIGHT":   2,
	}
)

func (x Side) Enum() *Side {
	p := new(Side)
	*p = x
	return p
}

func (x Side) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Side) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[2].Descriptor()
}

func (Side) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[2]
}

func (x Side) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Side.Descriptor instead.
func (Side) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{2}
}

type LoggerLevel int32

const (
	LoggerLevel_NoneLevel     LoggerLevel = 0
	LoggerLevel_SYSTEM        LoggerLevel = 1
	LoggerLevel_SENSOR        LoggerLevel = 2
	LoggerLevel_WORLD         LoggerLevel = 4
	LoggerLevel_ACTION        LoggerLevel = 8
	LoggerLevel_INTERCEPT     LoggerLevel = 16
	LoggerLevel_KICK          LoggerLevel = 32
	LoggerLevel_HOLD          LoggerLevel = 64
	LoggerLevel_DRIBBLE       LoggerLevel = 128
	LoggerLevel_PASS          LoggerLevel = 256
	LoggerLevel_CROSS         LoggerLevel = 512
	LoggerLevel_SHOOT         LoggerLevel = 1024
	LoggerLevel_CLEAR         LoggerLevel = 2048
	LoggerLevel_BLOCK         LoggerLevel = 4096
	LoggerLevel_MARK          LoggerLevel = 8192
	LoggerLevel_POSITIONING   LoggerLevel = 16384
	LoggerLevel_ROLE          LoggerLevel = 32768
	LoggerLevel_TEAM          LoggerLevel = 65536
	LoggerLevel_COMMUNICATION LoggerLevel = 131072
	LoggerLevel_ANALYZER      LoggerLevel = 262144
	LoggerLevel_ACTION_CHAIN  LoggerLevel = 524288
	LoggerLevel_PLAN          LoggerLevel = 1048576
)

// Enum value maps for LoggerLevel.
var (
	LoggerLevel_name = map[int32]string{
		0:       "NoneLevel",
		1:       "SYSTEM",
		2:       "SENSOR",
		4:       "WORLD",
		8:       "ACTION",
		16:      "INTERCEPT",
		32:      "KICK",
		64:      "HOLD",
		128:     "DRIBBLE",
		256:     "PASS",
		512:     "CROSS",
		1024:    "SHOOT",
		2048:    "CLEAR",
		4096:    "BLOCK",
		8192:    "MARK",
		16384:   "POSITIONING",
		32768:   "ROLE",
		65536:   "TEAM",
		131072:  "COMMUNICATION",
		262144:  "ANALYZER",
		524288:  "ACTION_CHAIN",
		1048576: "PLAN",
	}
	LoggerLevel_value = map[string]int32{
		"NoneLevel":     0,
		"SYSTEM":        1,
		"SENSOR":        2,
		"WORLD":         4,
		"ACTION":        8,
		"INTERCEPT":     16,
		"KICK":          32,
		"HOLD":          64,
		"DRIBBLE":       128,
		"PASS":          256,
		"CROSS":         512,
		"SHOOT":         1024,
		"CLEAR":         2048,
		"BLOCK":         4096,
		"MARK":          8192,
		"POSITIONING":   16384,
		"ROLE":          32768,
		"TEAM":          65536,
		"COMMUNICATION": 131072,
		"ANALYZER":      262144,
		"ACTION_CHAIN":  524288,
		"PLAN":          1048576,
	}
)

func (x LoggerLevel) Enum() *LoggerLevel {
	p := new(LoggerLevel)
	*p = x
	return p
}

func (x LoggerLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoggerLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[3].Descriptor()
}

func (LoggerLevel) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[3]
}

func (x LoggerLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoggerLevel.Descriptor instead.
func (LoggerLevel) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{3}
}

type CardType int32

const (
	CardType_NO_CARD CardType = 0
	CardType_YELLOW  CardType = 1
	CardType_RED     CardType = 2
)

// Enum value maps for CardType.
var (
	CardType_name = map[int32]string{
		0: "NO_CARD",
		1: "YELLOW",
		2: "RED",
	}
	CardType_value = map[string]int32{
		"NO_CARD": 0,
		"YELLOW":  1,
		"RED":     2,
	}
)

func (x CardType) Enum() *CardType {
	p := new(CardType)
	*p = x
	return p
}

func (x CardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardType) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[4].Descriptor()
}

func (CardType) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[4]
}

func (x CardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardType.Descriptor instead.
func (CardType) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{4}
}

type InterceptActionType int32

const (
	InterceptActionType_UNKNOWN_Intercept_Action_Type InterceptActionType = 0
	InterceptActionType_OMNI_DASH                     InterceptActionType = 1
	InterceptActionType_TURN_FORWARD_DASH             InterceptActionType = 2
	InterceptActionType_TURN_BACKWARD_DASH            InterceptActionType = 3
)

// Enum value maps for InterceptActionType.
var (
	InterceptActionType_name = map[int32]string{
		0: "UNKNOWN_Intercept_Action_Type",
		1: "OMNI_DASH",
		2: "TURN_FORWARD_DASH",
		3: "TURN_BACKWARD_DASH",
	}
	InterceptActionType_value = map[string]int32{
		"UNKNOWN_Intercept_Action_Type": 0,
		"OMNI_DASH":                     1,
		"TURN_FORWARD_DASH":             2,
		"TURN_BACKWARD_DASH":            3,
	}
)

func (x InterceptActionType) Enum() *InterceptActionType {
	p := new(InterceptActionType)
	*p = x
	return p
}

func (x InterceptActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterceptActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[5].Descriptor()
}

func (InterceptActionType) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[5]
}

func (x InterceptActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterceptActionType.Descriptor instead.
func (InterceptActionType) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{5}
}

type GameModeType int32

const (
	GameModeType_BeforeKickOff         GameModeType = 0
	GameModeType_TimeOver              GameModeType = 1
	GameModeType_PlayOn                GameModeType = 2
	GameModeType_KickOff_              GameModeType = 3
	GameModeType_KickIn_               GameModeType = 4
	GameModeType_FreeKick_             GameModeType = 5
	GameModeType_CornerKick_           GameModeType = 6
	GameModeType_GoalKick_             GameModeType = 7
	GameModeType_AfterGoal_            GameModeType = 8
	GameModeType_OffSide_              GameModeType = 9
	GameModeType_PenaltyKick_          GameModeType = 10
	GameModeType_FirstHalfOver         GameModeType = 11
	GameModeType_Pause                 GameModeType = 12
	GameModeType_Human                 GameModeType = 13
	GameModeType_FoulCharge_           GameModeType = 14
	GameModeType_FoulPush_             GameModeType = 15
	GameModeType_FoulMultipleAttacker_ GameModeType = 16
	GameModeType_FoulBallOut_          GameModeType = 17
	GameModeType_BackPass_             GameModeType = 18
	GameModeType_FreeKickFault_        GameModeType = 19
	GameModeType_CatchFault_           GameModeType = 20
	GameModeType_IndFreeKick_          GameModeType = 21
	GameModeType_PenaltySetup_         GameModeType = 22
	GameModeType_PenaltyReady_         GameModeType = 23
	GameModeType_PenaltyTaken_         GameModeType = 24
	GameModeType_PenaltyMiss_          GameModeType = 25
	GameModeType_PenaltyScore_         GameModeType = 26
	GameModeType_IllegalDefense_       GameModeType = 27
	GameModeType_PenaltyOnfield_       GameModeType = 28
	GameModeType_PenaltyFoul_          GameModeType = 29
	GameModeType_GoalieCatch_          GameModeType = 30
	GameModeType_ExtendHalf            GameModeType = 31
	GameModeType_MODE_MAX              GameModeType = 32
)

// Enum value maps for GameModeType.
var (
	GameModeType_name = map[int32]string{
		0:  "BeforeKickOff",
		1:  "TimeOver",
		2:  "PlayOn",
		3:  "KickOff_",
		4:  "KickIn_",
		5:  "FreeKick_",
		6:  "CornerKick_",
		7:  "GoalKick_",
		8:  "AfterGoal_",
		9:  "OffSide_",
		10: "PenaltyKick_",
		11: "FirstHalfOver",
		12: "Pause",
		13: "Human",
		14: "FoulCharge_",
		15: "FoulPush_",
		16: "FoulMultipleAttacker_",
		17: "FoulBallOut_",
		18: "BackPass_",
		19: "FreeKickFault_",
		20: "CatchFault_",
		21: "IndFreeKick_",
		22: "PenaltySetup_",
		23: "PenaltyReady_",
		24: "PenaltyTaken_",
		25: "PenaltyMiss_",
		26: "PenaltyScore_",
		27: "IllegalDefense_",
		28: "PenaltyOnfield_",
		29: "PenaltyFoul_",
		30: "GoalieCatch_",
		31: "ExtendHalf",
		32: "MODE_MAX",
	}
	GameModeType_value = map[string]int32{
		"BeforeKickOff":         0,
		"TimeOver":              1,
		"PlayOn":                2,
		"KickOff_":              3,
		"KickIn_":               4,
		"FreeKick_":             5,
		"CornerKick_":           6,
		"GoalKick_":             7,
		"AfterGoal_":            8,
		"OffSide_":              9,
		"PenaltyKick_":          10,
		"FirstHalfOver":         11,
		"Pause":                 12,
		"Human":                 13,
		"FoulCharge_":           14,
		"FoulPush_":             15,
		"FoulMultipleAttacker_": 16,
		"FoulBallOut_":          17,
		"BackPass_":             18,
		"FreeKickFault_":        19,
		"CatchFault_":           20,
		"IndFreeKick_":          21,
		"PenaltySetup_":         22,
		"PenaltyReady_":         23,
		"PenaltyTaken_":         24,
		"PenaltyMiss_":          25,
		"PenaltyScore_":         26,
		"IllegalDefense_":       27,
		"PenaltyOnfield_":       28,
		"PenaltyFoul_":          29,
		"GoalieCatch_":          30,
		"ExtendHalf":            31,
		"MODE_MAX":              32,
	}
)

func (x GameModeType) Enum() *GameModeType {
	p := new(GameModeType)
	*p = x
	return p
}

func (x GameModeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameModeType) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[6].Descriptor()
}

func (GameModeType) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[6]
}

func (x GameModeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameModeType.Descriptor instead.
func (GameModeType) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{6}
}

type AgentType int32

const (
	AgentType_PlayerT  AgentType = 0
	AgentType_CoachT   AgentType = 1
	AgentType_TrainerT AgentType = 2
)

// Enum value maps for AgentType.
var (
	AgentType_name = map[int32]string{
		0: "PlayerT",
		1: "CoachT",
		2: "TrainerT",
	}
	AgentType_value = map[string]int32{
		"PlayerT":  0,
		"CoachT":   1,
		"TrainerT": 2,
	}
)

func (x AgentType) Enum() *AgentType {
	p := new(AgentType)
	*p = x
	return p
}

func (x AgentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentType) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[7].Descriptor()
}

func (AgentType) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[7]
}

func (x AgentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentType.Descriptor instead.
func (AgentType) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{7}
}

type RpcActionCategory int32

const (
	RpcActionCategory_AC_Hold     RpcActionCategory = 0
	RpcActionCategory_AC_Dribble  RpcActionCategory = 1
	RpcActionCategory_AC_Pass     RpcActionCategory = 2
	RpcActionCategory_AC_Shoot    RpcActionCategory = 3
	RpcActionCategory_AC_Clear    RpcActionCategory = 4
	RpcActionCategory_AC_Move     RpcActionCategory = 5
	RpcActionCategory_AC_NoAction RpcActionCategory = 6
)

// Enum value maps for RpcActionCategory.
var (
	RpcActionCategory_name = map[int32]string{
		0: "AC_Hold",
		1: "AC_Dribble",
		2: "AC_Pass",
		3: "AC_Shoot",
		4: "AC_Clear",
		5: "AC_Move",
		6: "AC_NoAction",
	}
	RpcActionCategory_value = map[string]int32{
		"AC_Hold":     0,
		"AC_Dribble":  1,
		"AC_Pass":     2,
		"AC_Shoot":    3,
		"AC_Clear":    4,
		"AC_Move":     5,
		"AC_NoAction": 6,
	}
)

func (x RpcActionCategory) Enum() *RpcActionCategory {
	p := new(RpcActionCategory)
	*p = x
	return p
}

func (x RpcActionCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RpcActionCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[8].Descriptor()
}

func (RpcActionCategory) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[8]
}

func (x RpcActionCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RpcActionCategory.Descriptor instead.
func (RpcActionCategory) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{8}
}

type RpcVector2D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X     float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y     float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Dist  float32 `protobuf:"fixed32,3,opt,name=dist,proto3" json:"dist,omitempty"`
	Angle float32 `protobuf:"fixed32,4,opt,name=angle,proto3" json:"angle,omitempty"`
}

func (x *RpcVector2D) Reset() {
	*x = RpcVector2D{}
	mi := &file_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RpcVector2D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcVector2D) ProtoMessage() {}

func (x *RpcVector2D) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcVector2D.ProtoReflect.Descriptor instead.
func (*RpcVector2D) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

func (x *RpcVector2D) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *RpcVector2D) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *RpcVector2D) GetDist() float32 {
	if x != nil {
		return x.Dist
	}
	return 0
}

func (x *RpcVector2D) GetAngle() float32 {
	if x != nil {
		return x.Angle
	}
	return 0
}

type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentType     AgentType `protobuf:"varint,1,opt,name=agent_type,json=agentType,proto3,enum=protos.AgentType" json:"agent_type,omitempty"`
	TeamName      string    `protobuf:"bytes,2,opt,name=team_name,json=teamName,proto3" json:"team_name,omitempty"`
	UniformNumber int32     `protobuf:"varint,3,opt,name=uniform_number,json=uniformNumber,proto3" json:"uniform_number,omitempty"`
	RpcVersion    int32     `protobuf:"varint,4,opt,name=rpc_version,json=rpcVersion,proto3" json:"rpc_version,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	mi := &file_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterRequest) GetAgentType() AgentType {
	if x != nil {
		return x.AgentType
	}
	return AgentType_PlayerT
}

func (x *RegisterRequest) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *RegisterRequest) GetUniformNumber() int32 {
	if x != nil {
		return x.UniformNumber
	}
	return 0
}

func (x *RegisterRequest) GetRpcVersion() int32 {
	if x != nil {
		return x.RpcVersion
	}
	return 0
}

type RegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId              int32                 `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	AgentType             AgentType             `protobuf:"varint,2,opt,name=agent_type,json=agentType,proto3,enum=protos.AgentType" json:"agent_type,omitempty"`
	TeamName              string                `protobuf:"bytes,3,opt,name=team_name,json=teamName,proto3" json:"team_name,omitempty"`
	UniformNumber         int32                 `protobuf:"varint,4,opt,name=uniform_number,json=uniformNumber,proto3" json:"uniform_number,omitempty"`
	RpcServerLanguageType RpcServerLanguageType `protobuf:"varint,5,opt,name=rpc_server_language_type,json=rpcServerLanguageType,proto3,enum=protos.RpcServerLanguageType" json:"rpc_server_language_type,omitempty"`
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	mi := &file_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterResponse) GetClientId() int32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *RegisterResponse) GetAgentType() AgentType {
	if x != nil {
		return x.AgentType
	}
	return AgentType_PlayerT
}

func (x *RegisterResponse) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *RegisterResponse) GetUniformNumber() int32 {
	if x != nil {
		return x.UniformNumber
	}
	return 0
}

func (x *RegisterResponse) GetRpcServerLanguageType() RpcServerLanguageType {
	if x != nil {
		return x.RpcServerLanguageType
	}
	return RpcServerLanguageType_UNKNOWN_LANGUAGE
}

type Ball struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position         *RpcVector2D `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	RelativePosition *RpcVector2D `protobuf:"bytes,2,opt,name=relative_position,json=relativePosition,proto3" json:"relative_position,omitempty"`
	SeenPosition     *RpcVector2D `protobuf:"bytes,3,opt,name=seen_position,json=seenPosition,proto3" json:"seen_position,omitempty"`
	HeardPosition    *RpcVector2D `protobuf:"bytes,4,opt,name=heard_position,json=heardPosition,proto3" json:"heard_position,omitempty"`
	Velocity         *RpcVector2D `protobuf:"bytes,5,opt,name=velocity,proto3" json:"velocity,omitempty"`
	SeenVelocity     *RpcVector2D `protobuf:"bytes,6,opt,name=seen_velocity,json=seenVelocity,proto3" json:"seen_velocity,omitempty"`
	HeardVelocity    *RpcVector2D `protobuf:"bytes,7,opt,name=heard_velocity,json=heardVelocity,proto3" json:"heard_velocity,omitempty"`
	PosCount         int32        `protobuf:"varint,8,opt,name=pos_count,json=posCount,proto3" json:"pos_count,omitempty"`
	SeenPosCount     int32        `protobuf:"varint,9,opt,name=seen_pos_count,json=seenPosCount,proto3" json:"seen_pos_count,omitempty"`
	HeardPosCount    int32        `protobuf:"varint,10,opt,name=heard_pos_count,json=heardPosCount,proto3" json:"heard_pos_count,omitempty"`
	VelCount         int32        `protobuf:"varint,11,opt,name=vel_count,json=velCount,proto3" json:"vel_count,omitempty"`
	SeenVelCount     int32        `protobuf:"varint,12,opt,name=seen_vel_count,json=seenVelCount,proto3" json:"seen_vel_count,omitempty"`
	HeardVelCount    int32        `protobuf:"varint,13,opt,name=heard_vel_count,json=heardVelCount,proto3" json:"heard_vel_count,omitempty"`
	LostCount        int32        `protobuf:"varint,14,opt,name=lost_count,json=lostCount,proto3" json:"lost_count,omitempty"`
	GhostCount       int32        `protobuf:"varint,15,opt,name=ghost_count,json=ghostCount,proto3" json:"ghost_count,omitempty"`
	DistFromSelf     float32      `protobuf:"fixed32,16,opt,name=dist_from_self,json=distFromSelf,proto3" json:"dist_from_self,omitempty"`
	AngleFromSelf    float32      `protobuf:"fixed32,17,opt,name=angle_from_self,json=angleFromSelf,proto3" json:"angle_from_self,omitempty"`
}

func (x *Ball) Reset() {
	*x = Ball{}
	mi := &file_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ball) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ball) ProtoMessage() {}

func (x *Ball) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ball.ProtoReflect.Descriptor instead.
func (*Ball) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{3}
}

func (x *Ball) GetPosition() *RpcVector2D {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Ball) GetRelativePosition() *RpcVector2D {
	if x != nil {
		return x.RelativePosition
	}
	return nil
}

func (x *Ball) GetSeenPosition() *RpcVector2D {
	if x != nil {
		return x.SeenPosition
	}
	return nil
}

func (x *Ball) GetHeardPosition() *RpcVector2D {
	if x != nil {
		return x.HeardPosition
	}
	return nil
}

func (x *Ball) GetVelocity() *RpcVector2D {
	if x != nil {
		return x.Velocity
	}
	return nil
}

func (x *Ball) GetSeenVelocity() *RpcVector2D {
	if x != nil {
		return x.SeenVelocity
	}
	return nil
}

func (x *Ball) GetHeardVelocity() *RpcVector2D {
	if x != nil {
		return x.HeardVelocity
	}
	return nil
}

func (x *Ball) GetPosCount() int32 {
	if x != nil {
		return x.PosCount
	}
	return 0
}

func (x *Ball) GetSeenPosCount() int32 {
	if x != nil {
		return x.SeenPosCount
	}
	return 0
}

func (x *Ball) GetHeardPosCount() int32 {
	if x != nil {
		return x.HeardPosCount
	}
	return 0
}

func (x *Ball) GetVelCount() int32 {
	if x != nil {
		return x.VelCount
	}
	return 0
}

func (x *Ball) GetSeenVelCount() int32 {
	if x != nil {
		return x.SeenVelCount
	}
	return 0
}

func (x *Ball) GetHeardVelCount() int32 {
	if x != nil {
		return x.HeardVelCount
	}
	return 0
}

func (x *Ball) GetLostCount() int32 {
	if x != nil {
		return x.LostCount
	}
	return 0
}

func (x *Ball) GetGhostCount() int32 {
	if x != nil {
		return x.GhostCount
	}
	return 0
}

func (x *Ball) GetDistFromSelf() float32 {
	if x != nil {
		return x.DistFromSelf
	}
	return 0
}

func (x *Ball) GetAngleFromSelf() float32 {
	if x != nil {
		return x.AngleFromSelf
	}
	return 0
}

type PenaltyKickState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnFieldSide       Side  `protobuf:"varint,1,opt,name=on_field_side,json=onFieldSide,proto3,enum=protos.Side" json:"on_field_side,omitempty"`
	CurrentTakerSide  Side  `protobuf:"varint,2,opt,name=current_taker_side,json=currentTakerSide,proto3,enum=protos.Side" json:"current_taker_side,omitempty"`
	OurTakerCounter   int32 `protobuf:"varint,3,opt,name=our_taker_counter,json=ourTakerCounter,proto3" json:"our_taker_counter,omitempty"`
	TheirTakerCounter int32 `protobuf:"varint,4,opt,name=their_taker_counter,json=theirTakerCounter,proto3" json:"their_taker_counter,omitempty"`
	OurScore          int32 `protobuf:"varint,5,opt,name=our_score,json=ourScore,proto3" json:"our_score,omitempty"`
	TheirScore        int32 `protobuf:"varint,6,opt,name=their_score,json=theirScore,proto3" json:"their_score,omitempty"`
	IsKickTaker       bool  `protobuf:"varint,7,opt,name=is_kick_taker,json=isKickTaker,proto3" json:"is_kick_taker,omitempty"`
}

func (x *PenaltyKickState) Reset() {
	*x = PenaltyKickState{}
	mi := &file_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PenaltyKickState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PenaltyKickState) ProtoMessage() {}

func (x *PenaltyKickState) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PenaltyKickState.ProtoReflect.Descriptor instead.
func (*PenaltyKickState) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{4}
}

func (x *PenaltyKickState) GetOnFieldSide() Side {
	if x != nil {
		return x.OnFieldSide
	}
	return Side_UNKNOWN
}

func (x *PenaltyKickState) GetCurrentTakerSide() Side {
	if x != nil {
		return x.CurrentTakerSide
	}
	return Side_UNKNOWN
}

func (x *PenaltyKickState) GetOurTakerCounter() int32 {
	if x != nil {
		return x.OurTakerCounter
	}
	return 0
}

func (x *PenaltyKickState) GetTheirTakerCounter() int32 {
	if x != nil {
		return x.TheirTakerCounter
	}
	return 0
}

func (x *PenaltyKickState) GetOurScore() int32 {
	if x != nil {
		return x.OurScore
	}
	return 0
}

func (x *PenaltyKickState) GetTheirScore() int32 {
	if x != nil {
		return x.TheirScore
	}
	return 0
}

func (x *PenaltyKickState) GetIsKickTaker() bool {
	if x != nil {
		return x.IsKickTaker
	}
	return false
}

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position              *RpcVector2D `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	SeenPosition          *RpcVector2D `protobuf:"bytes,2,opt,name=seen_position,json=seenPosition,proto3" json:"seen_position,omitempty"`
	HeardPosition         *RpcVector2D `protobuf:"bytes,3,opt,name=heard_position,json=heardPosition,proto3" json:"heard_position,omitempty"`
	Velocity              *RpcVector2D `protobuf:"bytes,4,opt,name=velocity,proto3" json:"velocity,omitempty"`
	SeenVelocity          *RpcVector2D `protobuf:"bytes,5,opt,name=seen_velocity,json=seenVelocity,proto3" json:"seen_velocity,omitempty"`
	PosCount              int32        `protobuf:"varint,6,opt,name=pos_count,json=posCount,proto3" json:"pos_count,omitempty"`
	SeenPosCount          int32        `protobuf:"varint,7,opt,name=seen_pos_count,json=seenPosCount,proto3" json:"seen_pos_count,omitempty"`
	HeardPosCount         int32        `protobuf:"varint,8,opt,name=heard_pos_count,json=heardPosCount,proto3" json:"heard_pos_count,omitempty"`
	VelCount              int32        `protobuf:"varint,9,opt,name=vel_count,json=velCount,proto3" json:"vel_count,omitempty"`
	SeenVelCount          int32        `protobuf:"varint,10,opt,name=seen_vel_count,json=seenVelCount,proto3" json:"seen_vel_count,omitempty"`
	GhostCount            int32        `protobuf:"varint,11,opt,name=ghost_count,json=ghostCount,proto3" json:"ghost_count,omitempty"`
	DistFromSelf          float32      `protobuf:"fixed32,12,opt,name=dist_from_self,json=distFromSelf,proto3" json:"dist_from_self,omitempty"`
	AngleFromSelf         float32      `protobuf:"fixed32,13,opt,name=angle_from_self,json=angleFromSelf,proto3" json:"angle_from_self,omitempty"`
	Id                    int32        `protobuf:"varint,14,opt,name=id,proto3" json:"id,omitempty"`
	Side                  Side         `protobuf:"varint,15,opt,name=side,proto3,enum=protos.Side" json:"side,omitempty"`
	UniformNumber         int32        `protobuf:"varint,16,opt,name=uniform_number,json=uniformNumber,proto3" json:"uniform_number,omitempty"`
	UniformNumberCount    int32        `protobuf:"varint,17,opt,name=uniform_number_count,json=uniformNumberCount,proto3" json:"uniform_number_count,omitempty"`
	IsGoalie              bool         `protobuf:"varint,18,opt,name=is_goalie,json=isGoalie,proto3" json:"is_goalie,omitempty"`
	BodyDirection         float32      `protobuf:"fixed32,19,opt,name=body_direction,json=bodyDirection,proto3" json:"body_direction,omitempty"`
	BodyDirectionCount    int32        `protobuf:"varint,20,opt,name=body_direction_count,json=bodyDirectionCount,proto3" json:"body_direction_count,omitempty"`
	FaceDirection         float32      `protobuf:"fixed32,21,opt,name=face_direction,json=faceDirection,proto3" json:"face_direction,omitempty"`
	FaceDirectionCount    int32        `protobuf:"varint,22,opt,name=face_direction_count,json=faceDirectionCount,proto3" json:"face_direction_count,omitempty"`
	PointToDirection      float32      `protobuf:"fixed32,23,opt,name=point_to_direction,json=pointToDirection,proto3" json:"point_to_direction,omitempty"`
	PointToDirectionCount int32        `protobuf:"varint,24,opt,name=point_to_direction_count,json=pointToDirectionCount,proto3" json:"point_to_direction_count,omitempty"`
	IsKicking             bool         `protobuf:"varint,25,opt,name=is_kicking,json=isKicking,proto3" json:"is_kicking,omitempty"`
	DistFromBall          float32      `protobuf:"fixed32,26,opt,name=dist_from_ball,json=distFromBall,proto3" json:"dist_from_ball,omitempty"`
	AngleFromBall         float32      `protobuf:"fixed32,27,opt,name=angle_from_ball,json=angleFromBall,proto3" json:"angle_from_ball,omitempty"`
	BallReachSteps        int32        `protobuf:"varint,28,opt,name=ball_reach_steps,json=ballReachSteps,proto3" json:"ball_reach_steps,omitempty"`
	IsTackling            bool         `protobuf:"varint,29,opt,name=is_tackling,json=isTackling,proto3" json:"is_tackling,omitempty"`
	TypeId                int32        `protobuf:"varint,30,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
}

func (x *Player) Reset() {
	*x = Player{}
	mi := &file_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{5}
}

func (x *Player) GetPosition() *RpcVector2D {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Player) GetSeenPosition() *RpcVector2D {
	if x != nil {
		return x.SeenPosition
	}
	return nil
}

func (x *Player) GetHeardPosition() *RpcVector2D {
	if x != nil {
		return x.HeardPosition
	}
	return nil
}

func (x *Player) GetVelocity() *RpcVector2D {
	if x != nil {
		return x.Velocity
	}
	return nil
}

func (x *Player) GetSeenVelocity() *RpcVector2D {
	if x != nil {
		return x.SeenVelocity
	}
	return nil
}

func (x *Player) GetPosCount() int32 {
	if x != nil {
		return x.PosCount
	}
	return 0
}

func (x *Player) GetSeenPosCount() int32 {
	if x != nil {
		return x.SeenPosCount
	}
	return 0
}

func (x *Player) GetHeardPosCount() int32 {
	if x != nil {
		return x.HeardPosCount
	}
	return 0
}

func (x *Player) GetVelCount() int32 {
	if x != nil {
		return x.VelCount
	}
	return 0
}

func (x *Player) GetSeenVelCount() int32 {
	if x != nil {
		return x.SeenVelCount
	}
	return 0
}

func (x *Player) GetGhostCount() int32 {
	if x != nil {
		return x.GhostCount
	}
	return 0
}

func (x *Player) GetDistFromSelf() float32 {
	if x != nil {
		return x.DistFromSelf
	}
	return 0
}

func (x *Player) GetAngleFromSelf() float32 {
	if x != nil {
		return x.AngleFromSelf
	}
	return 0
}

func (x *Player) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Player) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_UNKNOWN
}

func (x *Player) GetUniformNumber() int32 {
	if x != nil {
		return x.UniformNumber
	}
	return 0
}

func (x *Player) GetUniformNumberCount() int32 {
	if x != nil {
		return x.UniformNumberCount
	}
	return 0
}

func (x *Player) GetIsGoalie() bool {
	if x != nil {
		return x.IsGoalie
	}
	return false
}

func (x *Player) GetBodyDirection() float32 {
	if x != nil {
		return x.BodyDirection
	}
	return 0
}

func (x *Player) GetBodyDirectionCount() int32 {
	if x != nil {
		return x.BodyDirectionCount
	}
	return 0
}

func (x *Player) GetFaceDirection() float32 {
	if x != nil {
		return x.FaceDirection
	}
	return 0
}

func (x *Player) GetFaceDirectionCount() int32 {
	if x != nil {
		return x.FaceDirectionCount
	}
	return 0
}

func (x *Player) GetPointToDirection() float32 {
	if x != nil {
		return x.PointToDirection
	}
	return 0
}

func (x *Player) GetPointToDirectionCount() int32 {
	if x != nil {
		return x.PointToDirectionCount
	}
	return 0
}

func (x *Player) GetIsKicking() bool {
	if x != nil {
		return x.IsKicking
	}
	return false
}

func (x *Player) GetDistFromBall() float32 {
	if x != nil {
		return x.DistFromBall
	}
	return 0
}

func (x *Player) GetAngleFromBall() float32 {
	if x != nil {
		return x.AngleFromBall
	}
	return 0
}

func (x *Player) GetBallReachSteps() int32 {
	if x != nil {
		return x.BallReachSteps
	}
	return 0
}

func (x *Player) GetIsTackling() bool {
	if x != nil {
		return x.IsTackling
	}
	return false
}

func (x *Player) GetTypeId() int32 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

type Self struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position              *RpcVector2D `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	SeenPosition          *RpcVector2D `protobuf:"bytes,2,opt,name=seen_position,json=seenPosition,proto3" json:"seen_position,omitempty"`
	HeardPosition         *RpcVector2D `protobuf:"bytes,3,opt,name=heard_position,json=heardPosition,proto3" json:"heard_position,omitempty"`
	Velocity              *RpcVector2D `protobuf:"bytes,4,opt,name=velocity,proto3" json:"velocity,omitempty"`
	SeenVelocity          *RpcVector2D `protobuf:"bytes,5,opt,name=seen_velocity,json=seenVelocity,proto3" json:"seen_velocity,omitempty"`
	PosCount              int32        `protobuf:"varint,6,opt,name=pos_count,json=posCount,proto3" json:"pos_count,omitempty"`
	SeenPosCount          int32        `protobuf:"varint,7,opt,name=seen_pos_count,json=seenPosCount,proto3" json:"seen_pos_count,omitempty"`
	HeardPosCount         int32        `protobuf:"varint,8,opt,name=heard_pos_count,json=heardPosCount,proto3" json:"heard_pos_count,omitempty"`
	VelCount              int32        `protobuf:"varint,9,opt,name=vel_count,json=velCount,proto3" json:"vel_count,omitempty"`
	SeenVelCount          int32        `protobuf:"varint,10,opt,name=seen_vel_count,json=seenVelCount,proto3" json:"seen_vel_count,omitempty"`
	GhostCount            int32        `protobuf:"varint,11,opt,name=ghost_count,json=ghostCount,proto3" json:"ghost_count,omitempty"`
	Id                    int32        `protobuf:"varint,12,opt,name=id,proto3" json:"id,omitempty"`
	Side                  Side         `protobuf:"varint,13,opt,name=side,proto3,enum=protos.Side" json:"side,omitempty"`
	UniformNumber         int32        `protobuf:"varint,14,opt,name=uniform_number,json=uniformNumber,proto3" json:"uniform_number,omitempty"`
	UniformNumberCount    int32        `protobuf:"varint,15,opt,name=uniform_number_count,json=uniformNumberCount,proto3" json:"uniform_number_count,omitempty"`
	IsGoalie              bool         `protobuf:"varint,16,opt,name=is_goalie,json=isGoalie,proto3" json:"is_goalie,omitempty"`
	BodyDirection         float32      `protobuf:"fixed32,17,opt,name=body_direction,json=bodyDirection,proto3" json:"body_direction,omitempty"`
	BodyDirectionCount    int32        `protobuf:"varint,18,opt,name=body_direction_count,json=bodyDirectionCount,proto3" json:"body_direction_count,omitempty"`
	FaceDirection         float32      `protobuf:"fixed32,19,opt,name=face_direction,json=faceDirection,proto3" json:"face_direction,omitempty"`
	FaceDirectionCount    int32        `protobuf:"varint,20,opt,name=face_direction_count,json=faceDirectionCount,proto3" json:"face_direction_count,omitempty"`
	PointToDirection      float32      `protobuf:"fixed32,21,opt,name=point_to_direction,json=pointToDirection,proto3" json:"point_to_direction,omitempty"`
	PointToDirectionCount int32        `protobuf:"varint,22,opt,name=point_to_direction_count,json=pointToDirectionCount,proto3" json:"point_to_direction_count,omitempty"`
	IsKicking             bool         `protobuf:"varint,23,opt,name=is_kicking,json=isKicking,proto3" json:"is_kicking,omitempty"`
	DistFromBall          float32      `protobuf:"fixed32,24,opt,name=dist_from_ball,json=distFromBall,proto3" json:"dist_from_ball,omitempty"`
	AngleFromBall         float32      `protobuf:"fixed32,25,opt,name=angle_from_ball,json=angleFromBall,proto3" json:"angle_from_ball,omitempty"`
	BallReachSteps        int32        `protobuf:"varint,26,opt,name=ball_reach_steps,json=ballReachSteps,proto3" json:"ball_reach_steps,omitempty"`
	IsTackling            bool         `protobuf:"varint,27,opt,name=is_tackling,json=isTackling,proto3" json:"is_tackling,omitempty"`
	RelativeNeckDirection float32      `protobuf:"fixed32,28,opt,name=relative_neck_direction,json=relativeNeckDirection,proto3" json:"relative_neck_direction,omitempty"`
	Stamina               float32      `protobuf:"fixed32,29,opt,name=stamina,proto3" json:"stamina,omitempty"`
	IsKickable            bool         `protobuf:"varint,30,opt,name=is_kickable,json=isKickable,proto3" json:"is_kickable,omitempty"`
	CatchProbability      float32      `protobuf:"fixed32,31,opt,name=catch_probability,json=catchProbability,proto3" json:"catch_probability,omitempty"`
	TackleProbability     float32      `protobuf:"fixed32,32,opt,name=tackle_probability,json=tackleProbability,proto3" json:"tackle_probability,omitempty"`
	FoulProbability       float32      `protobuf:"fixed32,33,opt,name=foul_probability,json=foulProbability,proto3" json:"foul_probability,omitempty"`
	ViewWidth             ViewWidth    `protobuf:"varint,34,opt,name=view_width,json=viewWidth,proto3,enum=protos.ViewWidth" json:"view_width,omitempty"`
	TypeId                int32        `protobuf:"varint,35,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	KickRate              float32      `protobuf:"fixed32,36,opt,name=kick_rate,json=kickRate,proto3" json:"kick_rate,omitempty"`
	Recovery              float32      `protobuf:"fixed32,37,opt,name=recovery,proto3" json:"recovery,omitempty"`
	StaminaCapacity       float32      `protobuf:"fixed32,38,opt,name=stamina_capacity,json=staminaCapacity,proto3" json:"stamina_capacity,omitempty"`
	Card                  CardType     `protobuf:"varint,39,opt,name=card,proto3,enum=protos.CardType" json:"card,omitempty"`
	CatchTime             int32        `protobuf:"varint,40,opt,name=catch_time,json=catchTime,proto3" json:"catch_time,omitempty"`
	Effort                float32      `protobuf:"fixed32,41,opt,name=effort,proto3" json:"effort,omitempty"`
}

func (x *Self) Reset() {
	*x = Self{}
	mi := &file_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Self) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Self) ProtoMessage() {}

func (x *Self) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Self.ProtoReflect.Descriptor instead.
func (*Self) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{6}
}

func (x *Self) GetPosition() *RpcVector2D {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Self) GetSeenPosition() *RpcVector2D {
	if x != nil {
		return x.SeenPosition
	}
	return nil
}

func (x *Self) GetHeardPosition() *RpcVector2D {
	if x != nil {
		return x.HeardPosition
	}
	return nil
}

func (x *Self) GetVelocity() *RpcVector2D {
	if x != nil {
		return x.Velocity
	}
	return nil
}

func (x *Self) GetSeenVelocity() *RpcVector2D {
	if x != nil {
		return x.SeenVelocity
	}
	return nil
}

func (x *Self) GetPosCount() int32 {
	if x != nil {
		return x.PosCount
	}
	return 0
}

func (x *Self) GetSeenPosCount() int32 {
	if x != nil {
		return x.SeenPosCount
	}
	return 0
}

func (x *Self) GetHeardPosCount() int32 {
	if x != nil {
		return x.HeardPosCount
	}
	return 0
}

func (x *Self) GetVelCount() int32 {
	if x != nil {
		return x.VelCount
	}
	return 0
}

func (x *Self) GetSeenVelCount() int32 {
	if x != nil {
		return x.SeenVelCount
	}
	return 0
}

func (x *Self) GetGhostCount() int32 {
	if x != nil {
		return x.GhostCount
	}
	return 0
}

func (x *Self) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Self) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_UNKNOWN
}

func (x *Self) GetUniformNumber() int32 {
	if x != nil {
		return x.UniformNumber
	}
	return 0
}

func (x *Self) GetUniformNumberCount() int32 {
	if x != nil {
		return x.UniformNumberCount
	}
	return 0
}

func (x *Self) GetIsGoalie() bool {
	if x != nil {
		return x.IsGoalie
	}
	return false
}

func (x *Self) GetBodyDirection() float32 {
	if x != nil {
		return x.BodyDirection
	}
	return 0
}

func (x *Self) GetBodyDirectionCount() int32 {
	if x != nil {
		return x.BodyDirectionCount
	}
	return 0
}

func (x *Self) GetFaceDirection() float32 {
	if x != nil {
		return x.FaceDirection
	}
	return 0
}

func (x *Self) GetFaceDirectionCount() int32 {
	if x != nil {
		return x.FaceDirectionCount
	}
	return 0
}

func (x *Self) GetPointToDirection() float32 {
	if x != nil {
		return x.PointToDirection
	}
	return 0
}

func (x *Self) GetPointToDirectionCount() int32 {
	if x != nil {
		return x.PointToDirectionCount
	}
	return 0
}

func (x *Self) GetIsKicking() bool {
	if x != nil {
		return x.IsKicking
	}
	return false
}

func (x *Self) GetDistFromBall() float32 {
	if x != nil {
		return x.DistFromBall
	}
	return 0
}

func (x *Self) GetAngleFromBall() float32 {
	if x != nil {
		return x.AngleFromBall
	}
	return 0
}

func (x *Self) GetBallReachSteps() int32 {
	if x != nil {
		return x.BallReachSteps
	}
	return 0
}

func (x *Self) GetIsTackling() bool {
	if x != nil {
		return x.IsTackling
	}
	return false
}

func (x *Self) GetRelativeNeckDirection() float32 {
	if x != nil {
		return x.RelativeNeckDirection
	}
	return 0
}

func (x *Self) GetStamina() float32 {
	if x != nil {
		return x.Stamina
	}
	return 0
}

func (x *Self) GetIsKickable() bool {
	if x != nil {
		return x.IsKickable
	}
	return false
}

func (x *Self) GetCatchProbability() float32 {
	if x != nil {
		return x.CatchProbability
	}
	return 0
}

func (x *Self) GetTackleProbability() float32 {
	if x != nil {
		return x.TackleProbability
	}
	return 0
}

func (x *Self) GetFoulProbability() float32 {
	if x != nil {
		return x.FoulProbability
	}
	return 0
}

func (x *Self) GetViewWidth() ViewWidth {
	if x != nil {
		return x.ViewWidth
	}
	return ViewWidth_NARROW
}

func (x *Self) GetTypeId() int32 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *Self) GetKickRate() float32 {
	if x != nil {
		return x.KickRate
	}
	return 0
}

func (x *Self) GetRecovery() float32 {
	if x != nil {
		return x.Recovery
	}
	return 0
}

func (x *Self) GetStaminaCapacity() float32 {
	if x != nil {
		return x.StaminaCapacity
	}
	return 0
}

func (x *Self) GetCard() CardType {
	if x != nil {
		return x.Card
	}
	return CardType_NO_CARD
}

func (x *Self) GetCatchTime() int32 {
	if x != nil {
		return x.CatchTime
	}
	return 0
}

func (x *Self) GetEffort() float32 {
	if x != nil {
		return x.Effort
	}
	return 0
}

type InterceptInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType        InterceptActionType `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3,enum=protos.InterceptActionType" json:"action_type,omitempty"`
	TurnSteps         int32               `protobuf:"varint,2,opt,name=turn_steps,json=turnSteps,proto3" json:"turn_steps,omitempty"`
	TurnAngle         float32             `protobuf:"fixed32,3,opt,name=turn_angle,json=turnAngle,proto3" json:"turn_angle,omitempty"`
	DashSteps         int32               `protobuf:"varint,4,opt,name=dash_steps,json=dashSteps,proto3" json:"dash_steps,omitempty"`
	DashPower         float32             `protobuf:"fixed32,5,opt,name=dash_power,json=dashPower,proto3" json:"dash_power,omitempty"`
	DashDir           float32             `protobuf:"fixed32,6,opt,name=dash_dir,json=dashDir,proto3" json:"dash_dir,omitempty"`
	FinalSelfPosition *RpcVector2D        `protobuf:"bytes,7,opt,name=final_self_position,json=finalSelfPosition,proto3" json:"final_self_position,omitempty"`
	FinalBallDist     float32             `protobuf:"fixed32,8,opt,name=final_ball_dist,json=finalBallDist,proto3" json:"final_ball_dist,omitempty"`
	FinalStamina      float32             `protobuf:"fixed32,9,opt,name=final_stamina,json=finalStamina,proto3" json:"final_stamina,omitempty"`
	Value             float32             `protobuf:"fixed32,10,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *InterceptInfo) Reset() {
	*x = InterceptInfo{}
	mi := &file_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterceptInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterceptInfo) ProtoMessage() {}

func (x *InterceptInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterceptInfo.ProtoReflect.Descriptor instead.
func (*InterceptInfo) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{7}
}

func (x *InterceptInfo) GetActionType() InterceptActionType {
	if x != nil {
		return x.ActionType
	}
	return InterceptActionType_UNKNOWN_Intercept_Action_Type
}

func (x *InterceptInfo) GetTurnSteps() int32 {
	if x != nil {
		return x.TurnSteps
	}
	return 0
}

func (x *InterceptInfo) GetTurnAngle() float32 {
	if x != nil {
		return x.TurnAngle
	}
	return 0
}

func (x *InterceptInfo) GetDashSteps() int32 {
	if x != nil {
		return x.DashSteps
	}
	return 0
}

func (x *InterceptInfo) GetDashPower() float32 {
	if x != nil {
		return x.DashPower
	}
	return 0
}

func (x *InterceptInfo) GetDashDir() float32 {
	if x != nil {
		return x.DashDir
	}
	return 0
}

func (x *InterceptInfo) GetFinalSelfPosition() *RpcVector2D {
	if x != nil {
		return x.FinalSelfPosition
	}
	return nil
}

func (x *InterceptInfo) GetFinalBallDist() float32 {
	if x != nil {
		return x.FinalBallDist
	}
	return 0
}

func (x *InterceptInfo) GetFinalStamina() float32 {
	if x != nil {
		return x.FinalStamina
	}
	return 0
}

func (x *InterceptInfo) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type InterceptTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfReachSteps           int32            `protobuf:"varint,1,opt,name=self_reach_steps,json=selfReachSteps,proto3" json:"self_reach_steps,omitempty"`
	FirstTeammateReachSteps  int32            `protobuf:"varint,2,opt,name=first_teammate_reach_steps,json=firstTeammateReachSteps,proto3" json:"first_teammate_reach_steps,omitempty"`
	SecondTeammateReachSteps int32            `protobuf:"varint,3,opt,name=second_teammate_reach_steps,json=secondTeammateReachSteps,proto3" json:"second_teammate_reach_steps,omitempty"`
	FirstOpponentReachSteps  int32            `protobuf:"varint,4,opt,name=first_opponent_reach_steps,json=firstOpponentReachSteps,proto3" json:"first_opponent_reach_steps,omitempty"`
	SecondOpponentReachSteps int32            `protobuf:"varint,5,opt,name=second_opponent_reach_steps,json=secondOpponentReachSteps,proto3" json:"second_opponent_reach_steps,omitempty"`
	FirstTeammateId          int32            `protobuf:"varint,6,opt,name=first_teammate_id,json=firstTeammateId,proto3" json:"first_teammate_id,omitempty"`
	SecondTeammateId         int32            `protobuf:"varint,7,opt,name=second_teammate_id,json=secondTeammateId,proto3" json:"second_teammate_id,omitempty"`
	FirstOpponentId          int32            `protobuf:"varint,8,opt,name=first_opponent_id,json=firstOpponentId,proto3" json:"first_opponent_id,omitempty"`
	SecondOpponentId         int32            `protobuf:"varint,9,opt,name=second_opponent_id,json=secondOpponentId,proto3" json:"second_opponent_id,omitempty"`
	SelfInterceptInfo        []*InterceptInfo `protobuf:"bytes,10,rep,name=self_intercept_info,json=selfInterceptInfo,proto3" json:"self_intercept_info,omitempty"`
}

func (x *InterceptTable) Reset() {
	*x = InterceptTable{}
	mi := &file_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterceptTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterceptTable) ProtoMessage() {}

func (x *InterceptTable) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterceptTable.ProtoReflect.Descriptor instead.
func (*InterceptTable) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{8}
}

func (x *InterceptTable) GetSelfReachSteps() int32 {
	if x != nil {
		return x.SelfReachSteps
	}
	return 0
}

func (x *InterceptTable) GetFirstTeammateReachSteps() int32 {
	if x != nil {
		return x.FirstTeammateReachSteps
	}
	return 0
}

func (x *InterceptTable) GetSecondTeammateReachSteps() int32 {
	if x != nil {
		return x.SecondTeammateReachSteps
	}
	return 0
}

func (x *InterceptTable) GetFirstOpponentReachSteps() int32 {
	if x != nil {
		return x.FirstOpponentReachSteps
	}
	return 0
}

func (x *InterceptTable) GetSecondOpponentReachSteps() int32 {
	if x != nil {
		return x.SecondOpponentReachSteps
	}
	return 0
}

func (x *InterceptTable) GetFirstTeammateId() int32 {
	if x != nil {
		return x.FirstTeammateId
	}
	return 0
}

func (x *InterceptTable) GetSecondTeammateId() int32 {
	if x != nil {
		return x.SecondTeammateId
	}
	return 0
}

func (x *InterceptTable) GetFirstOpponentId() int32 {
	if x != nil {
		return x.FirstOpponentId
	}
	return 0
}

func (x *InterceptTable) GetSecondOpponentId() int32 {
	if x != nil {
		return x.SecondOpponentId
	}
	return 0
}

func (x *InterceptTable) GetSelfInterceptInfo() []*InterceptInfo {
	if x != nil {
		return x.SelfInterceptInfo
	}
	return nil
}

type WorldModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterceptTable            *InterceptTable        `protobuf:"bytes,1,opt,name=intercept_table,json=interceptTable,proto3" json:"intercept_table,omitempty"`
	OurTeamName               string                 `protobuf:"bytes,2,opt,name=our_team_name,json=ourTeamName,proto3" json:"our_team_name,omitempty"`
	TheirTeamName             string                 `protobuf:"bytes,3,opt,name=their_team_name,json=theirTeamName,proto3" json:"their_team_name,omitempty"`
	OurSide                   Side                   `protobuf:"varint,4,opt,name=our_side,json=ourSide,proto3,enum=protos.Side" json:"our_side,omitempty"`
	LastSetPlayStartTime      int32                  `protobuf:"varint,5,opt,name=last_set_play_start_time,json=lastSetPlayStartTime,proto3" json:"last_set_play_start_time,omitempty"`
	Self                      *Self                  `protobuf:"bytes,6,opt,name=self,proto3" json:"self,omitempty"`
	Ball                      *Ball                  `protobuf:"bytes,7,opt,name=ball,proto3" json:"ball,omitempty"`
	Teammates                 []*Player              `protobuf:"bytes,8,rep,name=teammates,proto3" json:"teammates,omitempty"`
	Opponents                 []*Player              `protobuf:"bytes,9,rep,name=opponents,proto3" json:"opponents,omitempty"`
	Unknowns                  []*Player              `protobuf:"bytes,10,rep,name=unknowns,proto3" json:"unknowns,omitempty"`
	OurPlayersDict            map[int32]*Player      `protobuf:"bytes,11,rep,name=our_players_dict,json=ourPlayersDict,proto3" json:"our_players_dict,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TheirPlayersDict          map[int32]*Player      `protobuf:"bytes,12,rep,name=their_players_dict,json=theirPlayersDict,proto3" json:"their_players_dict,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OurGoalieUniformNumber    int32                  `protobuf:"varint,13,opt,name=our_goalie_uniform_number,json=ourGoalieUniformNumber,proto3" json:"our_goalie_uniform_number,omitempty"`
	TheirGoalieUniformNumber  int32                  `protobuf:"varint,14,opt,name=their_goalie_uniform_number,json=theirGoalieUniformNumber,proto3" json:"their_goalie_uniform_number,omitempty"`
	OffsideLineX              float32                `protobuf:"fixed32,15,opt,name=offside_line_x,json=offsideLineX,proto3" json:"offside_line_x,omitempty"`
	OfsideLineXCount          int32                  `protobuf:"varint,16,opt,name=ofside_line_x_count,json=ofsideLineXCount,proto3" json:"ofside_line_x_count,omitempty"`
	KickableTeammateId        int32                  `protobuf:"varint,17,opt,name=kickable_teammate_id,json=kickableTeammateId,proto3" json:"kickable_teammate_id,omitempty"`
	KickableOpponentId        int32                  `protobuf:"varint,18,opt,name=kickable_opponent_id,json=kickableOpponentId,proto3" json:"kickable_opponent_id,omitempty"`
	LastKickSide              Side                   `protobuf:"varint,19,opt,name=last_kick_side,json=lastKickSide,proto3,enum=protos.Side" json:"last_kick_side,omitempty"`
	LastKickerUniformNumber   int32                  `protobuf:"varint,20,opt,name=last_kicker_uniform_number,json=lastKickerUniformNumber,proto3" json:"last_kicker_uniform_number,omitempty"`
	Cycle                     int32                  `protobuf:"varint,21,opt,name=cycle,proto3" json:"cycle,omitempty"`
	GameModeType              GameModeType           `protobuf:"varint,22,opt,name=game_mode_type,json=gameModeType,proto3,enum=protos.GameModeType" json:"game_mode_type,omitempty"`
	LeftTeamScore             int32                  `protobuf:"varint,23,opt,name=left_team_score,json=leftTeamScore,proto3" json:"left_team_score,omitempty"`
	RightTeamScore            int32                  `protobuf:"varint,24,opt,name=right_team_score,json=rightTeamScore,proto3" json:"right_team_score,omitempty"`
	IsOurSetPlay              bool                   `protobuf:"varint,25,opt,name=is_our_set_play,json=isOurSetPlay,proto3" json:"is_our_set_play,omitempty"`
	IsTheirSetPlay            bool                   `protobuf:"varint,26,opt,name=is_their_set_play,json=isTheirSetPlay,proto3" json:"is_their_set_play,omitempty"`
	StopedCycle               int32                  `protobuf:"varint,27,opt,name=stoped_cycle,json=stopedCycle,proto3" json:"stoped_cycle,omitempty"`
	OurTeamScore              int32                  `protobuf:"varint,28,opt,name=our_team_score,json=ourTeamScore,proto3" json:"our_team_score,omitempty"`
	TheirTeamScore            int32                  `protobuf:"varint,29,opt,name=their_team_score,json=theirTeamScore,proto3" json:"their_team_score,omitempty"`
	IsPenaltyKickMode         bool                   `protobuf:"varint,30,opt,name=is_penalty_kick_mode,json=isPenaltyKickMode,proto3" json:"is_penalty_kick_mode,omitempty"`
	HeliosHomePositions       map[int32]*RpcVector2D `protobuf:"bytes,31,rep,name=helios_home_positions,json=heliosHomePositions,proto3" json:"helios_home_positions,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OurDefenseLineX           float64                `protobuf:"fixed64,32,opt,name=our_defense_line_x,json=ourDefenseLineX,proto3" json:"our_defense_line_x,omitempty"`
	TheirDefenseLineX         float64                `protobuf:"fixed64,33,opt,name=their_defense_line_x,json=theirDefenseLineX,proto3" json:"their_defense_line_x,omitempty"`
	OurDefensePlayerLineX     float64                `protobuf:"fixed64,34,opt,name=our_defense_player_line_x,json=ourDefensePlayerLineX,proto3" json:"our_defense_player_line_x,omitempty"`
	TheirDefensePlayerLineX   float64                `protobuf:"fixed64,35,opt,name=their_defense_player_line_x,json=theirDefensePlayerLineX,proto3" json:"their_defense_player_line_x,omitempty"`
	KickableTeammateExistance bool                   `protobuf:"varint,36,opt,name=kickable_teammate_existance,json=kickableTeammateExistance,proto3" json:"kickable_teammate_existance,omitempty"`
	KickableOpponentExistance bool                   `protobuf:"varint,37,opt,name=kickable_opponent_existance,json=kickableOpponentExistance,proto3" json:"kickable_opponent_existance,omitempty"`
	PenaltyKickState          *PenaltyKickState      `protobuf:"bytes,38,opt,name=penalty_kick_state,json=penaltyKickState,proto3" json:"penalty_kick_state,omitempty"`
	SeeTime                   int32                  `protobuf:"varint,39,opt,name=see_time,json=seeTime,proto3" json:"see_time,omitempty"`
	TimeStopped               int32                  `protobuf:"varint,40,opt,name=time_stopped,json=timeStopped,proto3" json:"time_stopped,omitempty"`
	SetPlayCount              int32                  `protobuf:"varint,41,opt,name=set_play_count,json=setPlayCount,proto3" json:"set_play_count,omitempty"`
	GameModeSide              Side                   `protobuf:"varint,42,opt,name=game_mode_side,json=gameModeSide,proto3,enum=protos.Side" json:"game_mode_side,omitempty"`
}

func (x *WorldModel) Reset() {
	*x = WorldModel{}
	mi := &file_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorldModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldModel) ProtoMessage() {}

func (x *WorldModel) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldModel.ProtoReflect.Descriptor instead.
func (*WorldModel) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{9}
}

func (x *WorldModel) GetInterceptTable() *InterceptTable {
	if x != nil {
		return x.InterceptTable
	}
	return nil
}

func (x *WorldModel) GetOurTeamName() string {
	if x != nil {
		return x.OurTeamName
	}
	return ""
}

func (x *WorldModel) GetTheirTeamName() string {
	if x != nil {
		return x.TheirTeamName
	}
	return ""
}

func (x *WorldModel) GetOurSide() Side {
	if x != nil {
		return x.OurSide
	}
	return Side_UNKNOWN
}

func (x *WorldModel) GetLastSetPlayStartTime() int32 {
	if x != nil {
		return x.LastSetPlayStartTime
	}
	return 0
}

func (x *WorldModel) GetSelf() *Self {
	if x != nil {
		return x.Self
	}
	return nil
}

func (x *WorldModel) GetBall() *Ball {
	if x != nil {
		return x.Ball
	}
	return nil
}

func (x *WorldModel) GetTeammates() []*Player {
	if x != nil {
		return x.Teammates
	}
	return nil
}

func (x *WorldModel) GetOpponents() []*Player {
	if x != nil {
		return x.Opponents
	}
	return nil
}

func (x *WorldModel) GetUnknowns() []*Player {
	if x != nil {
		return x.Unknowns
	}
	return nil
}

func (x *WorldModel) GetOurPlayersDict() map[int32]*Player {
	if x != nil {
		return x.OurPlayersDict
	}
	return nil
}

func (x *WorldModel) GetTheirPlayersDict() map[int32]*Player {
	if x != nil {
		return x.TheirPlayersDict
	}
	return nil
}

func (x *WorldModel) GetOurGoalieUniformNumber() int32 {
	if x != nil {
		return x.OurGoalieUniformNumber
	}
	return 0
}

func (x *WorldModel) GetTheirGoalieUniformNumber() int32 {
	if x != nil {
		return x.TheirGoalieUniformNumber
	}
	return 0
}

func (x *WorldModel) GetOffsideLineX() float32 {
	if x != nil {
		return x.OffsideLineX
	}
	return 0
}

func (x *WorldModel) GetOfsideLineXCount() int32 {
	if x != nil {
		return x.OfsideLineXCount
	}
	return 0
}

func (x *WorldModel) GetKickableTeammateId() int32 {
	if x != nil {
		return x.KickableTeammateId
	}
	return 0
}

func (x *WorldModel) GetKickableOpponentId() int32 {
	if x != nil {
		return x.KickableOpponentId
	}
	return 0
}

func (x *WorldModel) GetLastKickSide() Side {
	if x != nil {
		return x.LastKickSide
	}
	return Side_UNKNOWN
}

func (x *WorldModel) GetLastKickerUniformNumber() int32 {
	if x != nil {
		return x.LastKickerUniformNumber
	}
	return 0
}

func (x *WorldModel) GetCycle() int32 {
	if x != nil {
		return x.Cycle
	}
	return 0
}

func (x *WorldModel) GetGameModeType() GameModeType {
	if x != nil {
		return x.GameModeType
	}
	return GameModeType_BeforeKickOff
}

func (x *WorldModel) GetLeftTeamScore() int32 {
	if x != nil {
		return x.LeftTeamScore
	}
	return 0
}

func (x *WorldModel) GetRightTeamScore() int32 {
	if x != nil {
		return x.RightTeamScore
	}
	return 0
}

func (x *WorldModel) GetIsOurSetPlay() bool {
	if x != nil {
		return x.IsOurSetPlay
	}
	return false
}

func (x *WorldModel) GetIsTheirSetPlay() bool {
	if x != nil {
		return x.IsTheirSetPlay
	}
	return false
}

func (x *WorldModel) GetStopedCycle() int32 {
	if x != nil {
		return x.StopedCycle
	}
	return 0
}

func (x *WorldModel) GetOurTeamScore() int32 {
	if x != nil {
		return x.OurTeamScore
	}
	return 0
}

func (x *WorldModel) GetTheirTeamScore() int32 {
	if x != nil {
		return x.TheirTeamScore
	}
	return 0
}

func (x *WorldModel) GetIsPenaltyKickMode() bool {
	if x != nil {
		return x.IsPenaltyKickMode
	}
	return false
}

func (x *WorldModel) GetHeliosHomePositions() map[int32]*RpcVector2D {
	if x != nil {
		return x.HeliosHomePositions
	}
	return nil
}

func (x *WorldModel) GetOurDefenseLineX() float64 {
	if x != nil {
		return x.OurDefenseLineX
	}
	return 0
}

func (x *WorldModel) GetTheirDefenseLineX() float64 {
	if x != nil {
		return x.TheirDefenseLineX
	}
	return 0
}

func (x *WorldModel) GetOurDefensePlayerLineX() float64 {
	if x != nil {
		return x.OurDefensePlayerLineX
	}
	return 0
}

func (x *WorldModel) GetTheirDefensePlayerLineX() float64 {
	if x != nil {
		return x.TheirDefensePlayerLineX
	}
	return 0
}

func (x *WorldModel) GetKickableTeammateExistance() bool {
	if x != nil {
		return x.KickableTeammateExistance
	}
	return false
}

func (x *WorldModel) GetKickableOpponentExistance() bool {
	if x != nil {
		return x.KickableOpponentExistance
	}
	return false
}

func (x *WorldModel) GetPenaltyKickState() *PenaltyKickState {
	if x != nil {
		return x.PenaltyKickState
	}
	return nil
}

func (x *WorldModel) GetSeeTime() int32 {
	if x != nil {
		return x.SeeTime
	}
	return 0
}

func (x *WorldModel) GetTimeStopped() int32 {
	if x != nil {
		return x.TimeStopped
	}
	return 0
}

func (x *WorldModel) GetSetPlayCount() int32 {
	if x != nil {
		return x.SetPlayCount
	}
	return 0
}

func (x *WorldModel) GetGameModeSide() Side {
	if x != nil {
		return x.GameModeSide
	}
	return Side_UNKNOWN
}

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisterResponse *RegisterResponse `protobuf:"bytes,1,opt,name=register_response,json=registerResponse,proto3" json:"register_response,omitempty"`
	WorldModel       *WorldModel       `protobuf:"bytes,2,opt,name=world_model,json=worldModel,proto3" json:"world_model,omitempty"`
	FullWorldModel   *WorldModel       `protobuf:"bytes,3,opt,name=full_world_model,json=fullWorldModel,proto3" json:"full_world_model,omitempty"`
	NeedPreprocess   bool              `protobuf:"varint,4,opt,name=need_preprocess,json=needPreprocess,proto3" json:"need_preprocess,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	mi := &file_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{10}
}

func (x *State) GetRegisterResponse() *RegisterResponse {
	if x != nil {
		return x.RegisterResponse
	}
	return nil
}

func (x *State) GetWorldModel() *WorldModel {
	if x != nil {
		return x.WorldModel
	}
	return nil
}

func (x *State) GetFullWorldModel() *WorldModel {
	if x != nil {
		return x.FullWorldModel
	}
	return nil
}

func (x *State) GetNeedPreprocess() bool {
	if x != nil {
		return x.NeedPreprocess
	}
	return false
}

type InitMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisterResponse *RegisterResponse `protobuf:"bytes,1,opt,name=register_response,json=registerResponse,proto3" json:"register_response,omitempty"`
	DebugMode        bool              `protobuf:"varint,2,opt,name=debug_mode,json=debugMode,proto3" json:"debug_mode,omitempty"`
}

func (x *InitMessage) Reset() {
	*x = InitMessage{}
	mi := &file_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitMessage) ProtoMessage() {}

func (x *InitMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitMessage.ProtoReflect.Descriptor instead.
func (*InitMessage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{11}
}

func (x *InitMessage) GetRegisterResponse() *RegisterResponse {
	if x != nil {
		return x.RegisterResponse
	}
	return nil
}

func (x *InitMessage) GetDebugMode() bool {
	if x != nil {
		return x.DebugMode
	}
	return false
}

type Dash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Power             float32 `protobuf:"fixed32,1,opt,name=power,proto3" json:"power,omitempty"`
	RelativeDirection float32 `protobuf:"fixed32,2,opt,name=relative_direction,json=relativeDirection,proto3" json:"relative_direction,omitempty"`
}

func (x *Dash) Reset() {
	*x = Dash{}
	mi := &file_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dash) ProtoMessage() {}

func (x *Dash) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dash.ProtoReflect.Descriptor instead.
func (*Dash) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{12}
}

func (x *Dash) GetPower() float32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *Dash) GetRelativeDirection() float32 {
	if x != nil {
		return x.RelativeDirection
	}
	return 0
}

type Turn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeDirection float32 `protobuf:"fixed32,1,opt,name=relative_direction,json=relativeDirection,proto3" json:"relative_direction,omitempty"`
}

func (x *Turn) Reset() {
	*x = Turn{}
	mi := &file_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Turn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Turn) ProtoMessage() {}

func (x *Turn) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Turn.ProtoReflect.Descriptor instead.
func (*Turn) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{13}
}

func (x *Turn) GetRelativeDirection() float32 {
	if x != nil {
		return x.RelativeDirection
	}
	return 0
}

type Kick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Power             float32 `protobuf:"fixed32,1,opt,name=power,proto3" json:"power,omitempty"`
	RelativeDirection float32 `protobuf:"fixed32,2,opt,name=relative_direction,json=relativeDirection,proto3" json:"relative_direction,omitempty"`
}

func (x *Kick) Reset() {
	*x = Kick{}
	mi := &file_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Kick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kick) ProtoMessage() {}

func (x *Kick) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kick.ProtoReflect.Descriptor instead.
func (*Kick) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{14}
}

func (x *Kick) GetPower() float32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *Kick) GetRelativeDirection() float32 {
	if x != nil {
		return x.RelativeDirection
	}
	return 0
}

type Tackle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PowerOrDir float32 `protobuf:"fixed32,1,opt,name=power_or_dir,json=powerOrDir,proto3" json:"power_or_dir,omitempty"`
	Foul       bool    `protobuf:"varint,2,opt,name=foul,proto3" json:"foul,omitempty"`
}

func (x *Tackle) Reset() {
	*x = Tackle{}
	mi := &file_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tackle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tackle) ProtoMessage() {}

func (x *Tackle) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tackle.ProtoReflect.Descriptor instead.
func (*Tackle) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{15}
}

func (x *Tackle) GetPowerOrDir() float32 {
	if x != nil {
		return x.PowerOrDir
	}
	return 0
}

func (x *Tackle) GetFoul() bool {
	if x != nil {
		return x.Foul
	}
	return false
}

type Catch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Catch) Reset() {
	*x = Catch{}
	mi := &file_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Catch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Catch) ProtoMessage() {}

func (x *Catch) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Catch.ProtoReflect.Descriptor instead.
func (*Catch) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{16}
}

type Move struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Move) Reset() {
	*x = Move{}
	mi := &file_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Move) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Move) ProtoMessage() {}

func (x *Move) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Move.ProtoReflect.Descriptor instead.
func (*Move) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{17}
}

func (x *Move) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Move) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type TurnNeck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Moment float32 `protobuf:"fixed32,1,opt,name=moment,proto3" json:"moment,omitempty"`
}

func (x *TurnNeck) Reset() {
	*x = TurnNeck{}
	mi := &file_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TurnNeck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurnNeck) ProtoMessage() {}

func (x *TurnNeck) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurnNeck.ProtoReflect.Descriptor instead.
func (*TurnNeck) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{18}
}

func (x *TurnNeck) GetMoment() float32 {
	if x != nil {
		return x.Moment
	}
	return 0
}

type ChangeView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewWidth ViewWidth `protobuf:"varint,1,opt,name=view_width,json=viewWidth,proto3,enum=protos.ViewWidth" json:"view_width,omitempty"`
}

func (x *ChangeView) Reset() {
	*x = ChangeView{}
	mi := &file_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeView) ProtoMessage() {}

func (x *ChangeView) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeView.ProtoReflect.Descriptor instead.
func (*ChangeView) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{19}
}

func (x *ChangeView) GetViewWidth() ViewWidth {
	if x != nil {
		return x.ViewWidth
	}
	return ViewWidth_NARROW
}

type BallMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BallPosition *RpcVector2D `protobuf:"bytes,1,opt,name=ball_position,json=ballPosition,proto3" json:"ball_position,omitempty"`
	BallVelocity *RpcVector2D `protobuf:"bytes,2,opt,name=ball_velocity,json=ballVelocity,proto3" json:"ball_velocity,omitempty"`
}

func (x *BallMessage) Reset() {
	*x = BallMessage{}
	mi := &file_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BallMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BallMessage) ProtoMessage() {}

func (x *BallMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BallMessage.ProtoReflect.Descriptor instead.
func (*BallMessage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{20}
}

func (x *BallMessage) GetBallPosition() *RpcVector2D {
	if x != nil {
		return x.BallPosition
	}
	return nil
}

func (x *BallMessage) GetBallVelocity() *RpcVector2D {
	if x != nil {
		return x.BallVelocity
	}
	return nil
}

type PassMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiverUniformNumber int32        `protobuf:"varint,1,opt,name=receiver_uniform_number,json=receiverUniformNumber,proto3" json:"receiver_uniform_number,omitempty"`
	ReceiverPoint         *RpcVector2D `protobuf:"bytes,2,opt,name=receiver_point,json=receiverPoint,proto3" json:"receiver_point,omitempty"`
	BallPosition          *RpcVector2D `protobuf:"bytes,3,opt,name=ball_position,json=ballPosition,proto3" json:"ball_position,omitempty"`
	BallVelocity          *RpcVector2D `protobuf:"bytes,4,opt,name=ball_velocity,json=ballVelocity,proto3" json:"ball_velocity,omitempty"`
}

func (x *PassMessage) Reset() {
	*x = PassMessage{}
	mi := &file_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PassMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassMessage) ProtoMessage() {}

func (x *PassMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassMessage.ProtoReflect.Descriptor instead.
func (*PassMessage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{21}
}

func (x *PassMessage) GetReceiverUniformNumber() int32 {
	if x != nil {
		return x.ReceiverUniformNumber
	}
	return 0
}

func (x *PassMessage) GetReceiverPoint() *RpcVector2D {
	if x != nil {
		return x.ReceiverPoint
	}
	return nil
}

func (x *PassMessage) GetBallPosition() *RpcVector2D {
	if x != nil {
		return x.BallPosition
	}
	return nil
}

func (x *PassMessage) GetBallVelocity() *RpcVector2D {
	if x != nil {
		return x.BallVelocity
	}
	return nil
}

type InterceptMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Our           bool  `protobuf:"varint,1,opt,name=our,proto3" json:"our,omitempty"`
	UniformNumber int32 `protobuf:"varint,2,opt,name=uniform_number,json=uniformNumber,proto3" json:"uniform_number,omitempty"`
	Cycle         int32 `protobuf:"varint,3,opt,name=cycle,proto3" json:"cycle,omitempty"`
}

func (x *InterceptMessage) Reset() {
	*x = InterceptMessage{}
	mi := &file_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterceptMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterceptMessage) ProtoMessage() {}

func (x *InterceptMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterceptMessage.ProtoReflect.Descriptor instead.
func (*InterceptMessage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{22}
}

func (x *InterceptMessage) GetOur() bool {
	if x != nil {
		return x.Our
	}
	return false
}

func (x *InterceptMessage) GetUniformNumber() int32 {
	if x != nil {
		return x.UniformNumber
	}
	return 0
}

func (x *InterceptMessage) GetCycle() int32 {
	if x != nil {
		return x.Cycle
	}
	return 0
}

type GoalieMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoalieUniformNumber int32        `protobuf:"varint,1,opt,name=goalie_uniform_number,json=goalieUniformNumber,proto3" json:"goalie_uniform_number,omitempty"`
	GoaliePosition      *RpcVector2D `protobuf:"bytes,2,opt,name=goalie_position,json=goaliePosition,proto3" json:"goalie_position,omitempty"`
	GoalieBodyDirection float32      `protobuf:"fixed32,3,opt,name=goalie_body_direction,json=goalieBodyDirection,proto3" json:"goalie_body_direction,omitempty"`
}

func (x *GoalieMessage) Reset() {
	*x = GoalieMessage{}
	mi := &file_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoalieMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoalieMessage) ProtoMessage() {}

func (x *GoalieMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoalieMessage.ProtoReflect.Descriptor instead.
func (*GoalieMessage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{23}
}

func (x *GoalieMessage) GetGoalieUniformNumber() int32 {
	if x != nil {
		return x.GoalieUniformNumber
	}
	return 0
}

func (x *GoalieMessage) GetGoaliePosition() *RpcVector2D {
	if x != nil {
		return x.GoaliePosition
	}
	return nil
}

func (x *GoalieMessage) GetGoalieBodyDirection() float32 {
	if x != nil {
		return x.GoalieBodyDirection
	}
	return 0
}

type GoalieAndPlayerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoalieUniformNumber int32        `protobuf:"varint,1,opt,name=goalie_uniform_number,json=goalieUniformNumber,proto3" json:"goalie_uniform_number,omitempty"`
	GoaliePosition      *RpcVector2D `protobuf:"bytes,2,opt,name=goalie_position,json=goaliePosition,proto3" json:"goalie_position,omitempty"`
	GoalieBodyDirection float32      `protobuf:"fixed32,3,opt,name=goalie_body_direction,json=goalieBodyDirection,proto3" json:"goalie_body_direction,omitempty"`
	PlayerUniformNumber int32        `protobuf:"varint,4,opt,name=player_uniform_number,json=playerUniformNumber,proto3" json:"player_uniform_number,omitempty"`
	PlayerPosition      *RpcVector2D `protobuf:"bytes,5,opt,name=player_position,json=playerPosition,proto3" json:"player_position,omitempty"`
}

func (x *GoalieAndPlayerMessage) Reset() {
	*x = GoalieAndPlayerMessage{}
	mi := &file_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoalieAndPlayerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoalieAndPlayerMessage) ProtoMessage() {}

func (x *GoalieAndPlayerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoalieAndPlayerMessage.ProtoReflect.Descriptor instead.
func (*GoalieAndPlayerMessage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{24}
}

func (x *GoalieAndPlayerMessage) GetGoalieUniformNumber() int32 {
	if x != nil {
		return x.GoalieUniformNumber
	}
	return 0
}

func (x *GoalieAndPlayerMessage) GetGoaliePosition() *RpcVector2D {
	if x != nil {
		return x.GoaliePosition
	}
	return nil
}

func (x *GoalieAndPlayerMessage) GetGoalieBodyDirection() float32 {
	if x != nil {
		return x.GoalieBodyDirection
	}
	return 0
}

func (x *GoalieAndPlayerMessage) GetPlayerUniformNumber() int32 {
	if x != nil {
		return x.PlayerUniformNumber
	}
	return 0
}

func (x *GoalieAndPlayerMessage) GetPlayerPosition() *RpcVector2D {
	if x != nil {
		return x.PlayerPosition
	}
	return nil
}

type OffsideLineMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OffsideLineX float32 `protobuf:"fixed32,1,opt,name=offside_line_x,json=offsideLineX,proto3" json:"offside_line_x,omitempty"`
}

func (x *OffsideLineMessage) Reset() {
	*x = OffsideLineMessage{}
	mi := &file_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OffsideLineMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsideLineMessage) ProtoMessage() {}

func (x *OffsideLineMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsideLineMessage.ProtoReflect.Descriptor instead.
func (*OffsideLineMessage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{25}
}

func (x *OffsideLineMessage) GetOffsideLineX() float32 {
	if x != nil {
		return x.OffsideLineX
	}
	return 0
}

type DefenseLineMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefenseLineX float32 `protobuf:"fixed32,1,opt,name=defense_line_x,json=defenseLineX,proto3" json:"defense_line_x,omitempty"`
}

func (x *DefenseLineMessage) Reset() {
	*x = DefenseLineMessage{}
	mi := &file_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefenseLineMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefenseLineMessage) ProtoMessage() {}

func (x *DefenseLineMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefenseLineMessage.ProtoReflect.Descriptor instead.
func (*DefenseLineMessage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{26}
}

func (x *DefenseLineMessage) GetDefenseLineX() float32 {
	if x != nil {
		return x.DefenseLineX
	}
	return 0
}

type WaitRequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WaitRequestMessage) Reset() {
	*x = WaitRequestMessage{}
	mi := &file_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaitRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitRequestMessage) ProtoMessage() {}

func (x *WaitRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitRequestMessage.ProtoReflect.Descriptor instead.
func (*WaitRequestMessage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{27}
}

type SetplayMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WaitStep int32 `protobuf:"varint,1,opt,name=wait_step,json=waitStep,proto3" json:"wait_step,omitempty"`
}

func (x *SetplayMessage) Reset() {
	*x = SetplayMessage{}
	mi := &file_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetplayMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetplayMessage) ProtoMessage() {}

func (x *SetplayMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetplayMessage.ProtoReflect.Descriptor instead.
func (*SetplayMessage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{28}
}

func (x *SetplayMessage) GetWaitStep() int32 {
	if x != nil {
		return x.WaitStep
	}
	return 0
}

type PassRequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPoint *RpcVector2D `protobuf:"bytes,1,opt,name=target_point,json=targetPoint,proto3" json:"target_point,omitempty"`
}

func (x *PassRequestMessage) Reset() {
	*x = PassRequestMessage{}
	mi := &file_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PassRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassRequestMessage) ProtoMessage() {}

func (x *PassRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassRequestMessage.ProtoReflect.Descriptor instead.
func (*PassRequestMessage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{29}
}

func (x *PassRequestMessage) GetTargetPoint() *RpcVector2D {
	if x != nil {
		return x.TargetPoint
	}
	return nil
}

type StaminaMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stamina float32 `protobuf:"fixed32,1,opt,name=stamina,proto3" json:"stamina,omitempty"`
}

func (x *StaminaMessage) Reset() {
	*x = StaminaMessage{}
	mi := &file_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaminaMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaminaMessage) ProtoMessage() {}

func (x *StaminaMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaminaMessage.ProtoReflect.Descriptor instead.
func (*StaminaMessage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{30}
}

func (x *StaminaMessage) GetStamina() float32 {
	if x != nil {
		return x.Stamina
	}
	return 0
}

type RecoveryMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recovery float32 `protobuf:"fixed32,1,opt,name=recovery,proto3" json:"recovery,omitempty"`
}

func (x *RecoveryMessage) Reset() {
	*x = RecoveryMessage{}
	mi := &file_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecoveryMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryMessage) ProtoMessage() {}

func (x *RecoveryMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryMessage.ProtoReflect.Descriptor instead.
func (*RecoveryMessage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{31}
}

func (x *RecoveryMessage) GetRecovery() float32 {
	if x != nil {
		return x.Recovery
	}
	return 0
}

type StaminaCapacityMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StaminaCapacity float32 `protobuf:"fixed32,1,opt,name=stamina_capacity,json=staminaCapacity,proto3" json:"stamina_capacity,omitempty"`
}

func (x *StaminaCapacityMessage) Reset() {
	*x = StaminaCapacityMessage{}
	mi := &file_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaminaCapacityMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaminaCapacityMessage) ProtoMessage() {}

func (x *StaminaCapacityMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaminaCapacityMessage.ProtoReflect.Descriptor instead.
func (*StaminaCapacityMessage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{32}
}

func (x *StaminaCapacityMessage) GetStaminaCapacity() float32 {
	if x != nil {
		return x.StaminaCapacity
	}
	return 0
}

type DribbleMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPoint *RpcVector2D `protobuf:"bytes,1,opt,name=target_point,json=targetPoint,proto3" json:"target_point,omitempty"`
	QueueCount  int32        `protobuf:"varint,2,opt,name=queue_count,json=queueCount,proto3" json:"queue_count,omitempty"`
}

func (x *DribbleMessage) Reset() {
	*x = DribbleMessage{}
	mi := &file_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DribbleMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DribbleMessage) ProtoMessage() {}

func (x *DribbleMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DribbleMessage.ProtoReflect.Descriptor instead.
func (*DribbleMessage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{33}
}

func (x *DribbleMessage) GetTargetPoint() *RpcVector2D {
	if x != nil {
		return x.TargetPoint
	}
	return nil
}

func (x *DribbleMessage) GetQueueCount() int32 {
	if x != nil {
		return x.QueueCount
	}
	return 0
}

type BallGoalieMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BallPosition        *RpcVector2D `protobuf:"bytes,1,opt,name=ball_position,json=ballPosition,proto3" json:"ball_position,omitempty"`
	BallVelocity        *RpcVector2D `protobuf:"bytes,2,opt,name=ball_velocity,json=ballVelocity,proto3" json:"ball_velocity,omitempty"`
	GoaliePosition      *RpcVector2D `protobuf:"bytes,3,opt,name=goalie_position,json=goaliePosition,proto3" json:"goalie_position,omitempty"`
	GoalieBodyDirection float32      `protobuf:"fixed32,4,opt,name=goalie_body_direction,json=goalieBodyDirection,proto3" json:"goalie_body_direction,omitempty"`
}

func (x *BallGoalieMessage) Reset() {
	*x = BallGoalieMessage{}
	mi := &file_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BallGoalieMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BallGoalieMessage) ProtoMessage() {}

func (x *BallGoalieMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BallGoalieMessage.ProtoReflect.Descriptor instead.
func (*BallGoalieMessage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{34}
}

func (x *BallGoalieMessage) GetBallPosition() *RpcVector2D {
	if x != nil {
		return x.BallPosition
	}
	return nil
}

func (x *BallGoalieMessage) GetBallVelocity() *RpcVector2D {
	if x != nil {
		return x.BallVelocity
	}
	return nil
}

func (x *BallGoalieMessage) GetGoaliePosition() *RpcVector2D {
	if x != nil {
		return x.GoaliePosition
	}
	return nil
}

func (x *BallGoalieMessage) GetGoalieBodyDirection() float32 {
	if x != nil {
		return x.GoalieBodyDirection
	}
	return 0
}

type OnePlayerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniformNumber int32        `protobuf:"varint,1,opt,name=uniform_number,json=uniformNumber,proto3" json:"uniform_number,omitempty"`
	Position      *RpcVector2D `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *OnePlayerMessage) Reset() {
	*x = OnePlayerMessage{}
	mi := &file_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnePlayerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnePlayerMessage) ProtoMessage() {}

func (x *OnePlayerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnePlayerMessage.ProtoReflect.Descriptor instead.
func (*OnePlayerMessage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{35}
}

func (x *OnePlayerMessage) GetUniformNumber() int32 {
	if x != nil {
		return x.UniformNumber
	}
	return 0
}

func (x *OnePlayerMessage) GetPosition() *RpcVector2D {
	if x != nil {
		return x.Position
	}
	return nil
}

type TwoPlayerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstUniformNumber  int32        `protobuf:"varint,1,opt,name=first_uniform_number,json=firstUniformNumber,proto3" json:"first_uniform_number,omitempty"`
	FirstPosition       *RpcVector2D `protobuf:"bytes,2,opt,name=first_position,json=firstPosition,proto3" json:"first_position,omitempty"`
	SecondUniformNumber int32        `protobuf:"varint,3,opt,name=second_uniform_number,json=secondUniformNumber,proto3" json:"second_uniform_number,omitempty"`
	SecondPosition      *RpcVector2D `protobuf:"bytes,4,opt,name=second_position,json=secondPosition,proto3" json:"second_position,omitempty"`
}

func (x *TwoPlayerMessage) Reset() {
	*x = TwoPlayerMessage{}
	mi := &file_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TwoPlayerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwoPlayerMessage) ProtoMessage() {}

func (x *TwoPlayerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwoPlayerMessage.ProtoReflect.Descriptor instead.
func (*TwoPlayerMessage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{36}
}

func (x *TwoPlayerMessage) GetFirstUniformNumber() int32 {
	if x != nil {
		return x.FirstUniformNumber
	}
	return 0
}

func (x *TwoPlayerMessage) GetFirstPosition() *RpcVector2D {
	if x != nil {
		return x.FirstPosition
	}
	return nil
}

func (x *TwoPlayerMessage) GetSecondUniformNumber() int32 {
	if x != nil {
		return x.SecondUniformNumber
	}
	return 0
}

func (x *TwoPlayerMessage) GetSecondPosition() *RpcVector2D {
	if x != nil {
		return x.SecondPosition
	}
	return nil
}

type ThreePlayerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstUniformNumber  int32        `protobuf:"varint,1,opt,name=first_uniform_number,json=firstUniformNumber,proto3" json:"first_uniform_number,omitempty"`
	FirstPosition       *RpcVector2D `protobuf:"bytes,2,opt,name=first_position,json=firstPosition,proto3" json:"first_position,omitempty"`
	SecondUniformNumber int32        `protobuf:"varint,3,opt,name=second_uniform_number,json=secondUniformNumber,proto3" json:"second_uniform_number,omitempty"`
	SecondPosition      *RpcVector2D `protobuf:"bytes,4,opt,name=second_position,json=secondPosition,proto3" json:"second_position,omitempty"`
	ThirdUniformNumber  int32        `protobuf:"varint,5,opt,name=third_uniform_number,json=thirdUniformNumber,proto3" json:"third_uniform_number,omitempty"`
	ThirdPosition       *RpcVector2D `protobuf:"bytes,6,opt,name=third_position,json=thirdPosition,proto3" json:"third_position,omitempty"`
}

func (x *ThreePlayerMessage) Reset() {
	*x = ThreePlayerMessage{}
	mi := &file_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThreePlayerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreePlayerMessage) ProtoMessage() {}

func (x *ThreePlayerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreePlayerMessage.ProtoReflect.Descriptor instead.
func (*ThreePlayerMessage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{37}
}

func (x *ThreePlayerMessage) GetFirstUniformNumber() int32 {
	if x != nil {
		return x.FirstUniformNumber
	}
	return 0
}

func (x *ThreePlayerMessage) GetFirstPosition() *RpcVector2D {
	if x != nil {
		return x.FirstPosition
	}
	return nil
}

func (x *ThreePlayerMessage) GetSecondUniformNumber() int32 {
	if x != nil {
		return x.SecondUniformNumber
	}
	return 0
}

func (x *ThreePlayerMessage) GetSecondPosition() *RpcVector2D {
	if x != nil {
		return x.SecondPosition
	}
	return nil
}

func (x *ThreePlayerMessage) GetThirdUniformNumber() int32 {
	if x != nil {
		return x.ThirdUniformNumber
	}
	return 0
}

func (x *ThreePlayerMessage) GetThirdPosition() *RpcVector2D {
	if x != nil {
		return x.ThirdPosition
	}
	return nil
}

type SelfMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfPosition      *RpcVector2D `protobuf:"bytes,1,opt,name=self_position,json=selfPosition,proto3" json:"self_position,omitempty"`
	SelfBodyDirection float32      `protobuf:"fixed32,2,opt,name=self_body_direction,json=selfBodyDirection,proto3" json:"self_body_direction,omitempty"`
	SelfStamina       float32      `protobuf:"fixed32,3,opt,name=self_stamina,json=selfStamina,proto3" json:"self_stamina,omitempty"`
}

func (x *SelfMessage) Reset() {
	*x = SelfMessage{}
	mi := &file_service_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelfMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfMessage) ProtoMessage() {}

func (x *SelfMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfMessage.ProtoReflect.Descriptor instead.
func (*SelfMessage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{38}
}

func (x *SelfMessage) GetSelfPosition() *RpcVector2D {
	if x != nil {
		return x.SelfPosition
	}
	return nil
}

func (x *SelfMessage) GetSelfBodyDirection() float32 {
	if x != nil {
		return x.SelfBodyDirection
	}
	return 0
}

func (x *SelfMessage) GetSelfStamina() float32 {
	if x != nil {
		return x.SelfStamina
	}
	return 0
}

type TeammateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniformNumber int32        `protobuf:"varint,1,opt,name=uniform_number,json=uniformNumber,proto3" json:"uniform_number,omitempty"`
	Position      *RpcVector2D `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	BodyDirection float32      `protobuf:"fixed32,3,opt,name=body_direction,json=bodyDirection,proto3" json:"body_direction,omitempty"`
}

func (x *TeammateMessage) Reset() {
	*x = TeammateMessage{}
	mi := &file_service_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeammateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeammateMessage) ProtoMessage() {}

func (x *TeammateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeammateMessage.ProtoReflect.Descriptor instead.
func (*TeammateMessage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{39}
}

func (x *TeammateMessage) GetUniformNumber() int32 {
	if x != nil {
		return x.UniformNumber
	}
	return 0
}

func (x *TeammateMessage) GetPosition() *RpcVector2D {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *TeammateMessage) GetBodyDirection() float32 {
	if x != nil {
		return x.BodyDirection
	}
	return 0
}

type OpponentMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniformNumber int32        `protobuf:"varint,1,opt,name=uniform_number,json=uniformNumber,proto3" json:"uniform_number,omitempty"`
	Position      *RpcVector2D `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	BodyDirection float32      `protobuf:"fixed32,3,opt,name=body_direction,json=bodyDirection,proto3" json:"body_direction,omitempty"`
}

func (x *OpponentMessage) Reset() {
	*x = OpponentMessage{}
	mi := &file_service_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpponentMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpponentMessage) ProtoMessage() {}

func (x *OpponentMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpponentMessage.ProtoReflect.Descriptor instead.
func (*OpponentMessage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{40}
}

func (x *OpponentMessage) GetUniformNumber() int32 {
	if x != nil {
		return x.UniformNumber
	}
	return 0
}

func (x *OpponentMessage) GetPosition() *RpcVector2D {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *OpponentMessage) GetBodyDirection() float32 {
	if x != nil {
		return x.BodyDirection
	}
	return 0
}

type BallPlayerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BallPosition   *RpcVector2D `protobuf:"bytes,1,opt,name=ball_position,json=ballPosition,proto3" json:"ball_position,omitempty"`
	BallVelocity   *RpcVector2D `protobuf:"bytes,2,opt,name=ball_velocity,json=ballVelocity,proto3" json:"ball_velocity,omitempty"`
	UniformNumber  int32        `protobuf:"varint,3,opt,name=uniform_number,json=uniformNumber,proto3" json:"uniform_number,omitempty"`
	PlayerPosition *RpcVector2D `protobuf:"bytes,4,opt,name=player_position,json=playerPosition,proto3" json:"player_position,omitempty"`
	BodyDirection  float32      `protobuf:"fixed32,5,opt,name=body_direction,json=bodyDirection,proto3" json:"body_direction,omitempty"`
}

func (x *BallPlayerMessage) Reset() {
	*x = BallPlayerMessage{}
	mi := &file_service_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BallPlayerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BallPlayerMessage) ProtoMessage() {}

func (x *BallPlayerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BallPlayerMessage.ProtoReflect.Descriptor instead.
func (*BallPlayerMessage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{41}
}

func (x *BallPlayerMessage) GetBallPosition() *RpcVector2D {
	if x != nil {
		return x.BallPosition
	}
	return nil
}

func (x *BallPlayerMessage) GetBallVelocity() *RpcVector2D {
	if x != nil {
		return x.BallVelocity
	}
	return nil
}

func (x *BallPlayerMessage) GetUniformNumber() int32 {
	if x != nil {
		return x.UniformNumber
	}
	return 0
}

func (x *BallPlayerMessage) GetPlayerPosition() *RpcVector2D {
	if x != nil {
		return x.PlayerPosition
	}
	return nil
}

func (x *BallPlayerMessage) GetBodyDirection() float32 {
	if x != nil {
		return x.BodyDirection
	}
	return 0
}

type Say struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*Say_BallMessage
	//	*Say_PassMessage
	//	*Say_InterceptMessage
	//	*Say_GoalieMessage
	//	*Say_GoalieAndPlayerMessage
	//	*Say_OffsideLineMessage
	//	*Say_DefenseLineMessage
	//	*Say_WaitRequestMessage
	//	*Say_SetplayMessage
	//	*Say_PassRequestMessage
	//	*Say_StaminaMessage
	//	*Say_RecoveryMessage
	//	*Say_StaminaCapacityMessage
	//	*Say_DribbleMessage
	//	*Say_BallGoalieMessage
	//	*Say_OnePlayerMessage
	//	*Say_TwoPlayerMessage
	//	*Say_ThreePlayerMessage
	//	*Say_SelfMessage
	//	*Say_TeammateMessage
	//	*Say_OpponentMessage
	//	*Say_BallPlayerMessage
	Message isSay_Message `protobuf_oneof:"message"`
}

func (x *Say) Reset() {
	*x = Say{}
	mi := &file_service_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Say) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Say) ProtoMessage() {}

func (x *Say) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Say.ProtoReflect.Descriptor instead.
func (*Say) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{42}
}

func (m *Say) GetMessage() isSay_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *Say) GetBallMessage() *BallMessage {
	if x, ok := x.GetMessage().(*Say_BallMessage); ok {
		return x.BallMessage
	}
	return nil
}

func (x *Say) GetPassMessage() *PassMessage {
	if x, ok := x.GetMessage().(*Say_PassMessage); ok {
		return x.PassMessage
	}
	return nil
}

func (x *Say) GetInterceptMessage() *InterceptMessage {
	if x, ok := x.GetMessage().(*Say_InterceptMessage); ok {
		return x.InterceptMessage
	}
	return nil
}

func (x *Say) GetGoalieMessage() *GoalieMessage {
	if x, ok := x.GetMessage().(*Say_GoalieMessage); ok {
		return x.GoalieMessage
	}
	return nil
}

func (x *Say) GetGoalieAndPlayerMessage() *GoalieAndPlayerMessage {
	if x, ok := x.GetMessage().(*Say_GoalieAndPlayerMessage); ok {
		return x.GoalieAndPlayerMessage
	}
	return nil
}

func (x *Say) GetOffsideLineMessage() *OffsideLineMessage {
	if x, ok := x.GetMessage().(*Say_OffsideLineMessage); ok {
		return x.OffsideLineMessage
	}
	return nil
}

func (x *Say) GetDefenseLineMessage() *DefenseLineMessage {
	if x, ok := x.GetMessage().(*Say_DefenseLineMessage); ok {
		return x.DefenseLineMessage
	}
	return nil
}

func (x *Say) GetWaitRequestMessage() *WaitRequestMessage {
	if x, ok := x.GetMessage().(*Say_WaitRequestMessage); ok {
		return x.WaitRequestMessage
	}
	return nil
}

func (x *Say) GetSetplayMessage() *SetplayMessage {
	if x, ok := x.GetMessage().(*Say_SetplayMessage); ok {
		return x.SetplayMessage
	}
	return nil
}

func (x *Say) GetPassRequestMessage() *PassRequestMessage {
	if x, ok := x.GetMessage().(*Say_PassRequestMessage); ok {
		return x.PassRequestMessage
	}
	return nil
}

func (x *Say) GetStaminaMessage() *StaminaMessage {
	if x, ok := x.GetMessage().(*Say_StaminaMessage); ok {
		return x.StaminaMessage
	}
	return nil
}

func (x *Say) GetRecoveryMessage() *RecoveryMessage {
	if x, ok := x.GetMessage().(*Say_RecoveryMessage); ok {
		return x.RecoveryMessage
	}
	return nil
}

func (x *Say) GetStaminaCapacityMessage() *StaminaCapacityMessage {
	if x, ok := x.GetMessage().(*Say_StaminaCapacityMessage); ok {
		return x.StaminaCapacityMessage
	}
	return nil
}

func (x *Say) GetDribbleMessage() *DribbleMessage {
	if x, ok := x.GetMessage().(*Say_DribbleMessage); ok {
		return x.DribbleMessage
	}
	return nil
}

func (x *Say) GetBallGoalieMessage() *BallGoalieMessage {
	if x, ok := x.GetMessage().(*Say_BallGoalieMessage); ok {
		return x.BallGoalieMessage
	}
	return nil
}

func (x *Say) GetOnePlayerMessage() *OnePlayerMessage {
	if x, ok := x.GetMessage().(*Say_OnePlayerMessage); ok {
		return x.OnePlayerMessage
	}
	return nil
}

func (x *Say) GetTwoPlayerMessage() *TwoPlayerMessage {
	if x, ok := x.GetMessage().(*Say_TwoPlayerMessage); ok {
		return x.TwoPlayerMessage
	}
	return nil
}

func (x *Say) GetThreePlayerMessage() *ThreePlayerMessage {
	if x, ok := x.GetMessage().(*Say_ThreePlayerMessage); ok {
		return x.ThreePlayerMessage
	}
	return nil
}

func (x *Say) GetSelfMessage() *SelfMessage {
	if x, ok := x.GetMessage().(*Say_SelfMessage); ok {
		return x.SelfMessage
	}
	return nil
}

func (x *Say) GetTeammateMessage() *TeammateMessage {
	if x, ok := x.GetMessage().(*Say_TeammateMessage); ok {
		return x.TeammateMessage
	}
	return nil
}

func (x *Say) GetOpponentMessage() *OpponentMessage {
	if x, ok := x.GetMessage().(*Say_OpponentMessage); ok {
		return x.OpponentMessage
	}
	return nil
}

func (x *Say) GetBallPlayerMessage() *BallPlayerMessage {
	if x, ok := x.GetMessage().(*Say_BallPlayerMessage); ok {
		return x.BallPlayerMessage
	}
	return nil
}

type isSay_Message interface {
	isSay_Message()
}

type Say_BallMessage struct {
	BallMessage *BallMessage `protobuf:"bytes,1,opt,name=ball_message,json=ballMessage,proto3,oneof"`
}

type Say_PassMessage struct {
	PassMessage *PassMessage `protobuf:"bytes,2,opt,name=pass_message,json=passMessage,proto3,oneof"`
}

type Say_InterceptMessage struct {
	InterceptMessage *InterceptMessage `protobuf:"bytes,3,opt,name=intercept_message,json=interceptMessage,proto3,oneof"`
}

type Say_GoalieMessage struct {
	GoalieMessage *GoalieMessage `protobuf:"bytes,4,opt,name=goalie_message,json=goalieMessage,proto3,oneof"`
}

type Say_GoalieAndPlayerMessage struct {
	GoalieAndPlayerMessage *GoalieAndPlayerMessage `protobuf:"bytes,5,opt,name=goalie_and_player_message,json=goalieAndPlayerMessage,proto3,oneof"`
}

type Say_OffsideLineMessage struct {
	OffsideLineMessage *OffsideLineMessage `protobuf:"bytes,6,opt,name=offside_line_message,json=offsideLineMessage,proto3,oneof"`
}

type Say_DefenseLineMessage struct {
	DefenseLineMessage *DefenseLineMessage `protobuf:"bytes,7,opt,name=defense_line_message,json=defenseLineMessage,proto3,oneof"`
}

type Say_WaitRequestMessage struct {
	WaitRequestMessage *WaitRequestMessage `protobuf:"bytes,8,opt,name=wait_request_message,json=waitRequestMessage,proto3,oneof"`
}

type Say_SetplayMessage struct {
	SetplayMessage *SetplayMessage `protobuf:"bytes,9,opt,name=setplay_message,json=setplayMessage,proto3,oneof"`
}

type Say_PassRequestMessage struct {
	PassRequestMessage *PassRequestMessage `protobuf:"bytes,10,opt,name=pass_request_message,json=passRequestMessage,proto3,oneof"`
}

type Say_StaminaMessage struct {
	StaminaMessage *StaminaMessage `protobuf:"bytes,11,opt,name=stamina_message,json=staminaMessage,proto3,oneof"`
}

type Say_RecoveryMessage struct {
	RecoveryMessage *RecoveryMessage `protobuf:"bytes,12,opt,name=recovery_message,json=recoveryMessage,proto3,oneof"`
}

type Say_StaminaCapacityMessage struct {
	StaminaCapacityMessage *StaminaCapacityMessage `protobuf:"bytes,13,opt,name=stamina_capacity_message,json=staminaCapacityMessage,proto3,oneof"`
}

type Say_DribbleMessage struct {
	DribbleMessage *DribbleMessage `protobuf:"bytes,14,opt,name=dribble_message,json=dribbleMessage,proto3,oneof"`
}

type Say_BallGoalieMessage struct {
	BallGoalieMessage *BallGoalieMessage `protobuf:"bytes,15,opt,name=ball_goalie_message,json=ballGoalieMessage,proto3,oneof"`
}

type Say_OnePlayerMessage struct {
	OnePlayerMessage *OnePlayerMessage `protobuf:"bytes,16,opt,name=one_player_message,json=onePlayerMessage,proto3,oneof"`
}

type Say_TwoPlayerMessage struct {
	TwoPlayerMessage *TwoPlayerMessage `protobuf:"bytes,17,opt,name=two_player_message,json=twoPlayerMessage,proto3,oneof"`
}

type Say_ThreePlayerMessage struct {
	ThreePlayerMessage *ThreePlayerMessage `protobuf:"bytes,18,opt,name=three_player_message,json=threePlayerMessage,proto3,oneof"`
}

type Say_SelfMessage struct {
	SelfMessage *SelfMessage `protobuf:"bytes,19,opt,name=self_message,json=selfMessage,proto3,oneof"`
}

type Say_TeammateMessage struct {
	TeammateMessage *TeammateMessage `protobuf:"bytes,20,opt,name=teammate_message,json=teammateMessage,proto3,oneof"`
}

type Say_OpponentMessage struct {
	OpponentMessage *OpponentMessage `protobuf:"bytes,21,opt,name=opponent_message,json=opponentMessage,proto3,oneof"`
}

type Say_BallPlayerMessage struct {
	BallPlayerMessage *BallPlayerMessage `protobuf:"bytes,22,opt,name=ball_player_message,json=ballPlayerMessage,proto3,oneof"`
}

func (*Say_BallMessage) isSay_Message() {}

func (*Say_PassMessage) isSay_Message() {}

func (*Say_InterceptMessage) isSay_Message() {}

func (*Say_GoalieMessage) isSay_Message() {}

func (*Say_GoalieAndPlayerMessage) isSay_Message() {}

func (*Say_OffsideLineMessage) isSay_Message() {}

func (*Say_DefenseLineMessage) isSay_Message() {}

func (*Say_WaitRequestMessage) isSay_Message() {}

func (*Say_SetplayMessage) isSay_Message() {}

func (*Say_PassRequestMessage) isSay_Message() {}

func (*Say_StaminaMessage) isSay_Message() {}

func (*Say_RecoveryMessage) isSay_Message() {}

func (*Say_StaminaCapacityMessage) isSay_Message() {}

func (*Say_DribbleMessage) isSay_Message() {}

func (*Say_BallGoalieMessage) isSay_Message() {}

func (*Say_OnePlayerMessage) isSay_Message() {}

func (*Say_TwoPlayerMessage) isSay_Message() {}

func (*Say_ThreePlayerMessage) isSay_Message() {}

func (*Say_SelfMessage) isSay_Message() {}

func (*Say_TeammateMessage) isSay_Message() {}

func (*Say_OpponentMessage) isSay_Message() {}

func (*Say_BallPlayerMessage) isSay_Message() {}

type PointTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *PointTo) Reset() {
	*x = PointTo{}
	mi := &file_service_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PointTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointTo) ProtoMessage() {}

func (x *PointTo) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointTo.ProtoReflect.Descriptor instead.
func (*PointTo) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{43}
}

func (x *PointTo) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *PointTo) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type PointToOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PointToOf) Reset() {
	*x = PointToOf{}
	mi := &file_service_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PointToOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointToOf) ProtoMessage() {}

func (x *PointToOf) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointToOf.ProtoReflect.Descriptor instead.
func (*PointToOf) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{44}
}

type AttentionTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Side Side  `protobuf:"varint,1,opt,name=side,proto3,enum=protos.Side" json:"side,omitempty"`
	Unum int32 `protobuf:"varint,2,opt,name=unum,proto3" json:"unum,omitempty"`
}

func (x *AttentionTo) Reset() {
	*x = AttentionTo{}
	mi := &file_service_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttentionTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttentionTo) ProtoMessage() {}

func (x *AttentionTo) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttentionTo.ProtoReflect.Descriptor instead.
func (*AttentionTo) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{45}
}

func (x *AttentionTo) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_UNKNOWN
}

func (x *AttentionTo) GetUnum() int32 {
	if x != nil {
		return x.Unum
	}
	return 0
}

type AttentionToOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AttentionToOf) Reset() {
	*x = AttentionToOf{}
	mi := &file_service_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttentionToOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttentionToOf) ProtoMessage() {}

func (x *AttentionToOf) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttentionToOf.ProtoReflect.Descriptor instead.
func (*AttentionToOf) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{46}
}

type AddText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level   LoggerLevel `protobuf:"varint,1,opt,name=level,proto3,enum=protos.LoggerLevel" json:"level,omitempty"`
	Message string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AddText) Reset() {
	*x = AddText{}
	mi := &file_service_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddText) ProtoMessage() {}

func (x *AddText) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddText.ProtoReflect.Descriptor instead.
func (*AddText) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{47}
}

func (x *AddText) GetLevel() LoggerLevel {
	if x != nil {
		return x.Level
	}
	return LoggerLevel_NoneLevel
}

func (x *AddText) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AddPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level LoggerLevel  `protobuf:"varint,1,opt,name=level,proto3,enum=protos.LoggerLevel" json:"level,omitempty"`
	Point *RpcVector2D `protobuf:"bytes,2,opt,name=point,proto3" json:"point,omitempty"`
	Color string       `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *AddPoint) Reset() {
	*x = AddPoint{}
	mi := &file_service_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPoint) ProtoMessage() {}

func (x *AddPoint) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPoint.ProtoReflect.Descriptor instead.
func (*AddPoint) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{48}
}

func (x *AddPoint) GetLevel() LoggerLevel {
	if x != nil {
		return x.Level
	}
	return LoggerLevel_NoneLevel
}

func (x *AddPoint) GetPoint() *RpcVector2D {
	if x != nil {
		return x.Point
	}
	return nil
}

func (x *AddPoint) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type AddLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level LoggerLevel  `protobuf:"varint,1,opt,name=level,proto3,enum=protos.LoggerLevel" json:"level,omitempty"`
	Start *RpcVector2D `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End   *RpcVector2D `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
	Color string       `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *AddLine) Reset() {
	*x = AddLine{}
	mi := &file_service_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLine) ProtoMessage() {}

func (x *AddLine) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLine.ProtoReflect.Descriptor instead.
func (*AddLine) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{49}
}

func (x *AddLine) GetLevel() LoggerLevel {
	if x != nil {
		return x.Level
	}
	return LoggerLevel_NoneLevel
}

func (x *AddLine) GetStart() *RpcVector2D {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *AddLine) GetEnd() *RpcVector2D {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *AddLine) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type AddArc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level      LoggerLevel  `protobuf:"varint,1,opt,name=level,proto3,enum=protos.LoggerLevel" json:"level,omitempty"`
	Center     *RpcVector2D `protobuf:"bytes,2,opt,name=center,proto3" json:"center,omitempty"`
	Radius     float32      `protobuf:"fixed32,3,opt,name=radius,proto3" json:"radius,omitempty"`
	StartAngle float32      `protobuf:"fixed32,4,opt,name=start_angle,json=startAngle,proto3" json:"start_angle,omitempty"`
	SpanAngel  float32      `protobuf:"fixed32,5,opt,name=span_angel,json=spanAngel,proto3" json:"span_angel,omitempty"`
	Color      string       `protobuf:"bytes,6,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *AddArc) Reset() {
	*x = AddArc{}
	mi := &file_service_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddArc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddArc) ProtoMessage() {}

func (x *AddArc) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddArc.ProtoReflect.Descriptor instead.
func (*AddArc) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{50}
}

func (x *AddArc) GetLevel() LoggerLevel {
	if x != nil {
		return x.Level
	}
	return LoggerLevel_NoneLevel
}

func (x *AddArc) GetCenter() *RpcVector2D {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *AddArc) GetRadius() float32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *AddArc) GetStartAngle() float32 {
	if x != nil {
		return x.StartAngle
	}
	return 0
}

func (x *AddArc) GetSpanAngel() float32 {
	if x != nil {
		return x.SpanAngel
	}
	return 0
}

func (x *AddArc) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type AddCircle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level  LoggerLevel  `protobuf:"varint,1,opt,name=level,proto3,enum=protos.LoggerLevel" json:"level,omitempty"`
	Center *RpcVector2D `protobuf:"bytes,2,opt,name=center,proto3" json:"center,omitempty"`
	Radius float32      `protobuf:"fixed32,3,opt,name=radius,proto3" json:"radius,omitempty"`
	Color  string       `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
	Fill   bool         `protobuf:"varint,5,opt,name=fill,proto3" json:"fill,omitempty"`
}

func (x *AddCircle) Reset() {
	*x = AddCircle{}
	mi := &file_service_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCircle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCircle) ProtoMessage() {}

func (x *AddCircle) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCircle.ProtoReflect.Descriptor instead.
func (*AddCircle) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{51}
}

func (x *AddCircle) GetLevel() LoggerLevel {
	if x != nil {
		return x.Level
	}
	return LoggerLevel_NoneLevel
}

func (x *AddCircle) GetCenter() *RpcVector2D {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *AddCircle) GetRadius() float32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *AddCircle) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *AddCircle) GetFill() bool {
	if x != nil {
		return x.Fill
	}
	return false
}

type AddTriangle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level  LoggerLevel  `protobuf:"varint,1,opt,name=level,proto3,enum=protos.LoggerLevel" json:"level,omitempty"`
	Point1 *RpcVector2D `protobuf:"bytes,2,opt,name=point1,proto3" json:"point1,omitempty"`
	Point2 *RpcVector2D `protobuf:"bytes,3,opt,name=point2,proto3" json:"point2,omitempty"`
	Point3 *RpcVector2D `protobuf:"bytes,4,opt,name=point3,proto3" json:"point3,omitempty"`
	Color  string       `protobuf:"bytes,5,opt,name=color,proto3" json:"color,omitempty"`
	Fill   bool         `protobuf:"varint,6,opt,name=fill,proto3" json:"fill,omitempty"`
}

func (x *AddTriangle) Reset() {
	*x = AddTriangle{}
	mi := &file_service_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTriangle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTriangle) ProtoMessage() {}

func (x *AddTriangle) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTriangle.ProtoReflect.Descriptor instead.
func (*AddTriangle) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{52}
}

func (x *AddTriangle) GetLevel() LoggerLevel {
	if x != nil {
		return x.Level
	}
	return LoggerLevel_NoneLevel
}

func (x *AddTriangle) GetPoint1() *RpcVector2D {
	if x != nil {
		return x.Point1
	}
	return nil
}

func (x *AddTriangle) GetPoint2() *RpcVector2D {
	if x != nil {
		return x.Point2
	}
	return nil
}

func (x *AddTriangle) GetPoint3() *RpcVector2D {
	if x != nil {
		return x.Point3
	}
	return nil
}

func (x *AddTriangle) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *AddTriangle) GetFill() bool {
	if x != nil {
		return x.Fill
	}
	return false
}

type AddRectangle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level  LoggerLevel `protobuf:"varint,1,opt,name=level,proto3,enum=protos.LoggerLevel" json:"level,omitempty"`
	Left   float32     `protobuf:"fixed32,2,opt,name=left,proto3" json:"left,omitempty"`
	Top    float32     `protobuf:"fixed32,3,opt,name=top,proto3" json:"top,omitempty"`
	Length float32     `protobuf:"fixed32,4,opt,name=length,proto3" json:"length,omitempty"`
	Width  float32     `protobuf:"fixed32,5,opt,name=width,proto3" json:"width,omitempty"`
	Color  string      `protobuf:"bytes,6,opt,name=color,proto3" json:"color,omitempty"`
	Fill   bool        `protobuf:"varint,7,opt,name=fill,proto3" json:"fill,omitempty"`
}

func (x *AddRectangle) Reset() {
	*x = AddRectangle{}
	mi := &file_service_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddRectangle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRectangle) ProtoMessage() {}

func (x *AddRectangle) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRectangle.ProtoReflect.Descriptor instead.
func (*AddRectangle) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{53}
}

func (x *AddRectangle) GetLevel() LoggerLevel {
	if x != nil {
		return x.Level
	}
	return LoggerLevel_NoneLevel
}

func (x *AddRectangle) GetLeft() float32 {
	if x != nil {
		return x.Left
	}
	return 0
}

func (x *AddRectangle) GetTop() float32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *AddRectangle) GetLength() float32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *AddRectangle) GetWidth() float32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *AddRectangle) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *AddRectangle) GetFill() bool {
	if x != nil {
		return x.Fill
	}
	return false
}

type AddSector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level      LoggerLevel  `protobuf:"varint,1,opt,name=level,proto3,enum=protos.LoggerLevel" json:"level,omitempty"`
	Center     *RpcVector2D `protobuf:"bytes,2,opt,name=center,proto3" json:"center,omitempty"`
	MinRadius  float32      `protobuf:"fixed32,3,opt,name=min_radius,json=minRadius,proto3" json:"min_radius,omitempty"`
	MaxRadius  float32      `protobuf:"fixed32,4,opt,name=max_radius,json=maxRadius,proto3" json:"max_radius,omitempty"`
	StartAngle float32      `protobuf:"fixed32,5,opt,name=start_angle,json=startAngle,proto3" json:"start_angle,omitempty"`
	SpanAngel  float32      `protobuf:"fixed32,6,opt,name=span_angel,json=spanAngel,proto3" json:"span_angel,omitempty"`
	Color      string       `protobuf:"bytes,7,opt,name=color,proto3" json:"color,omitempty"`
	Fill       bool         `protobuf:"varint,8,opt,name=fill,proto3" json:"fill,omitempty"`
}

func (x *AddSector) Reset() {
	*x = AddSector{}
	mi := &file_service_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddSector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSector) ProtoMessage() {}

func (x *AddSector) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSector.ProtoReflect.Descriptor instead.
func (*AddSector) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{54}
}

func (x *AddSector) GetLevel() LoggerLevel {
	if x != nil {
		return x.Level
	}
	return LoggerLevel_NoneLevel
}

func (x *AddSector) GetCenter() *RpcVector2D {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *AddSector) GetMinRadius() float32 {
	if x != nil {
		return x.MinRadius
	}
	return 0
}

func (x *AddSector) GetMaxRadius() float32 {
	if x != nil {
		return x.MaxRadius
	}
	return 0
}

func (x *AddSector) GetStartAngle() float32 {
	if x != nil {
		return x.StartAngle
	}
	return 0
}

func (x *AddSector) GetSpanAngel() float32 {
	if x != nil {
		return x.SpanAngel
	}
	return 0
}

func (x *AddSector) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *AddSector) GetFill() bool {
	if x != nil {
		return x.Fill
	}
	return false
}

type AddMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level    LoggerLevel  `protobuf:"varint,1,opt,name=level,proto3,enum=protos.LoggerLevel" json:"level,omitempty"`
	Position *RpcVector2D `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Message  string       `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Color    string       `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *AddMessage) Reset() {
	*x = AddMessage{}
	mi := &file_service_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMessage) ProtoMessage() {}

func (x *AddMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMessage.ProtoReflect.Descriptor instead.
func (*AddMessage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{55}
}

func (x *AddMessage) GetLevel() LoggerLevel {
	if x != nil {
		return x.Level
	}
	return LoggerLevel_NoneLevel
}

func (x *AddMessage) GetPosition() *RpcVector2D {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *AddMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddMessage) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Log:
	//
	//	*Log_AddText
	//	*Log_AddPoint
	//	*Log_AddLine
	//	*Log_AddArc
	//	*Log_AddCircle
	//	*Log_AddTriangle
	//	*Log_AddRectangle
	//	*Log_AddSector
	//	*Log_AddMessage
	Log isLog_Log `protobuf_oneof:"log"`
}

func (x *Log) Reset() {
	*x = Log{}
	mi := &file_service_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{56}
}

func (m *Log) GetLog() isLog_Log {
	if m != nil {
		return m.Log
	}
	return nil
}

func (x *Log) GetAddText() *AddText {
	if x, ok := x.GetLog().(*Log_AddText); ok {
		return x.AddText
	}
	return nil
}

func (x *Log) GetAddPoint() *AddPoint {
	if x, ok := x.GetLog().(*Log_AddPoint); ok {
		return x.AddPoint
	}
	return nil
}

func (x *Log) GetAddLine() *AddLine {
	if x, ok := x.GetLog().(*Log_AddLine); ok {
		return x.AddLine
	}
	return nil
}

func (x *Log) GetAddArc() *AddArc {
	if x, ok := x.GetLog().(*Log_AddArc); ok {
		return x.AddArc
	}
	return nil
}

func (x *Log) GetAddCircle() *AddCircle {
	if x, ok := x.GetLog().(*Log_AddCircle); ok {
		return x.AddCircle
	}
	return nil
}

func (x *Log) GetAddTriangle() *AddTriangle {
	if x, ok := x.GetLog().(*Log_AddTriangle); ok {
		return x.AddTriangle
	}
	return nil
}

func (x *Log) GetAddRectangle() *AddRectangle {
	if x, ok := x.GetLog().(*Log_AddRectangle); ok {
		return x.AddRectangle
	}
	return nil
}

func (x *Log) GetAddSector() *AddSector {
	if x, ok := x.GetLog().(*Log_AddSector); ok {
		return x.AddSector
	}
	return nil
}

func (x *Log) GetAddMessage() *AddMessage {
	if x, ok := x.GetLog().(*Log_AddMessage); ok {
		return x.AddMessage
	}
	return nil
}

type isLog_Log interface {
	isLog_Log()
}

type Log_AddText struct {
	AddText *AddText `protobuf:"bytes,1,opt,name=add_text,json=addText,proto3,oneof"`
}

type Log_AddPoint struct {
	AddPoint *AddPoint `protobuf:"bytes,2,opt,name=add_point,json=addPoint,proto3,oneof"`
}

type Log_AddLine struct {
	AddLine *AddLine `protobuf:"bytes,3,opt,name=add_line,json=addLine,proto3,oneof"`
}

type Log_AddArc struct {
	AddArc *AddArc `protobuf:"bytes,4,opt,name=add_arc,json=addArc,proto3,oneof"`
}

type Log_AddCircle struct {
	AddCircle *AddCircle `protobuf:"bytes,5,opt,name=add_circle,json=addCircle,proto3,oneof"`
}

type Log_AddTriangle struct {
	AddTriangle *AddTriangle `protobuf:"bytes,6,opt,name=add_triangle,json=addTriangle,proto3,oneof"`
}

type Log_AddRectangle struct {
	AddRectangle *AddRectangle `protobuf:"bytes,7,opt,name=add_rectangle,json=addRectangle,proto3,oneof"`
}

type Log_AddSector struct {
	AddSector *AddSector `protobuf:"bytes,8,opt,name=add_sector,json=addSector,proto3,oneof"`
}

type Log_AddMessage struct {
	AddMessage *AddMessage `protobuf:"bytes,9,opt,name=add_message,json=addMessage,proto3,oneof"`
}

func (*Log_AddText) isLog_Log() {}

func (*Log_AddPoint) isLog_Log() {}

func (*Log_AddLine) isLog_Log() {}

func (*Log_AddArc) isLog_Log() {}

func (*Log_AddCircle) isLog_Log() {}

func (*Log_AddTriangle) isLog_Log() {}

func (*Log_AddRectangle) isLog_Log() {}

func (*Log_AddSector) isLog_Log() {}

func (*Log_AddMessage) isLog_Log() {}

type DebugClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DebugClient) Reset() {
	*x = DebugClient{}
	mi := &file_service_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebugClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugClient) ProtoMessage() {}

func (x *DebugClient) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugClient.ProtoReflect.Descriptor instead.
func (*DebugClient) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{57}
}

func (x *DebugClient) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Body_GoToPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPoint       *RpcVector2D `protobuf:"bytes,1,opt,name=target_point,json=targetPoint,proto3" json:"target_point,omitempty"`
	DistanceThreshold float32      `protobuf:"fixed32,2,opt,name=distance_threshold,json=distanceThreshold,proto3" json:"distance_threshold,omitempty"`
	MaxDashPower      float32      `protobuf:"fixed32,3,opt,name=max_dash_power,json=maxDashPower,proto3" json:"max_dash_power,omitempty"`
}

func (x *Body_GoToPoint) Reset() {
	*x = Body_GoToPoint{}
	mi := &file_service_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Body_GoToPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Body_GoToPoint) ProtoMessage() {}

func (x *Body_GoToPoint) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Body_GoToPoint.ProtoReflect.Descriptor instead.
func (*Body_GoToPoint) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{58}
}

func (x *Body_GoToPoint) GetTargetPoint() *RpcVector2D {
	if x != nil {
		return x.TargetPoint
	}
	return nil
}

func (x *Body_GoToPoint) GetDistanceThreshold() float32 {
	if x != nil {
		return x.DistanceThreshold
	}
	return 0
}

func (x *Body_GoToPoint) GetMaxDashPower() float32 {
	if x != nil {
		return x.MaxDashPower
	}
	return 0
}

type Body_SmartKick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPoint         *RpcVector2D `protobuf:"bytes,1,opt,name=target_point,json=targetPoint,proto3" json:"target_point,omitempty"`
	FirstSpeed          float32      `protobuf:"fixed32,2,opt,name=first_speed,json=firstSpeed,proto3" json:"first_speed,omitempty"`
	FirstSpeedThreshold float32      `protobuf:"fixed32,3,opt,name=first_speed_threshold,json=firstSpeedThreshold,proto3" json:"first_speed_threshold,omitempty"`
	MaxSteps            int32        `protobuf:"varint,4,opt,name=max_steps,json=maxSteps,proto3" json:"max_steps,omitempty"`
}

func (x *Body_SmartKick) Reset() {
	*x = Body_SmartKick{}
	mi := &file_service_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Body_SmartKick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Body_SmartKick) ProtoMessage() {}

func (x *Body_SmartKick) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Body_SmartKick.ProtoReflect.Descriptor instead.
func (*Body_SmartKick) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{59}
}

func (x *Body_SmartKick) GetTargetPoint() *RpcVector2D {
	if x != nil {
		return x.TargetPoint
	}
	return nil
}

func (x *Body_SmartKick) GetFirstSpeed() float32 {
	if x != nil {
		return x.FirstSpeed
	}
	return 0
}

func (x *Body_SmartKick) GetFirstSpeedThreshold() float32 {
	if x != nil {
		return x.FirstSpeedThreshold
	}
	return 0
}

func (x *Body_SmartKick) GetMaxSteps() int32 {
	if x != nil {
		return x.MaxSteps
	}
	return 0
}

type Bhv_BeforeKickOff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Point *RpcVector2D `protobuf:"bytes,1,opt,name=point,proto3" json:"point,omitempty"`
}

func (x *Bhv_BeforeKickOff) Reset() {
	*x = Bhv_BeforeKickOff{}
	mi := &file_service_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bhv_BeforeKickOff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bhv_BeforeKickOff) ProtoMessage() {}

func (x *Bhv_BeforeKickOff) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bhv_BeforeKickOff.ProtoReflect.Descriptor instead.
func (*Bhv_BeforeKickOff) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{60}
}

func (x *Bhv_BeforeKickOff) GetPoint() *RpcVector2D {
	if x != nil {
		return x.Point
	}
	return nil
}

type Bhv_BodyNeckToBall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Bhv_BodyNeckToBall) Reset() {
	*x = Bhv_BodyNeckToBall{}
	mi := &file_service_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bhv_BodyNeckToBall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bhv_BodyNeckToBall) ProtoMessage() {}

func (x *Bhv_BodyNeckToBall) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bhv_BodyNeckToBall.ProtoReflect.Descriptor instead.
func (*Bhv_BodyNeckToBall) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{61}
}

type Bhv_BodyNeckToPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Point *RpcVector2D `protobuf:"bytes,1,opt,name=point,proto3" json:"point,omitempty"`
}

func (x *Bhv_BodyNeckToPoint) Reset() {
	*x = Bhv_BodyNeckToPoint{}
	mi := &file_service_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bhv_BodyNeckToPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bhv_BodyNeckToPoint) ProtoMessage() {}

func (x *Bhv_BodyNeckToPoint) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bhv_BodyNeckToPoint.ProtoReflect.Descriptor instead.
func (*Bhv_BodyNeckToPoint) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{62}
}

func (x *Bhv_BodyNeckToPoint) GetPoint() *RpcVector2D {
	if x != nil {
		return x.Point
	}
	return nil
}

type Bhv_Emergency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Bhv_Emergency) Reset() {
	*x = Bhv_Emergency{}
	mi := &file_service_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bhv_Emergency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bhv_Emergency) ProtoMessage() {}

func (x *Bhv_Emergency) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bhv_Emergency.ProtoReflect.Descriptor instead.
func (*Bhv_Emergency) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{63}
}

type Bhv_GoToPointLookBall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPoint       *RpcVector2D `protobuf:"bytes,1,opt,name=target_point,json=targetPoint,proto3" json:"target_point,omitempty"`
	DistanceThreshold float32      `protobuf:"fixed32,2,opt,name=distance_threshold,json=distanceThreshold,proto3" json:"distance_threshold,omitempty"`
	MaxDashPower      float32      `protobuf:"fixed32,3,opt,name=max_dash_power,json=maxDashPower,proto3" json:"max_dash_power,omitempty"`
}

func (x *Bhv_GoToPointLookBall) Reset() {
	*x = Bhv_GoToPointLookBall{}
	mi := &file_service_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bhv_GoToPointLookBall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bhv_GoToPointLookBall) ProtoMessage() {}

func (x *Bhv_GoToPointLookBall) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bhv_GoToPointLookBall.ProtoReflect.Descriptor instead.
func (*Bhv_GoToPointLookBall) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{64}
}

func (x *Bhv_GoToPointLookBall) GetTargetPoint() *RpcVector2D {
	if x != nil {
		return x.TargetPoint
	}
	return nil
}

func (x *Bhv_GoToPointLookBall) GetDistanceThreshold() float32 {
	if x != nil {
		return x.DistanceThreshold
	}
	return 0
}

func (x *Bhv_GoToPointLookBall) GetMaxDashPower() float32 {
	if x != nil {
		return x.MaxDashPower
	}
	return 0
}

type Bhv_NeckBodyToBall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AngleBuf float32 `protobuf:"fixed32,1,opt,name=angle_buf,json=angleBuf,proto3" json:"angle_buf,omitempty"`
}

func (x *Bhv_NeckBodyToBall) Reset() {
	*x = Bhv_NeckBodyToBall{}
	mi := &file_service_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bhv_NeckBodyToBall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bhv_NeckBodyToBall) ProtoMessage() {}

func (x *Bhv_NeckBodyToBall) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bhv_NeckBodyToBall.ProtoReflect.Descriptor instead.
func (*Bhv_NeckBodyToBall) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{65}
}

func (x *Bhv_NeckBodyToBall) GetAngleBuf() float32 {
	if x != nil {
		return x.AngleBuf
	}
	return 0
}

type Bhv_NeckBodyToPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Point    *RpcVector2D `protobuf:"bytes,1,opt,name=point,proto3" json:"point,omitempty"`
	AngleBuf float32      `protobuf:"fixed32,2,opt,name=angle_buf,json=angleBuf,proto3" json:"angle_buf,omitempty"`
}

func (x *Bhv_NeckBodyToPoint) Reset() {
	*x = Bhv_NeckBodyToPoint{}
	mi := &file_service_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bhv_NeckBodyToPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bhv_NeckBodyToPoint) ProtoMessage() {}

func (x *Bhv_NeckBodyToPoint) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bhv_NeckBodyToPoint.ProtoReflect.Descriptor instead.
func (*Bhv_NeckBodyToPoint) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{66}
}

func (x *Bhv_NeckBodyToPoint) GetPoint() *RpcVector2D {
	if x != nil {
		return x.Point
	}
	return nil
}

func (x *Bhv_NeckBodyToPoint) GetAngleBuf() float32 {
	if x != nil {
		return x.AngleBuf
	}
	return 0
}

type Bhv_ScanField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Bhv_ScanField) Reset() {
	*x = Bhv_ScanField{}
	mi := &file_service_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bhv_ScanField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bhv_ScanField) ProtoMessage() {}

func (x *Bhv_ScanField) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bhv_ScanField.ProtoReflect.Descriptor instead.
func (*Bhv_ScanField) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{67}
}

type Body_AdvanceBall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Body_AdvanceBall) Reset() {
	*x = Body_AdvanceBall{}
	mi := &file_service_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Body_AdvanceBall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Body_AdvanceBall) ProtoMessage() {}

func (x *Body_AdvanceBall) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Body_AdvanceBall.ProtoReflect.Descriptor instead.
func (*Body_AdvanceBall) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{68}
}

type Body_ClearBall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Body_ClearBall) Reset() {
	*x = Body_ClearBall{}
	mi := &file_service_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Body_ClearBall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Body_ClearBall) ProtoMessage() {}

func (x *Body_ClearBall) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Body_ClearBall.ProtoReflect.Descriptor instead.
func (*Body_ClearBall) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{69}
}

type Body_Dribble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPoint       *RpcVector2D `protobuf:"bytes,1,opt,name=target_point,json=targetPoint,proto3" json:"target_point,omitempty"`
	DistanceThreshold float32      `protobuf:"fixed32,2,opt,name=distance_threshold,json=distanceThreshold,proto3" json:"distance_threshold,omitempty"`
	DashPower         float32      `protobuf:"fixed32,3,opt,name=dash_power,json=dashPower,proto3" json:"dash_power,omitempty"`
	DashCount         int32        `protobuf:"varint,4,opt,name=dash_count,json=dashCount,proto3" json:"dash_count,omitempty"`
	Dodge             bool         `protobuf:"varint,5,opt,name=dodge,proto3" json:"dodge,omitempty"`
}

func (x *Body_Dribble) Reset() {
	*x = Body_Dribble{}
	mi := &file_service_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Body_Dribble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Body_Dribble) ProtoMessage() {}

func (x *Body_Dribble) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Body_Dribble.ProtoReflect.Descriptor instead.
func (*Body_Dribble) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{70}
}

func (x *Body_Dribble) GetTargetPoint() *RpcVector2D {
	if x != nil {
		return x.TargetPoint
	}
	return nil
}

func (x *Body_Dribble) GetDistanceThreshold() float32 {
	if x != nil {
		return x.DistanceThreshold
	}
	return 0
}

func (x *Body_Dribble) GetDashPower() float32 {
	if x != nil {
		return x.DashPower
	}
	return 0
}

func (x *Body_Dribble) GetDashCount() int32 {
	if x != nil {
		return x.DashCount
	}
	return 0
}

func (x *Body_Dribble) GetDodge() bool {
	if x != nil {
		return x.Dodge
	}
	return false
}

type Body_GoToPointDodge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPoint *RpcVector2D `protobuf:"bytes,1,opt,name=target_point,json=targetPoint,proto3" json:"target_point,omitempty"`
	DashPower   float32      `protobuf:"fixed32,2,opt,name=dash_power,json=dashPower,proto3" json:"dash_power,omitempty"`
}

func (x *Body_GoToPointDodge) Reset() {
	*x = Body_GoToPointDodge{}
	mi := &file_service_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Body_GoToPointDodge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Body_GoToPointDodge) ProtoMessage() {}

func (x *Body_GoToPointDodge) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Body_GoToPointDodge.ProtoReflect.Descriptor instead.
func (*Body_GoToPointDodge) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{71}
}

func (x *Body_GoToPointDodge) GetTargetPoint() *RpcVector2D {
	if x != nil {
		return x.TargetPoint
	}
	return nil
}

func (x *Body_GoToPointDodge) GetDashPower() float32 {
	if x != nil {
		return x.DashPower
	}
	return 0
}

type Body_HoldBall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoTurn          bool         `protobuf:"varint,1,opt,name=do_turn,json=doTurn,proto3" json:"do_turn,omitempty"`
	TurnTargetPoint *RpcVector2D `protobuf:"bytes,2,opt,name=turn_target_point,json=turnTargetPoint,proto3" json:"turn_target_point,omitempty"`
	KickTargetPoint *RpcVector2D `protobuf:"bytes,3,opt,name=kick_target_point,json=kickTargetPoint,proto3" json:"kick_target_point,omitempty"`
}

func (x *Body_HoldBall) Reset() {
	*x = Body_HoldBall{}
	mi := &file_service_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Body_HoldBall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Body_HoldBall) ProtoMessage() {}

func (x *Body_HoldBall) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Body_HoldBall.ProtoReflect.Descriptor instead.
func (*Body_HoldBall) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{72}
}

func (x *Body_HoldBall) GetDoTurn() bool {
	if x != nil {
		return x.DoTurn
	}
	return false
}

func (x *Body_HoldBall) GetTurnTargetPoint() *RpcVector2D {
	if x != nil {
		return x.TurnTargetPoint
	}
	return nil
}

func (x *Body_HoldBall) GetKickTargetPoint() *RpcVector2D {
	if x != nil {
		return x.KickTargetPoint
	}
	return nil
}

type Body_Intercept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaveRecovery bool         `protobuf:"varint,1,opt,name=save_recovery,json=saveRecovery,proto3" json:"save_recovery,omitempty"`
	FacePoint    *RpcVector2D `protobuf:"bytes,2,opt,name=face_point,json=facePoint,proto3" json:"face_point,omitempty"`
}

func (x *Body_Intercept) Reset() {
	*x = Body_Intercept{}
	mi := &file_service_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Body_Intercept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Body_Intercept) ProtoMessage() {}

func (x *Body_Intercept) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Body_Intercept.ProtoReflect.Descriptor instead.
func (*Body_Intercept) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{73}
}

func (x *Body_Intercept) GetSaveRecovery() bool {
	if x != nil {
		return x.SaveRecovery
	}
	return false
}

func (x *Body_Intercept) GetFacePoint() *RpcVector2D {
	if x != nil {
		return x.FacePoint
	}
	return nil
}

type Body_KickOneStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPoint *RpcVector2D `protobuf:"bytes,1,opt,name=target_point,json=targetPoint,proto3" json:"target_point,omitempty"`
	FirstSpeed  float32      `protobuf:"fixed32,2,opt,name=first_speed,json=firstSpeed,proto3" json:"first_speed,omitempty"`
	ForceMode   bool         `protobuf:"varint,3,opt,name=force_mode,json=forceMode,proto3" json:"force_mode,omitempty"`
}

func (x *Body_KickOneStep) Reset() {
	*x = Body_KickOneStep{}
	mi := &file_service_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Body_KickOneStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Body_KickOneStep) ProtoMessage() {}

func (x *Body_KickOneStep) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Body_KickOneStep.ProtoReflect.Descriptor instead.
func (*Body_KickOneStep) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{74}
}

func (x *Body_KickOneStep) GetTargetPoint() *RpcVector2D {
	if x != nil {
		return x.TargetPoint
	}
	return nil
}

func (x *Body_KickOneStep) GetFirstSpeed() float32 {
	if x != nil {
		return x.FirstSpeed
	}
	return 0
}

func (x *Body_KickOneStep) GetForceMode() bool {
	if x != nil {
		return x.ForceMode
	}
	return false
}

type Body_StopBall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Body_StopBall) Reset() {
	*x = Body_StopBall{}
	mi := &file_service_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Body_StopBall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Body_StopBall) ProtoMessage() {}

func (x *Body_StopBall) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Body_StopBall.ProtoReflect.Descriptor instead.
func (*Body_StopBall) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{75}
}

type Body_StopDash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaveRecovery bool `protobuf:"varint,1,opt,name=save_recovery,json=saveRecovery,proto3" json:"save_recovery,omitempty"`
}

func (x *Body_StopDash) Reset() {
	*x = Body_StopDash{}
	mi := &file_service_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Body_StopDash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Body_StopDash) ProtoMessage() {}

func (x *Body_StopDash) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Body_StopDash.ProtoReflect.Descriptor instead.
func (*Body_StopDash) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{76}
}

func (x *Body_StopDash) GetSaveRecovery() bool {
	if x != nil {
		return x.SaveRecovery
	}
	return false
}

type Body_TackleToPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPoint    *RpcVector2D `protobuf:"bytes,1,opt,name=target_point,json=targetPoint,proto3" json:"target_point,omitempty"`
	MinProbability float32      `protobuf:"fixed32,2,opt,name=min_probability,json=minProbability,proto3" json:"min_probability,omitempty"`
	MinSpeed       float32      `protobuf:"fixed32,3,opt,name=min_speed,json=minSpeed,proto3" json:"min_speed,omitempty"`
}

func (x *Body_TackleToPoint) Reset() {
	*x = Body_TackleToPoint{}
	mi := &file_service_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Body_TackleToPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Body_TackleToPoint) ProtoMessage() {}

func (x *Body_TackleToPoint) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Body_TackleToPoint.ProtoReflect.Descriptor instead.
func (*Body_TackleToPoint) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{77}
}

func (x *Body_TackleToPoint) GetTargetPoint() *RpcVector2D {
	if x != nil {
		return x.TargetPoint
	}
	return nil
}

func (x *Body_TackleToPoint) GetMinProbability() float32 {
	if x != nil {
		return x.MinProbability
	}
	return 0
}

func (x *Body_TackleToPoint) GetMinSpeed() float32 {
	if x != nil {
		return x.MinSpeed
	}
	return 0
}

type Body_TurnToAngle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Angle float32 `protobuf:"fixed32,1,opt,name=angle,proto3" json:"angle,omitempty"`
}

func (x *Body_TurnToAngle) Reset() {
	*x = Body_TurnToAngle{}
	mi := &file_service_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Body_TurnToAngle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Body_TurnToAngle) ProtoMessage() {}

func (x *Body_TurnToAngle) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Body_TurnToAngle.ProtoReflect.Descriptor instead.
func (*Body_TurnToAngle) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{78}
}

func (x *Body_TurnToAngle) GetAngle() float32 {
	if x != nil {
		return x.Angle
	}
	return 0
}

type Body_TurnToBall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cycle int32 `protobuf:"varint,1,opt,name=cycle,proto3" json:"cycle,omitempty"`
}

func (x *Body_TurnToBall) Reset() {
	*x = Body_TurnToBall{}
	mi := &file_service_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Body_TurnToBall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Body_TurnToBall) ProtoMessage() {}

func (x *Body_TurnToBall) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Body_TurnToBall.ProtoReflect.Descriptor instead.
func (*Body_TurnToBall) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{79}
}

func (x *Body_TurnToBall) GetCycle() int32 {
	if x != nil {
		return x.Cycle
	}
	return 0
}

type Body_TurnToPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPoint *RpcVector2D `protobuf:"bytes,1,opt,name=target_point,json=targetPoint,proto3" json:"target_point,omitempty"`
	Cycle       int32        `protobuf:"varint,2,opt,name=cycle,proto3" json:"cycle,omitempty"`
}

func (x *Body_TurnToPoint) Reset() {
	*x = Body_TurnToPoint{}
	mi := &file_service_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Body_TurnToPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Body_TurnToPoint) ProtoMessage() {}

func (x *Body_TurnToPoint) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Body_TurnToPoint.ProtoReflect.Descriptor instead.
func (*Body_TurnToPoint) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{80}
}

func (x *Body_TurnToPoint) GetTargetPoint() *RpcVector2D {
	if x != nil {
		return x.TargetPoint
	}
	return nil
}

func (x *Body_TurnToPoint) GetCycle() int32 {
	if x != nil {
		return x.Cycle
	}
	return 0
}

type Focus_MoveToPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPoint *RpcVector2D `protobuf:"bytes,1,opt,name=target_point,json=targetPoint,proto3" json:"target_point,omitempty"`
}

func (x *Focus_MoveToPoint) Reset() {
	*x = Focus_MoveToPoint{}
	mi := &file_service_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Focus_MoveToPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Focus_MoveToPoint) ProtoMessage() {}

func (x *Focus_MoveToPoint) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Focus_MoveToPoint.ProtoReflect.Descriptor instead.
func (*Focus_MoveToPoint) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{81}
}

func (x *Focus_MoveToPoint) GetTargetPoint() *RpcVector2D {
	if x != nil {
		return x.TargetPoint
	}
	return nil
}

type Focus_Reset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Focus_Reset) Reset() {
	*x = Focus_Reset{}
	mi := &file_service_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Focus_Reset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Focus_Reset) ProtoMessage() {}

func (x *Focus_Reset) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Focus_Reset.ProtoReflect.Descriptor instead.
func (*Focus_Reset) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{82}
}

type Neck_ScanField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Neck_ScanField) Reset() {
	*x = Neck_ScanField{}
	mi := &file_service_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Neck_ScanField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Neck_ScanField) ProtoMessage() {}

func (x *Neck_ScanField) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Neck_ScanField.ProtoReflect.Descriptor instead.
func (*Neck_ScanField) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{83}
}

type Neck_ScanPlayers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Neck_ScanPlayers) Reset() {
	*x = Neck_ScanPlayers{}
	mi := &file_service_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Neck_ScanPlayers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Neck_ScanPlayers) ProtoMessage() {}

func (x *Neck_ScanPlayers) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Neck_ScanPlayers.ProtoReflect.Descriptor instead.
func (*Neck_ScanPlayers) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{84}
}

type Neck_TurnToBallAndPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Side           Side  `protobuf:"varint,1,opt,name=side,proto3,enum=protos.Side" json:"side,omitempty"`
	UniformNumber  int32 `protobuf:"varint,2,opt,name=uniform_number,json=uniformNumber,proto3" json:"uniform_number,omitempty"`
	CountThreshold int32 `protobuf:"varint,3,opt,name=count_threshold,json=countThreshold,proto3" json:"count_threshold,omitempty"`
}

func (x *Neck_TurnToBallAndPlayer) Reset() {
	*x = Neck_TurnToBallAndPlayer{}
	mi := &file_service_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Neck_TurnToBallAndPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Neck_TurnToBallAndPlayer) ProtoMessage() {}

func (x *Neck_TurnToBallAndPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Neck_TurnToBallAndPlayer.ProtoReflect.Descriptor instead.
func (*Neck_TurnToBallAndPlayer) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{85}
}

func (x *Neck_TurnToBallAndPlayer) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_UNKNOWN
}

func (x *Neck_TurnToBallAndPlayer) GetUniformNumber() int32 {
	if x != nil {
		return x.UniformNumber
	}
	return 0
}

func (x *Neck_TurnToBallAndPlayer) GetCountThreshold() int32 {
	if x != nil {
		return x.CountThreshold
	}
	return 0
}

type Neck_TurnToBallOrScan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountThreshold int32 `protobuf:"varint,1,opt,name=count_threshold,json=countThreshold,proto3" json:"count_threshold,omitempty"`
}

func (x *Neck_TurnToBallOrScan) Reset() {
	*x = Neck_TurnToBallOrScan{}
	mi := &file_service_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Neck_TurnToBallOrScan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Neck_TurnToBallOrScan) ProtoMessage() {}

func (x *Neck_TurnToBallOrScan) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Neck_TurnToBallOrScan.ProtoReflect.Descriptor instead.
func (*Neck_TurnToBallOrScan) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{86}
}

func (x *Neck_TurnToBallOrScan) GetCountThreshold() int32 {
	if x != nil {
		return x.CountThreshold
	}
	return 0
}

type Neck_TurnToBall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Neck_TurnToBall) Reset() {
	*x = Neck_TurnToBall{}
	mi := &file_service_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Neck_TurnToBall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Neck_TurnToBall) ProtoMessage() {}

func (x *Neck_TurnToBall) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Neck_TurnToBall.ProtoReflect.Descriptor instead.
func (*Neck_TurnToBall) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{87}
}

type Neck_TurnToGoalieOrScan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountThreshold int32 `protobuf:"varint,1,opt,name=count_threshold,json=countThreshold,proto3" json:"count_threshold,omitempty"`
}

func (x *Neck_TurnToGoalieOrScan) Reset() {
	*x = Neck_TurnToGoalieOrScan{}
	mi := &file_service_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Neck_TurnToGoalieOrScan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Neck_TurnToGoalieOrScan) ProtoMessage() {}

func (x *Neck_TurnToGoalieOrScan) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Neck_TurnToGoalieOrScan.ProtoReflect.Descriptor instead.
func (*Neck_TurnToGoalieOrScan) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{88}
}

func (x *Neck_TurnToGoalieOrScan) GetCountThreshold() int32 {
	if x != nil {
		return x.CountThreshold
	}
	return 0
}

type Neck_TurnToLowConfTeammate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Neck_TurnToLowConfTeammate) Reset() {
	*x = Neck_TurnToLowConfTeammate{}
	mi := &file_service_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Neck_TurnToLowConfTeammate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Neck_TurnToLowConfTeammate) ProtoMessage() {}

func (x *Neck_TurnToLowConfTeammate) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Neck_TurnToLowConfTeammate.ProtoReflect.Descriptor instead.
func (*Neck_TurnToLowConfTeammate) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{89}
}

type Neck_TurnToPlayerOrScan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Side           Side  `protobuf:"varint,1,opt,name=side,proto3,enum=protos.Side" json:"side,omitempty"`
	UniformNumber  int32 `protobuf:"varint,2,opt,name=uniform_number,json=uniformNumber,proto3" json:"uniform_number,omitempty"`
	CountThreshold int32 `protobuf:"varint,3,opt,name=count_threshold,json=countThreshold,proto3" json:"count_threshold,omitempty"`
}

func (x *Neck_TurnToPlayerOrScan) Reset() {
	*x = Neck_TurnToPlayerOrScan{}
	mi := &file_service_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Neck_TurnToPlayerOrScan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Neck_TurnToPlayerOrScan) ProtoMessage() {}

func (x *Neck_TurnToPlayerOrScan) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Neck_TurnToPlayerOrScan.ProtoReflect.Descriptor instead.
func (*Neck_TurnToPlayerOrScan) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{90}
}

func (x *Neck_TurnToPlayerOrScan) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_UNKNOWN
}

func (x *Neck_TurnToPlayerOrScan) GetUniformNumber() int32 {
	if x != nil {
		return x.UniformNumber
	}
	return 0
}

func (x *Neck_TurnToPlayerOrScan) GetCountThreshold() int32 {
	if x != nil {
		return x.CountThreshold
	}
	return 0
}

type Neck_TurnToPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPoint *RpcVector2D `protobuf:"bytes,1,opt,name=target_point,json=targetPoint,proto3" json:"target_point,omitempty"`
}

func (x *Neck_TurnToPoint) Reset() {
	*x = Neck_TurnToPoint{}
	mi := &file_service_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Neck_TurnToPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Neck_TurnToPoint) ProtoMessage() {}

func (x *Neck_TurnToPoint) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Neck_TurnToPoint.ProtoReflect.Descriptor instead.
func (*Neck_TurnToPoint) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{91}
}

func (x *Neck_TurnToPoint) GetTargetPoint() *RpcVector2D {
	if x != nil {
		return x.TargetPoint
	}
	return nil
}

type Neck_TurnToRelative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Angle float32 `protobuf:"fixed32,1,opt,name=angle,proto3" json:"angle,omitempty"`
}

func (x *Neck_TurnToRelative) Reset() {
	*x = Neck_TurnToRelative{}
	mi := &file_service_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Neck_TurnToRelative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Neck_TurnToRelative) ProtoMessage() {}

func (x *Neck_TurnToRelative) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Neck_TurnToRelative.ProtoReflect.Descriptor instead.
func (*Neck_TurnToRelative) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{92}
}

func (x *Neck_TurnToRelative) GetAngle() float32 {
	if x != nil {
		return x.Angle
	}
	return 0
}

type View_ChangeWidth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewWidth ViewWidth `protobuf:"varint,1,opt,name=view_width,json=viewWidth,proto3,enum=protos.ViewWidth" json:"view_width,omitempty"`
}

func (x *View_ChangeWidth) Reset() {
	*x = View_ChangeWidth{}
	mi := &file_service_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *View_ChangeWidth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*View_ChangeWidth) ProtoMessage() {}

func (x *View_ChangeWidth) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use View_ChangeWidth.ProtoReflect.Descriptor instead.
func (*View_ChangeWidth) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{93}
}

func (x *View_ChangeWidth) GetViewWidth() ViewWidth {
	if x != nil {
		return x.ViewWidth
	}
	return ViewWidth_NARROW
}

type View_Normal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *View_Normal) Reset() {
	*x = View_Normal{}
	mi := &file_service_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *View_Normal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*View_Normal) ProtoMessage() {}

func (x *View_Normal) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use View_Normal.ProtoReflect.Descriptor instead.
func (*View_Normal) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{94}
}

type View_Synch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *View_Synch) Reset() {
	*x = View_Synch{}
	mi := &file_service_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *View_Synch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*View_Synch) ProtoMessage() {}

func (x *View_Synch) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use View_Synch.ProtoReflect.Descriptor instead.
func (*View_Synch) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{95}
}

type View_Wide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *View_Wide) Reset() {
	*x = View_Wide{}
	mi := &file_service_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *View_Wide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*View_Wide) ProtoMessage() {}

func (x *View_Wide) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use View_Wide.ProtoReflect.Descriptor instead.
func (*View_Wide) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{96}
}

type HeliosGoalie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeliosGoalie) Reset() {
	*x = HeliosGoalie{}
	mi := &file_service_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeliosGoalie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeliosGoalie) ProtoMessage() {}

func (x *HeliosGoalie) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeliosGoalie.ProtoReflect.Descriptor instead.
func (*HeliosGoalie) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{97}
}

type HeliosGoalieMove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeliosGoalieMove) Reset() {
	*x = HeliosGoalieMove{}
	mi := &file_service_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeliosGoalieMove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeliosGoalieMove) ProtoMessage() {}

func (x *HeliosGoalieMove) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeliosGoalieMove.ProtoReflect.Descriptor instead.
func (*HeliosGoalieMove) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{98}
}

type HeliosGoalieKick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeliosGoalieKick) Reset() {
	*x = HeliosGoalieKick{}
	mi := &file_service_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeliosGoalieKick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeliosGoalieKick) ProtoMessage() {}

func (x *HeliosGoalieKick) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeliosGoalieKick.ProtoReflect.Descriptor instead.
func (*HeliosGoalieKick) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{99}
}

type HeliosShoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeliosShoot) Reset() {
	*x = HeliosShoot{}
	mi := &file_service_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeliosShoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeliosShoot) ProtoMessage() {}

func (x *HeliosShoot) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeliosShoot.ProtoReflect.Descriptor instead.
func (*HeliosShoot) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{100}
}

type HeliosOffensivePlanner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirectPass         bool `protobuf:"varint,1,opt,name=direct_pass,json=directPass,proto3" json:"direct_pass,omitempty"`
	LeadPass           bool `protobuf:"varint,2,opt,name=lead_pass,json=leadPass,proto3" json:"lead_pass,omitempty"`
	ThroughPass        bool `protobuf:"varint,3,opt,name=through_pass,json=throughPass,proto3" json:"through_pass,omitempty"`
	ShortDribble       bool `protobuf:"varint,4,opt,name=short_dribble,json=shortDribble,proto3" json:"short_dribble,omitempty"`
	LongDribble        bool `protobuf:"varint,5,opt,name=long_dribble,json=longDribble,proto3" json:"long_dribble,omitempty"`
	Cross              bool `protobuf:"varint,6,opt,name=cross,proto3" json:"cross,omitempty"`
	SimplePass         bool `protobuf:"varint,7,opt,name=simple_pass,json=simplePass,proto3" json:"simple_pass,omitempty"`
	SimpleDribble      bool `protobuf:"varint,8,opt,name=simple_dribble,json=simpleDribble,proto3" json:"simple_dribble,omitempty"`
	SimpleShoot        bool `protobuf:"varint,9,opt,name=simple_shoot,json=simpleShoot,proto3" json:"simple_shoot,omitempty"`
	ServerSideDecision bool `protobuf:"varint,10,opt,name=server_side_decision,json=serverSideDecision,proto3" json:"server_side_decision,omitempty"`
}

func (x *HeliosOffensivePlanner) Reset() {
	*x = HeliosOffensivePlanner{}
	mi := &file_service_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeliosOffensivePlanner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeliosOffensivePlanner) ProtoMessage() {}

func (x *HeliosOffensivePlanner) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeliosOffensivePlanner.ProtoReflect.Descriptor instead.
func (*HeliosOffensivePlanner) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{101}
}

func (x *HeliosOffensivePlanner) GetDirectPass() bool {
	if x != nil {
		return x.DirectPass
	}
	return false
}

func (x *HeliosOffensivePlanner) GetLeadPass() bool {
	if x != nil {
		return x.LeadPass
	}
	return false
}

func (x *HeliosOffensivePlanner) GetThroughPass() bool {
	if x != nil {
		return x.ThroughPass
	}
	return false
}

func (x *HeliosOffensivePlanner) GetShortDribble() bool {
	if x != nil {
		return x.ShortDribble
	}
	return false
}

func (x *HeliosOffensivePlanner) GetLongDribble() bool {
	if x != nil {
		return x.LongDribble
	}
	return false
}

func (x *HeliosOffensivePlanner) GetCross() bool {
	if x != nil {
		return x.Cross
	}
	return false
}

func (x *HeliosOffensivePlanner) GetSimplePass() bool {
	if x != nil {
		return x.SimplePass
	}
	return false
}

func (x *HeliosOffensivePlanner) GetSimpleDribble() bool {
	if x != nil {
		return x.SimpleDribble
	}
	return false
}

func (x *HeliosOffensivePlanner) GetSimpleShoot() bool {
	if x != nil {
		return x.SimpleShoot
	}
	return false
}

func (x *HeliosOffensivePlanner) GetServerSideDecision() bool {
	if x != nil {
		return x.ServerSideDecision
	}
	return false
}

type HeliosBasicOffensive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeliosBasicOffensive) Reset() {
	*x = HeliosBasicOffensive{}
	mi := &file_service_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeliosBasicOffensive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeliosBasicOffensive) ProtoMessage() {}

func (x *HeliosBasicOffensive) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeliosBasicOffensive.ProtoReflect.Descriptor instead.
func (*HeliosBasicOffensive) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{102}
}

type HeliosBasicMove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeliosBasicMove) Reset() {
	*x = HeliosBasicMove{}
	mi := &file_service_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeliosBasicMove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeliosBasicMove) ProtoMessage() {}

func (x *HeliosBasicMove) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeliosBasicMove.ProtoReflect.Descriptor instead.
func (*HeliosBasicMove) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{103}
}

type HeliosSetPlay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeliosSetPlay) Reset() {
	*x = HeliosSetPlay{}
	mi := &file_service_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeliosSetPlay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeliosSetPlay) ProtoMessage() {}

func (x *HeliosSetPlay) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeliosSetPlay.ProtoReflect.Descriptor instead.
func (*HeliosSetPlay) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{104}
}

type HeliosPenalty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeliosPenalty) Reset() {
	*x = HeliosPenalty{}
	mi := &file_service_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeliosPenalty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeliosPenalty) ProtoMessage() {}

func (x *HeliosPenalty) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeliosPenalty.ProtoReflect.Descriptor instead.
func (*HeliosPenalty) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{105}
}

type HeliosCommunicaion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeliosCommunicaion) Reset() {
	*x = HeliosCommunicaion{}
	mi := &file_service_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeliosCommunicaion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeliosCommunicaion) ProtoMessage() {}

func (x *HeliosCommunicaion) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeliosCommunicaion.ProtoReflect.Descriptor instead.
func (*HeliosCommunicaion) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{106}
}

type BhvDoForceKick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BhvDoForceKick) Reset() {
	*x = BhvDoForceKick{}
	mi := &file_service_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BhvDoForceKick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BhvDoForceKick) ProtoMessage() {}

func (x *BhvDoForceKick) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BhvDoForceKick.ProtoReflect.Descriptor instead.
func (*BhvDoForceKick) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{107}
}

type BhvDoHeardPassRecieve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BhvDoHeardPassRecieve) Reset() {
	*x = BhvDoHeardPassRecieve{}
	mi := &file_service_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BhvDoHeardPassRecieve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BhvDoHeardPassRecieve) ProtoMessage() {}

func (x *BhvDoHeardPassRecieve) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BhvDoHeardPassRecieve.ProtoReflect.Descriptor instead.
func (*BhvDoHeardPassRecieve) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{108}
}

type PlayerAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//
	//	*PlayerAction_Dash
	//	*PlayerAction_Turn
	//	*PlayerAction_Kick
	//	*PlayerAction_Tackle
	//	*PlayerAction_Catch
	//	*PlayerAction_Move
	//	*PlayerAction_TurnNeck
	//	*PlayerAction_ChangeView
	//	*PlayerAction_Say
	//	*PlayerAction_PointTo
	//	*PlayerAction_PointToOf
	//	*PlayerAction_AttentionTo
	//	*PlayerAction_AttentionToOf
	//	*PlayerAction_Log
	//	*PlayerAction_DebugClient
	//	*PlayerAction_BodyGoToPoint
	//	*PlayerAction_BodySmartKick
	//	*PlayerAction_BhvBeforeKickOff
	//	*PlayerAction_BhvBodyNeckToBall
	//	*PlayerAction_BhvBodyNeckToPoint
	//	*PlayerAction_BhvEmergency
	//	*PlayerAction_BhvGoToPointLookBall
	//	*PlayerAction_BhvNeckBodyToBall
	//	*PlayerAction_BhvNeckBodyToPoint
	//	*PlayerAction_BhvScanField
	//	*PlayerAction_BodyAdvanceBall
	//	*PlayerAction_BodyClearBall
	//	*PlayerAction_BodyDribble
	//	*PlayerAction_BodyGoToPointDodge
	//	*PlayerAction_BodyHoldBall
	//	*PlayerAction_BodyIntercept
	//	*PlayerAction_BodyKickOneStep
	//	*PlayerAction_BodyStopBall
	//	*PlayerAction_BodyStopDash
	//	*PlayerAction_BodyTackleToPoint
	//	*PlayerAction_BodyTurnToAngle
	//	*PlayerAction_BodyTurnToBall
	//	*PlayerAction_BodyTurnToPoint
	//	*PlayerAction_FocusMoveToPoint
	//	*PlayerAction_FocusReset
	//	*PlayerAction_NeckScanField
	//	*PlayerAction_NeckScanPlayers
	//	*PlayerAction_NeckTurnToBallAndPlayer
	//	*PlayerAction_NeckTurnToBallOrScan
	//	*PlayerAction_NeckTurnToBall
	//	*PlayerAction_NeckTurnToGoalieOrScan
	//	*PlayerAction_NeckTurnToLowConfTeammate
	//	*PlayerAction_NeckTurnToPlayerOrScan
	//	*PlayerAction_NeckTurnToPoint
	//	*PlayerAction_NeckTurnToRelative
	//	*PlayerAction_ViewChangeWidth
	//	*PlayerAction_ViewNormal
	//	*PlayerAction_ViewSynch
	//	*PlayerAction_ViewWide
	//	*PlayerAction_HeliosGoalie
	//	*PlayerAction_HeliosGoalieMove
	//	*PlayerAction_HeliosGoalieKick
	//	*PlayerAction_HeliosShoot
	//	*PlayerAction_HeliosOffensivePlanner
	//	*PlayerAction_HeliosBasicOffensive
	//	*PlayerAction_HeliosBasicMove
	//	*PlayerAction_HeliosSetPlay
	//	*PlayerAction_HeliosPenalty
	//	*PlayerAction_HeliosCommunication
	//	*PlayerAction_BhvDoForceKick
	//	*PlayerAction_BhvDoHeardPassRecieve
	Action isPlayerAction_Action `protobuf_oneof:"action"`
}

func (x *PlayerAction) Reset() {
	*x = PlayerAction{}
	mi := &file_service_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerAction) ProtoMessage() {}

func (x *PlayerAction) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerAction.ProtoReflect.Descriptor instead.
func (*PlayerAction) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{109}
}

func (m *PlayerAction) GetAction() isPlayerAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *PlayerAction) GetDash() *Dash {
	if x, ok := x.GetAction().(*PlayerAction_Dash); ok {
		return x.Dash
	}
	return nil
}

func (x *PlayerAction) GetTurn() *Turn {
	if x, ok := x.GetAction().(*PlayerAction_Turn); ok {
		return x.Turn
	}
	return nil
}

func (x *PlayerAction) GetKick() *Kick {
	if x, ok := x.GetAction().(*PlayerAction_Kick); ok {
		return x.Kick
	}
	return nil
}

func (x *PlayerAction) GetTackle() *Tackle {
	if x, ok := x.GetAction().(*PlayerAction_Tackle); ok {
		return x.Tackle
	}
	return nil
}

func (x *PlayerAction) GetCatch() *Catch {
	if x, ok := x.GetAction().(*PlayerAction_Catch); ok {
		return x.Catch
	}
	return nil
}

func (x *PlayerAction) GetMove() *Move {
	if x, ok := x.GetAction().(*PlayerAction_Move); ok {
		return x.Move
	}
	return nil
}

func (x *PlayerAction) GetTurnNeck() *TurnNeck {
	if x, ok := x.GetAction().(*PlayerAction_TurnNeck); ok {
		return x.TurnNeck
	}
	return nil
}

func (x *PlayerAction) GetChangeView() *ChangeView {
	if x, ok := x.GetAction().(*PlayerAction_ChangeView); ok {
		return x.ChangeView
	}
	return nil
}

func (x *PlayerAction) GetSay() *Say {
	if x, ok := x.GetAction().(*PlayerAction_Say); ok {
		return x.Say
	}
	return nil
}

func (x *PlayerAction) GetPointTo() *PointTo {
	if x, ok := x.GetAction().(*PlayerAction_PointTo); ok {
		return x.PointTo
	}
	return nil
}

func (x *PlayerAction) GetPointToOf() *PointToOf {
	if x, ok := x.GetAction().(*PlayerAction_PointToOf); ok {
		return x.PointToOf
	}
	return nil
}

func (x *PlayerAction) GetAttentionTo() *AttentionTo {
	if x, ok := x.GetAction().(*PlayerAction_AttentionTo); ok {
		return x.AttentionTo
	}
	return nil
}

func (x *PlayerAction) GetAttentionToOf() *AttentionToOf {
	if x, ok := x.GetAction().(*PlayerAction_AttentionToOf); ok {
		return x.AttentionToOf
	}
	return nil
}

func (x *PlayerAction) GetLog() *Log {
	if x, ok := x.GetAction().(*PlayerAction_Log); ok {
		return x.Log
	}
	return nil
}

func (x *PlayerAction) GetDebugClient() *DebugClient {
	if x, ok := x.GetAction().(*PlayerAction_DebugClient); ok {
		return x.DebugClient
	}
	return nil
}

func (x *PlayerAction) GetBodyGoToPoint() *Body_GoToPoint {
	if x, ok := x.GetAction().(*PlayerAction_BodyGoToPoint); ok {
		return x.BodyGoToPoint
	}
	return nil
}

func (x *PlayerAction) GetBodySmartKick() *Body_SmartKick {
	if x, ok := x.GetAction().(*PlayerAction_BodySmartKick); ok {
		return x.BodySmartKick
	}
	return nil
}

func (x *PlayerAction) GetBhvBeforeKickOff() *Bhv_BeforeKickOff {
	if x, ok := x.GetAction().(*PlayerAction_BhvBeforeKickOff); ok {
		return x.BhvBeforeKickOff
	}
	return nil
}

func (x *PlayerAction) GetBhvBodyNeckToBall() *Bhv_BodyNeckToBall {
	if x, ok := x.GetAction().(*PlayerAction_BhvBodyNeckToBall); ok {
		return x.BhvBodyNeckToBall
	}
	return nil
}

func (x *PlayerAction) GetBhvBodyNeckToPoint() *Bhv_BodyNeckToPoint {
	if x, ok := x.GetAction().(*PlayerAction_BhvBodyNeckToPoint); ok {
		return x.BhvBodyNeckToPoint
	}
	return nil
}

func (x *PlayerAction) GetBhvEmergency() *Bhv_Emergency {
	if x, ok := x.GetAction().(*PlayerAction_BhvEmergency); ok {
		return x.BhvEmergency
	}
	return nil
}

func (x *PlayerAction) GetBhvGoToPointLookBall() *Bhv_GoToPointLookBall {
	if x, ok := x.GetAction().(*PlayerAction_BhvGoToPointLookBall); ok {
		return x.BhvGoToPointLookBall
	}
	return nil
}

func (x *PlayerAction) GetBhvNeckBodyToBall() *Bhv_NeckBodyToBall {
	if x, ok := x.GetAction().(*PlayerAction_BhvNeckBodyToBall); ok {
		return x.BhvNeckBodyToBall
	}
	return nil
}

func (x *PlayerAction) GetBhvNeckBodyToPoint() *Bhv_NeckBodyToPoint {
	if x, ok := x.GetAction().(*PlayerAction_BhvNeckBodyToPoint); ok {
		return x.BhvNeckBodyToPoint
	}
	return nil
}

func (x *PlayerAction) GetBhvScanField() *Bhv_ScanField {
	if x, ok := x.GetAction().(*PlayerAction_BhvScanField); ok {
		return x.BhvScanField
	}
	return nil
}

func (x *PlayerAction) GetBodyAdvanceBall() *Body_AdvanceBall {
	if x, ok := x.GetAction().(*PlayerAction_BodyAdvanceBall); ok {
		return x.BodyAdvanceBall
	}
	return nil
}

func (x *PlayerAction) GetBodyClearBall() *Body_ClearBall {
	if x, ok := x.GetAction().(*PlayerAction_BodyClearBall); ok {
		return x.BodyClearBall
	}
	return nil
}

func (x *PlayerAction) GetBodyDribble() *Body_Dribble {
	if x, ok := x.GetAction().(*PlayerAction_BodyDribble); ok {
		return x.BodyDribble
	}
	return nil
}

func (x *PlayerAction) GetBodyGoToPointDodge() *Body_GoToPointDodge {
	if x, ok := x.GetAction().(*PlayerAction_BodyGoToPointDodge); ok {
		return x.BodyGoToPointDodge
	}
	return nil
}

func (x *PlayerAction) GetBodyHoldBall() *Body_HoldBall {
	if x, ok := x.GetAction().(*PlayerAction_BodyHoldBall); ok {
		return x.BodyHoldBall
	}
	return nil
}

func (x *PlayerAction) GetBodyIntercept() *Body_Intercept {
	if x, ok := x.GetAction().(*PlayerAction_BodyIntercept); ok {
		return x.BodyIntercept
	}
	return nil
}

func (x *PlayerAction) GetBodyKickOneStep() *Body_KickOneStep {
	if x, ok := x.GetAction().(*PlayerAction_BodyKickOneStep); ok {
		return x.BodyKickOneStep
	}
	return nil
}

func (x *PlayerAction) GetBodyStopBall() *Body_StopBall {
	if x, ok := x.GetAction().(*PlayerAction_BodyStopBall); ok {
		return x.BodyStopBall
	}
	return nil
}

func (x *PlayerAction) GetBodyStopDash() *Body_StopDash {
	if x, ok := x.GetAction().(*PlayerAction_BodyStopDash); ok {
		return x.BodyStopDash
	}
	return nil
}

func (x *PlayerAction) GetBodyTackleToPoint() *Body_TackleToPoint {
	if x, ok := x.GetAction().(*PlayerAction_BodyTackleToPoint); ok {
		return x.BodyTackleToPoint
	}
	return nil
}

func (x *PlayerAction) GetBodyTurnToAngle() *Body_TurnToAngle {
	if x, ok := x.GetAction().(*PlayerAction_BodyTurnToAngle); ok {
		return x.BodyTurnToAngle
	}
	return nil
}

func (x *PlayerAction) GetBodyTurnToBall() *Body_TurnToBall {
	if x, ok := x.GetAction().(*PlayerAction_BodyTurnToBall); ok {
		return x.BodyTurnToBall
	}
	return nil
}

func (x *PlayerAction) GetBodyTurnToPoint() *Body_TurnToPoint {
	if x, ok := x.GetAction().(*PlayerAction_BodyTurnToPoint); ok {
		return x.BodyTurnToPoint
	}
	return nil
}

func (x *PlayerAction) GetFocusMoveToPoint() *Focus_MoveToPoint {
	if x, ok := x.GetAction().(*PlayerAction_FocusMoveToPoint); ok {
		return x.FocusMoveToPoint
	}
	return nil
}

func (x *PlayerAction) GetFocusReset() *Focus_Reset {
	if x, ok := x.GetAction().(*PlayerAction_FocusReset); ok {
		return x.FocusReset
	}
	return nil
}

func (x *PlayerAction) GetNeckScanField() *Neck_ScanField {
	if x, ok := x.GetAction().(*PlayerAction_NeckScanField); ok {
		return x.NeckScanField
	}
	return nil
}

func (x *PlayerAction) GetNeckScanPlayers() *Neck_ScanPlayers {
	if x, ok := x.GetAction().(*PlayerAction_NeckScanPlayers); ok {
		return x.NeckScanPlayers
	}
	return nil
}

func (x *PlayerAction) GetNeckTurnToBallAndPlayer() *Neck_TurnToBallAndPlayer {
	if x, ok := x.GetAction().(*PlayerAction_NeckTurnToBallAndPlayer); ok {
		return x.NeckTurnToBallAndPlayer
	}
	return nil
}

func (x *PlayerAction) GetNeckTurnToBallOrScan() *Neck_TurnToBallOrScan {
	if x, ok := x.GetAction().(*PlayerAction_NeckTurnToBallOrScan); ok {
		return x.NeckTurnToBallOrScan
	}
	return nil
}

func (x *PlayerAction) GetNeckTurnToBall() *Neck_TurnToBall {
	if x, ok := x.GetAction().(*PlayerAction_NeckTurnToBall); ok {
		return x.NeckTurnToBall
	}
	return nil
}

func (x *PlayerAction) GetNeckTurnToGoalieOrScan() *Neck_TurnToGoalieOrScan {
	if x, ok := x.GetAction().(*PlayerAction_NeckTurnToGoalieOrScan); ok {
		return x.NeckTurnToGoalieOrScan
	}
	return nil
}

func (x *PlayerAction) GetNeckTurnToLowConfTeammate() *Neck_TurnToLowConfTeammate {
	if x, ok := x.GetAction().(*PlayerAction_NeckTurnToLowConfTeammate); ok {
		return x.NeckTurnToLowConfTeammate
	}
	return nil
}

func (x *PlayerAction) GetNeckTurnToPlayerOrScan() *Neck_TurnToPlayerOrScan {
	if x, ok := x.GetAction().(*PlayerAction_NeckTurnToPlayerOrScan); ok {
		return x.NeckTurnToPlayerOrScan
	}
	return nil
}

func (x *PlayerAction) GetNeckTurnToPoint() *Neck_TurnToPoint {
	if x, ok := x.GetAction().(*PlayerAction_NeckTurnToPoint); ok {
		return x.NeckTurnToPoint
	}
	return nil
}

func (x *PlayerAction) GetNeckTurnToRelative() *Neck_TurnToRelative {
	if x, ok := x.GetAction().(*PlayerAction_NeckTurnToRelative); ok {
		return x.NeckTurnToRelative
	}
	return nil
}

func (x *PlayerAction) GetViewChangeWidth() *View_ChangeWidth {
	if x, ok := x.GetAction().(*PlayerAction_ViewChangeWidth); ok {
		return x.ViewChangeWidth
	}
	return nil
}

func (x *PlayerAction) GetViewNormal() *View_Normal {
	if x, ok := x.GetAction().(*PlayerAction_ViewNormal); ok {
		return x.ViewNormal
	}
	return nil
}

func (x *PlayerAction) GetViewSynch() *View_Synch {
	if x, ok := x.GetAction().(*PlayerAction_ViewSynch); ok {
		return x.ViewSynch
	}
	return nil
}

func (x *PlayerAction) GetViewWide() *View_Wide {
	if x, ok := x.GetAction().(*PlayerAction_ViewWide); ok {
		return x.ViewWide
	}
	return nil
}

func (x *PlayerAction) GetHeliosGoalie() *HeliosGoalie {
	if x, ok := x.GetAction().(*PlayerAction_HeliosGoalie); ok {
		return x.HeliosGoalie
	}
	return nil
}

func (x *PlayerAction) GetHeliosGoalieMove() *HeliosGoalieMove {
	if x, ok := x.GetAction().(*PlayerAction_HeliosGoalieMove); ok {
		return x.HeliosGoalieMove
	}
	return nil
}

func (x *PlayerAction) GetHeliosGoalieKick() *HeliosGoalieKick {
	if x, ok := x.GetAction().(*PlayerAction_HeliosGoalieKick); ok {
		return x.HeliosGoalieKick
	}
	return nil
}

func (x *PlayerAction) GetHeliosShoot() *HeliosShoot {
	if x, ok := x.GetAction().(*PlayerAction_HeliosShoot); ok {
		return x.HeliosShoot
	}
	return nil
}

func (x *PlayerAction) GetHeliosOffensivePlanner() *HeliosOffensivePlanner {
	if x, ok := x.GetAction().(*PlayerAction_HeliosOffensivePlanner); ok {
		return x.HeliosOffensivePlanner
	}
	return nil
}

func (x *PlayerAction) GetHeliosBasicOffensive() *HeliosBasicOffensive {
	if x, ok := x.GetAction().(*PlayerAction_HeliosBasicOffensive); ok {
		return x.HeliosBasicOffensive
	}
	return nil
}

func (x *PlayerAction) GetHeliosBasicMove() *HeliosBasicMove {
	if x, ok := x.GetAction().(*PlayerAction_HeliosBasicMove); ok {
		return x.HeliosBasicMove
	}
	return nil
}

func (x *PlayerAction) GetHeliosSetPlay() *HeliosSetPlay {
	if x, ok := x.GetAction().(*PlayerAction_HeliosSetPlay); ok {
		return x.HeliosSetPlay
	}
	return nil
}

func (x *PlayerAction) GetHeliosPenalty() *HeliosPenalty {
	if x, ok := x.GetAction().(*PlayerAction_HeliosPenalty); ok {
		return x.HeliosPenalty
	}
	return nil
}

func (x *PlayerAction) GetHeliosCommunication() *HeliosCommunicaion {
	if x, ok := x.GetAction().(*PlayerAction_HeliosCommunication); ok {
		return x.HeliosCommunication
	}
	return nil
}

func (x *PlayerAction) GetBhvDoForceKick() *BhvDoForceKick {
	if x, ok := x.GetAction().(*PlayerAction_BhvDoForceKick); ok {
		return x.BhvDoForceKick
	}
	return nil
}

func (x *PlayerAction) GetBhvDoHeardPassRecieve() *BhvDoHeardPassRecieve {
	if x, ok := x.GetAction().(*PlayerAction_BhvDoHeardPassRecieve); ok {
		return x.BhvDoHeardPassRecieve
	}
	return nil
}

type isPlayerAction_Action interface {
	isPlayerAction_Action()
}

type PlayerAction_Dash struct {
	Dash *Dash `protobuf:"bytes,1,opt,name=dash,proto3,oneof"`
}

type PlayerAction_Turn struct {
	Turn *Turn `protobuf:"bytes,2,opt,name=turn,proto3,oneof"`
}

type PlayerAction_Kick struct {
	Kick *Kick `protobuf:"bytes,3,opt,name=kick,proto3,oneof"`
}

type PlayerAction_Tackle struct {
	Tackle *Tackle `protobuf:"bytes,4,opt,name=tackle,proto3,oneof"`
}

type PlayerAction_Catch struct {
	Catch *Catch `protobuf:"bytes,5,opt,name=catch,proto3,oneof"`
}

type PlayerAction_Move struct {
	Move *Move `protobuf:"bytes,6,opt,name=move,proto3,oneof"`
}

type PlayerAction_TurnNeck struct {
	TurnNeck *TurnNeck `protobuf:"bytes,7,opt,name=turn_neck,json=turnNeck,proto3,oneof"`
}

type PlayerAction_ChangeView struct {
	ChangeView *ChangeView `protobuf:"bytes,8,opt,name=change_view,json=changeView,proto3,oneof"`
}

type PlayerAction_Say struct {
	Say *Say `protobuf:"bytes,9,opt,name=say,proto3,oneof"`
}

type PlayerAction_PointTo struct {
	PointTo *PointTo `protobuf:"bytes,10,opt,name=point_to,json=pointTo,proto3,oneof"`
}

type PlayerAction_PointToOf struct {
	PointToOf *PointToOf `protobuf:"bytes,11,opt,name=point_to_of,json=pointToOf,proto3,oneof"`
}

type PlayerAction_AttentionTo struct {
	AttentionTo *AttentionTo `protobuf:"bytes,12,opt,name=attention_to,json=attentionTo,proto3,oneof"`
}

type PlayerAction_AttentionToOf struct {
	AttentionToOf *AttentionToOf `protobuf:"bytes,13,opt,name=attention_to_of,json=attentionToOf,proto3,oneof"`
}

type PlayerAction_Log struct {
	Log *Log `protobuf:"bytes,14,opt,name=log,proto3,oneof"`
}

type PlayerAction_DebugClient struct {
	DebugClient *DebugClient `protobuf:"bytes,15,opt,name=debug_client,json=debugClient,proto3,oneof"`
}

type PlayerAction_BodyGoToPoint struct {
	BodyGoToPoint *Body_GoToPoint `protobuf:"bytes,16,opt,name=body_go_to_point,json=bodyGoToPoint,proto3,oneof"`
}

type PlayerAction_BodySmartKick struct {
	BodySmartKick *Body_SmartKick `protobuf:"bytes,17,opt,name=body_smart_kick,json=bodySmartKick,proto3,oneof"`
}

type PlayerAction_BhvBeforeKickOff struct {
	BhvBeforeKickOff *Bhv_BeforeKickOff `protobuf:"bytes,18,opt,name=bhv_before_kick_off,json=bhvBeforeKickOff,proto3,oneof"`
}

type PlayerAction_BhvBodyNeckToBall struct {
	BhvBodyNeckToBall *Bhv_BodyNeckToBall `protobuf:"bytes,19,opt,name=bhv_body_neck_to_ball,json=bhvBodyNeckToBall,proto3,oneof"`
}

type PlayerAction_BhvBodyNeckToPoint struct {
	BhvBodyNeckToPoint *Bhv_BodyNeckToPoint `protobuf:"bytes,20,opt,name=bhv_body_neck_to_point,json=bhvBodyNeckToPoint,proto3,oneof"`
}

type PlayerAction_BhvEmergency struct {
	BhvEmergency *Bhv_Emergency `protobuf:"bytes,21,opt,name=bhv_emergency,json=bhvEmergency,proto3,oneof"`
}

type PlayerAction_BhvGoToPointLookBall struct {
	BhvGoToPointLookBall *Bhv_GoToPointLookBall `protobuf:"bytes,22,opt,name=bhv_go_to_point_look_ball,json=bhvGoToPointLookBall,proto3,oneof"`
}

type PlayerAction_BhvNeckBodyToBall struct {
	BhvNeckBodyToBall *Bhv_NeckBodyToBall `protobuf:"bytes,23,opt,name=bhv_neck_body_to_ball,json=bhvNeckBodyToBall,proto3,oneof"`
}

type PlayerAction_BhvNeckBodyToPoint struct {
	BhvNeckBodyToPoint *Bhv_NeckBodyToPoint `protobuf:"bytes,24,opt,name=bhv_neck_body_to_point,json=bhvNeckBodyToPoint,proto3,oneof"`
}

type PlayerAction_BhvScanField struct {
	BhvScanField *Bhv_ScanField `protobuf:"bytes,25,opt,name=bhv_scan_field,json=bhvScanField,proto3,oneof"`
}

type PlayerAction_BodyAdvanceBall struct {
	BodyAdvanceBall *Body_AdvanceBall `protobuf:"bytes,26,opt,name=body_advance_ball,json=bodyAdvanceBall,proto3,oneof"`
}

type PlayerAction_BodyClearBall struct {
	BodyClearBall *Body_ClearBall `protobuf:"bytes,27,opt,name=body_clear_ball,json=bodyClearBall,proto3,oneof"`
}

type PlayerAction_BodyDribble struct {
	BodyDribble *Body_Dribble `protobuf:"bytes,28,opt,name=body_dribble,json=bodyDribble,proto3,oneof"`
}

type PlayerAction_BodyGoToPointDodge struct {
	BodyGoToPointDodge *Body_GoToPointDodge `protobuf:"bytes,29,opt,name=body_go_to_point_dodge,json=bodyGoToPointDodge,proto3,oneof"`
}

type PlayerAction_BodyHoldBall struct {
	BodyHoldBall *Body_HoldBall `protobuf:"bytes,30,opt,name=body_hold_ball,json=bodyHoldBall,proto3,oneof"`
}

type PlayerAction_BodyIntercept struct {
	BodyIntercept *Body_Intercept `protobuf:"bytes,31,opt,name=body_intercept,json=bodyIntercept,proto3,oneof"`
}

type PlayerAction_BodyKickOneStep struct {
	BodyKickOneStep *Body_KickOneStep `protobuf:"bytes,32,opt,name=body_kick_one_step,json=bodyKickOneStep,proto3,oneof"`
}

type PlayerAction_BodyStopBall struct {
	BodyStopBall *Body_StopBall `protobuf:"bytes,33,opt,name=body_stop_ball,json=bodyStopBall,proto3,oneof"`
}

type PlayerAction_BodyStopDash struct {
	BodyStopDash *Body_StopDash `protobuf:"bytes,34,opt,name=body_stop_dash,json=bodyStopDash,proto3,oneof"`
}

type PlayerAction_BodyTackleToPoint struct {
	BodyTackleToPoint *Body_TackleToPoint `protobuf:"bytes,35,opt,name=body_tackle_to_point,json=bodyTackleToPoint,proto3,oneof"`
}

type PlayerAction_BodyTurnToAngle struct {
	BodyTurnToAngle *Body_TurnToAngle `protobuf:"bytes,36,opt,name=body_turn_to_angle,json=bodyTurnToAngle,proto3,oneof"`
}

type PlayerAction_BodyTurnToBall struct {
	BodyTurnToBall *Body_TurnToBall `protobuf:"bytes,37,opt,name=body_turn_to_ball,json=bodyTurnToBall,proto3,oneof"`
}

type PlayerAction_BodyTurnToPoint struct {
	BodyTurnToPoint *Body_TurnToPoint `protobuf:"bytes,38,opt,name=body_turn_to_point,json=bodyTurnToPoint,proto3,oneof"`
}

type PlayerAction_FocusMoveToPoint struct {
	FocusMoveToPoint *Focus_MoveToPoint `protobuf:"bytes,39,opt,name=focus_move_to_point,json=focusMoveToPoint,proto3,oneof"`
}

type PlayerAction_FocusReset struct {
	FocusReset *Focus_Reset `protobuf:"bytes,40,opt,name=focus_reset,json=focusReset,proto3,oneof"`
}

type PlayerAction_NeckScanField struct {
	NeckScanField *Neck_ScanField `protobuf:"bytes,41,opt,name=neck_scan_field,json=neckScanField,proto3,oneof"`
}

type PlayerAction_NeckScanPlayers struct {
	NeckScanPlayers *Neck_ScanPlayers `protobuf:"bytes,42,opt,name=neck_scan_players,json=neckScanPlayers,proto3,oneof"`
}

type PlayerAction_NeckTurnToBallAndPlayer struct {
	NeckTurnToBallAndPlayer *Neck_TurnToBallAndPlayer `protobuf:"bytes,43,opt,name=neck_turn_to_ball_and_player,json=neckTurnToBallAndPlayer,proto3,oneof"`
}

type PlayerAction_NeckTurnToBallOrScan struct {
	NeckTurnToBallOrScan *Neck_TurnToBallOrScan `protobuf:"bytes,44,opt,name=neck_turn_to_ball_or_scan,json=neckTurnToBallOrScan,proto3,oneof"`
}

type PlayerAction_NeckTurnToBall struct {
	NeckTurnToBall *Neck_TurnToBall `protobuf:"bytes,45,opt,name=neck_turn_to_ball,json=neckTurnToBall,proto3,oneof"`
}

type PlayerAction_NeckTurnToGoalieOrScan struct {
	NeckTurnToGoalieOrScan *Neck_TurnToGoalieOrScan `protobuf:"bytes,46,opt,name=neck_turn_to_goalie_or_scan,json=neckTurnToGoalieOrScan,proto3,oneof"`
}

type PlayerAction_NeckTurnToLowConfTeammate struct {
	NeckTurnToLowConfTeammate *Neck_TurnToLowConfTeammate `protobuf:"bytes,47,opt,name=neck_turn_to_low_conf_teammate,json=neckTurnToLowConfTeammate,proto3,oneof"`
}

type PlayerAction_NeckTurnToPlayerOrScan struct {
	NeckTurnToPlayerOrScan *Neck_TurnToPlayerOrScan `protobuf:"bytes,48,opt,name=neck_turn_to_player_or_scan,json=neckTurnToPlayerOrScan,proto3,oneof"`
}

type PlayerAction_NeckTurnToPoint struct {
	NeckTurnToPoint *Neck_TurnToPoint `protobuf:"bytes,49,opt,name=neck_turn_to_point,json=neckTurnToPoint,proto3,oneof"`
}

type PlayerAction_NeckTurnToRelative struct {
	NeckTurnToRelative *Neck_TurnToRelative `protobuf:"bytes,50,opt,name=neck_turn_to_relative,json=neckTurnToRelative,proto3,oneof"`
}

type PlayerAction_ViewChangeWidth struct {
	ViewChangeWidth *View_ChangeWidth `protobuf:"bytes,51,opt,name=view_change_width,json=viewChangeWidth,proto3,oneof"`
}

type PlayerAction_ViewNormal struct {
	ViewNormal *View_Normal `protobuf:"bytes,52,opt,name=view_normal,json=viewNormal,proto3,oneof"`
}

type PlayerAction_ViewSynch struct {
	ViewSynch *View_Synch `protobuf:"bytes,53,opt,name=view_synch,json=viewSynch,proto3,oneof"`
}

type PlayerAction_ViewWide struct {
	ViewWide *View_Wide `protobuf:"bytes,54,opt,name=view_wide,json=viewWide,proto3,oneof"`
}

type PlayerAction_HeliosGoalie struct {
	HeliosGoalie *HeliosGoalie `protobuf:"bytes,55,opt,name=helios_goalie,json=heliosGoalie,proto3,oneof"`
}

type PlayerAction_HeliosGoalieMove struct {
	HeliosGoalieMove *HeliosGoalieMove `protobuf:"bytes,56,opt,name=helios_goalie_move,json=heliosGoalieMove,proto3,oneof"`
}

type PlayerAction_HeliosGoalieKick struct {
	HeliosGoalieKick *HeliosGoalieKick `protobuf:"bytes,57,opt,name=helios_goalie_kick,json=heliosGoalieKick,proto3,oneof"`
}

type PlayerAction_HeliosShoot struct {
	HeliosShoot *HeliosShoot `protobuf:"bytes,58,opt,name=helios_shoot,json=heliosShoot,proto3,oneof"`
}

type PlayerAction_HeliosOffensivePlanner struct {
	HeliosOffensivePlanner *HeliosOffensivePlanner `protobuf:"bytes,59,opt,name=helios_offensive_planner,json=heliosOffensivePlanner,proto3,oneof"`
}

type PlayerAction_HeliosBasicOffensive struct {
	HeliosBasicOffensive *HeliosBasicOffensive `protobuf:"bytes,60,opt,name=helios_basic_offensive,json=heliosBasicOffensive,proto3,oneof"`
}

type PlayerAction_HeliosBasicMove struct {
	HeliosBasicMove *HeliosBasicMove `protobuf:"bytes,61,opt,name=helios_basic_move,json=heliosBasicMove,proto3,oneof"`
}

type PlayerAction_HeliosSetPlay struct {
	HeliosSetPlay *HeliosSetPlay `protobuf:"bytes,62,opt,name=helios_set_play,json=heliosSetPlay,proto3,oneof"`
}

type PlayerAction_HeliosPenalty struct {
	HeliosPenalty *HeliosPenalty `protobuf:"bytes,63,opt,name=helios_penalty,json=heliosPenalty,proto3,oneof"`
}

type PlayerAction_HeliosCommunication struct {
	HeliosCommunication *HeliosCommunicaion `protobuf:"bytes,64,opt,name=helios_communication,json=heliosCommunication,proto3,oneof"`
}

type PlayerAction_BhvDoForceKick struct {
	BhvDoForceKick *BhvDoForceKick `protobuf:"bytes,65,opt,name=bhv_do_force_kick,json=bhvDoForceKick,proto3,oneof"`
}

type PlayerAction_BhvDoHeardPassRecieve struct {
	BhvDoHeardPassRecieve *BhvDoHeardPassRecieve `protobuf:"bytes,66,opt,name=bhv_do_heard_pass_recieve,json=bhvDoHeardPassRecieve,proto3,oneof"`
}

func (*PlayerAction_Dash) isPlayerAction_Action() {}

func (*PlayerAction_Turn) isPlayerAction_Action() {}

func (*PlayerAction_Kick) isPlayerAction_Action() {}

func (*PlayerAction_Tackle) isPlayerAction_Action() {}

func (*PlayerAction_Catch) isPlayerAction_Action() {}

func (*PlayerAction_Move) isPlayerAction_Action() {}

func (*PlayerAction_TurnNeck) isPlayerAction_Action() {}

func (*PlayerAction_ChangeView) isPlayerAction_Action() {}

func (*PlayerAction_Say) isPlayerAction_Action() {}

func (*PlayerAction_PointTo) isPlayerAction_Action() {}

func (*PlayerAction_PointToOf) isPlayerAction_Action() {}

func (*PlayerAction_AttentionTo) isPlayerAction_Action() {}

func (*PlayerAction_AttentionToOf) isPlayerAction_Action() {}

func (*PlayerAction_Log) isPlayerAction_Action() {}

func (*PlayerAction_DebugClient) isPlayerAction_Action() {}

func (*PlayerAction_BodyGoToPoint) isPlayerAction_Action() {}

func (*PlayerAction_BodySmartKick) isPlayerAction_Action() {}

func (*PlayerAction_BhvBeforeKickOff) isPlayerAction_Action() {}

func (*PlayerAction_BhvBodyNeckToBall) isPlayerAction_Action() {}

func (*PlayerAction_BhvBodyNeckToPoint) isPlayerAction_Action() {}

func (*PlayerAction_BhvEmergency) isPlayerAction_Action() {}

func (*PlayerAction_BhvGoToPointLookBall) isPlayerAction_Action() {}

func (*PlayerAction_BhvNeckBodyToBall) isPlayerAction_Action() {}

func (*PlayerAction_BhvNeckBodyToPoint) isPlayerAction_Action() {}

func (*PlayerAction_BhvScanField) isPlayerAction_Action() {}

func (*PlayerAction_BodyAdvanceBall) isPlayerAction_Action() {}

func (*PlayerAction_BodyClearBall) isPlayerAction_Action() {}

func (*PlayerAction_BodyDribble) isPlayerAction_Action() {}

func (*PlayerAction_BodyGoToPointDodge) isPlayerAction_Action() {}

func (*PlayerAction_BodyHoldBall) isPlayerAction_Action() {}

func (*PlayerAction_BodyIntercept) isPlayerAction_Action() {}

func (*PlayerAction_BodyKickOneStep) isPlayerAction_Action() {}

func (*PlayerAction_BodyStopBall) isPlayerAction_Action() {}

func (*PlayerAction_BodyStopDash) isPlayerAction_Action() {}

func (*PlayerAction_BodyTackleToPoint) isPlayerAction_Action() {}

func (*PlayerAction_BodyTurnToAngle) isPlayerAction_Action() {}

func (*PlayerAction_BodyTurnToBall) isPlayerAction_Action() {}

func (*PlayerAction_BodyTurnToPoint) isPlayerAction_Action() {}

func (*PlayerAction_FocusMoveToPoint) isPlayerAction_Action() {}

func (*PlayerAction_FocusReset) isPlayerAction_Action() {}

func (*PlayerAction_NeckScanField) isPlayerAction_Action() {}

func (*PlayerAction_NeckScanPlayers) isPlayerAction_Action() {}

func (*PlayerAction_NeckTurnToBallAndPlayer) isPlayerAction_Action() {}

func (*PlayerAction_NeckTurnToBallOrScan) isPlayerAction_Action() {}

func (*PlayerAction_NeckTurnToBall) isPlayerAction_Action() {}

func (*PlayerAction_NeckTurnToGoalieOrScan) isPlayerAction_Action() {}

func (*PlayerAction_NeckTurnToLowConfTeammate) isPlayerAction_Action() {}

func (*PlayerAction_NeckTurnToPlayerOrScan) isPlayerAction_Action() {}

func (*PlayerAction_NeckTurnToPoint) isPlayerAction_Action() {}

func (*PlayerAction_NeckTurnToRelative) isPlayerAction_Action() {}

func (*PlayerAction_ViewChangeWidth) isPlayerAction_Action() {}

func (*PlayerAction_ViewNormal) isPlayerAction_Action() {}

func (*PlayerAction_ViewSynch) isPlayerAction_Action() {}

func (*PlayerAction_ViewWide) isPlayerAction_Action() {}

func (*PlayerAction_HeliosGoalie) isPlayerAction_Action() {}

func (*PlayerAction_HeliosGoalieMove) isPlayerAction_Action() {}

func (*PlayerAction_HeliosGoalieKick) isPlayerAction_Action() {}

func (*PlayerAction_HeliosShoot) isPlayerAction_Action() {}

func (*PlayerAction_HeliosOffensivePlanner) isPlayerAction_Action() {}

func (*PlayerAction_HeliosBasicOffensive) isPlayerAction_Action() {}

func (*PlayerAction_HeliosBasicMove) isPlayerAction_Action() {}

func (*PlayerAction_HeliosSetPlay) isPlayerAction_Action() {}

func (*PlayerAction_HeliosPenalty) isPlayerAction_Action() {}

func (*PlayerAction_HeliosCommunication) isPlayerAction_Action() {}

func (*PlayerAction_BhvDoForceKick) isPlayerAction_Action() {}

func (*PlayerAction_BhvDoHeardPassRecieve) isPlayerAction_Action() {}

type PlayerActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions                  []*PlayerAction `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	IgnorePreprocess         bool            `protobuf:"varint,2,opt,name=ignore_preprocess,json=ignorePreprocess,proto3" json:"ignore_preprocess,omitempty"`
	IgnoreDoforcekick        bool            `protobuf:"varint,3,opt,name=ignore_doforcekick,json=ignoreDoforcekick,proto3" json:"ignore_doforcekick,omitempty"`
	IgnoreDoHeardPassRecieve bool            `protobuf:"varint,4,opt,name=ignore_doHeardPassRecieve,json=ignoreDoHeardPassRecieve,proto3" json:"ignore_doHeardPassRecieve,omitempty"`
}

func (x *PlayerActions) Reset() {
	*x = PlayerActions{}
	mi := &file_service_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerActions) ProtoMessage() {}

func (x *PlayerActions) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerActions.ProtoReflect.Descriptor instead.
func (*PlayerActions) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{110}
}

func (x *PlayerActions) GetActions() []*PlayerAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *PlayerActions) GetIgnorePreprocess() bool {
	if x != nil {
		return x.IgnorePreprocess
	}
	return false
}

func (x *PlayerActions) GetIgnoreDoforcekick() bool {
	if x != nil {
		return x.IgnoreDoforcekick
	}
	return false
}

func (x *PlayerActions) GetIgnoreDoHeardPassRecieve() bool {
	if x != nil {
		return x.IgnoreDoHeardPassRecieve
	}
	return false
}

type ChangePlayerType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniformNumber int32 `protobuf:"varint,1,opt,name=uniform_number,json=uniformNumber,proto3" json:"uniform_number,omitempty"`
	Type          int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ChangePlayerType) Reset() {
	*x = ChangePlayerType{}
	mi := &file_service_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangePlayerType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePlayerType) ProtoMessage() {}

func (x *ChangePlayerType) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePlayerType.ProtoReflect.Descriptor instead.
func (*ChangePlayerType) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{111}
}

func (x *ChangePlayerType) GetUniformNumber() int32 {
	if x != nil {
		return x.UniformNumber
	}
	return 0
}

func (x *ChangePlayerType) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type DoHeliosSubstitute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DoHeliosSubstitute) Reset() {
	*x = DoHeliosSubstitute{}
	mi := &file_service_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DoHeliosSubstitute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoHeliosSubstitute) ProtoMessage() {}

func (x *DoHeliosSubstitute) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoHeliosSubstitute.ProtoReflect.Descriptor instead.
func (*DoHeliosSubstitute) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{112}
}

type DoHeliosSayPlayerTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DoHeliosSayPlayerTypes) Reset() {
	*x = DoHeliosSayPlayerTypes{}
	mi := &file_service_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DoHeliosSayPlayerTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoHeliosSayPlayerTypes) ProtoMessage() {}

func (x *DoHeliosSayPlayerTypes) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoHeliosSayPlayerTypes.ProtoReflect.Descriptor instead.
func (*DoHeliosSayPlayerTypes) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{113}
}

type CoachAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//
	//	*CoachAction_ChangePlayerTypes
	//	*CoachAction_DoHeliosSubstitute
	//	*CoachAction_DoHeliosSayPlayerTypes
	Action isCoachAction_Action `protobuf_oneof:"action"`
}

func (x *CoachAction) Reset() {
	*x = CoachAction{}
	mi := &file_service_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoachAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoachAction) ProtoMessage() {}

func (x *CoachAction) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoachAction.ProtoReflect.Descriptor instead.
func (*CoachAction) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{114}
}

func (m *CoachAction) GetAction() isCoachAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *CoachAction) GetChangePlayerTypes() *ChangePlayerType {
	if x, ok := x.GetAction().(*CoachAction_ChangePlayerTypes); ok {
		return x.ChangePlayerTypes
	}
	return nil
}

func (x *CoachAction) GetDoHeliosSubstitute() *DoHeliosSubstitute {
	if x, ok := x.GetAction().(*CoachAction_DoHeliosSubstitute); ok {
		return x.DoHeliosSubstitute
	}
	return nil
}

func (x *CoachAction) GetDoHeliosSayPlayerTypes() *DoHeliosSayPlayerTypes {
	if x, ok := x.GetAction().(*CoachAction_DoHeliosSayPlayerTypes); ok {
		return x.DoHeliosSayPlayerTypes
	}
	return nil
}

type isCoachAction_Action interface {
	isCoachAction_Action()
}

type CoachAction_ChangePlayerTypes struct {
	ChangePlayerTypes *ChangePlayerType `protobuf:"bytes,1,opt,name=change_player_types,json=changePlayerTypes,proto3,oneof"`
}

type CoachAction_DoHeliosSubstitute struct {
	DoHeliosSubstitute *DoHeliosSubstitute `protobuf:"bytes,2,opt,name=do_helios_substitute,json=doHeliosSubstitute,proto3,oneof"`
}

type CoachAction_DoHeliosSayPlayerTypes struct {
	DoHeliosSayPlayerTypes *DoHeliosSayPlayerTypes `protobuf:"bytes,3,opt,name=do_helios_say_player_types,json=doHeliosSayPlayerTypes,proto3,oneof"`
}

func (*CoachAction_ChangePlayerTypes) isCoachAction_Action() {}

func (*CoachAction_DoHeliosSubstitute) isCoachAction_Action() {}

func (*CoachAction_DoHeliosSayPlayerTypes) isCoachAction_Action() {}

type CoachActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions []*CoachAction `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *CoachActions) Reset() {
	*x = CoachActions{}
	mi := &file_service_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoachActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoachActions) ProtoMessage() {}

func (x *CoachActions) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoachActions.ProtoReflect.Descriptor instead.
func (*CoachActions) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{115}
}

func (x *CoachActions) GetActions() []*CoachAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

type DoKickOff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DoKickOff) Reset() {
	*x = DoKickOff{}
	mi := &file_service_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DoKickOff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoKickOff) ProtoMessage() {}

func (x *DoKickOff) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoKickOff.ProtoReflect.Descriptor instead.
func (*DoKickOff) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{116}
}

type DoMoveBall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position *RpcVector2D `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	Velocity *RpcVector2D `protobuf:"bytes,2,opt,name=velocity,proto3" json:"velocity,omitempty"`
}

func (x *DoMoveBall) Reset() {
	*x = DoMoveBall{}
	mi := &file_service_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DoMoveBall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoMoveBall) ProtoMessage() {}

func (x *DoMoveBall) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoMoveBall.ProtoReflect.Descriptor instead.
func (*DoMoveBall) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{117}
}

func (x *DoMoveBall) GetPosition() *RpcVector2D {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *DoMoveBall) GetVelocity() *RpcVector2D {
	if x != nil {
		return x.Velocity
	}
	return nil
}

type DoMovePlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OurSide       bool         `protobuf:"varint,1,opt,name=our_side,json=ourSide,proto3" json:"our_side,omitempty"`
	UniformNumber int32        `protobuf:"varint,2,opt,name=uniform_number,json=uniformNumber,proto3" json:"uniform_number,omitempty"`
	Position      *RpcVector2D `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	BodyDirection float32      `protobuf:"fixed32,4,opt,name=body_direction,json=bodyDirection,proto3" json:"body_direction,omitempty"`
}

func (x *DoMovePlayer) Reset() {
	*x = DoMovePlayer{}
	mi := &file_service_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DoMovePlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoMovePlayer) ProtoMessage() {}

func (x *DoMovePlayer) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoMovePlayer.ProtoReflect.Descriptor instead.
func (*DoMovePlayer) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{118}
}

func (x *DoMovePlayer) GetOurSide() bool {
	if x != nil {
		return x.OurSide
	}
	return false
}

func (x *DoMovePlayer) GetUniformNumber() int32 {
	if x != nil {
		return x.UniformNumber
	}
	return 0
}

func (x *DoMovePlayer) GetPosition() *RpcVector2D {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *DoMovePlayer) GetBodyDirection() float32 {
	if x != nil {
		return x.BodyDirection
	}
	return 0
}

type DoRecover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DoRecover) Reset() {
	*x = DoRecover{}
	mi := &file_service_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DoRecover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoRecover) ProtoMessage() {}

func (x *DoRecover) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoRecover.ProtoReflect.Descriptor instead.
func (*DoRecover) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{119}
}

type DoChangeMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameModeType GameModeType `protobuf:"varint,1,opt,name=game_mode_type,json=gameModeType,proto3,enum=protos.GameModeType" json:"game_mode_type,omitempty"`
	Side         Side         `protobuf:"varint,2,opt,name=side,proto3,enum=protos.Side" json:"side,omitempty"` //some of the game mode need to know the side
}

func (x *DoChangeMode) Reset() {
	*x = DoChangeMode{}
	mi := &file_service_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DoChangeMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoChangeMode) ProtoMessage() {}

func (x *DoChangeMode) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoChangeMode.ProtoReflect.Descriptor instead.
func (*DoChangeMode) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{120}
}

func (x *DoChangeMode) GetGameModeType() GameModeType {
	if x != nil {
		return x.GameModeType
	}
	return GameModeType_BeforeKickOff
}

func (x *DoChangeMode) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_UNKNOWN
}

type DoChangePlayerType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OurSide       bool  `protobuf:"varint,1,opt,name=our_side,json=ourSide,proto3" json:"our_side,omitempty"`
	UniformNumber int32 `protobuf:"varint,2,opt,name=uniform_number,json=uniformNumber,proto3" json:"uniform_number,omitempty"`
	Type          int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DoChangePlayerType) Reset() {
	*x = DoChangePlayerType{}
	mi := &file_service_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DoChangePlayerType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoChangePlayerType) ProtoMessage() {}

func (x *DoChangePlayerType) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoChangePlayerType.ProtoReflect.Descriptor instead.
func (*DoChangePlayerType) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{121}
}

func (x *DoChangePlayerType) GetOurSide() bool {
	if x != nil {
		return x.OurSide
	}
	return false
}

func (x *DoChangePlayerType) GetUniformNumber() int32 {
	if x != nil {
		return x.UniformNumber
	}
	return 0
}

func (x *DoChangePlayerType) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type TrainerAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//
	//	*TrainerAction_DoKickOff
	//	*TrainerAction_DoMoveBall
	//	*TrainerAction_DoMovePlayer
	//	*TrainerAction_DoRecover
	//	*TrainerAction_DoChangeMode
	//	*TrainerAction_DoChangePlayerType
	Action isTrainerAction_Action `protobuf_oneof:"action"`
}

func (x *TrainerAction) Reset() {
	*x = TrainerAction{}
	mi := &file_service_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrainerAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainerAction) ProtoMessage() {}

func (x *TrainerAction) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainerAction.ProtoReflect.Descriptor instead.
func (*TrainerAction) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{122}
}

func (m *TrainerAction) GetAction() isTrainerAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *TrainerAction) GetDoKickOff() *DoKickOff {
	if x, ok := x.GetAction().(*TrainerAction_DoKickOff); ok {
		return x.DoKickOff
	}
	return nil
}

func (x *TrainerAction) GetDoMoveBall() *DoMoveBall {
	if x, ok := x.GetAction().(*TrainerAction_DoMoveBall); ok {
		return x.DoMoveBall
	}
	return nil
}

func (x *TrainerAction) GetDoMovePlayer() *DoMovePlayer {
	if x, ok := x.GetAction().(*TrainerAction_DoMovePlayer); ok {
		return x.DoMovePlayer
	}
	return nil
}

func (x *TrainerAction) GetDoRecover() *DoRecover {
	if x, ok := x.GetAction().(*TrainerAction_DoRecover); ok {
		return x.DoRecover
	}
	return nil
}

func (x *TrainerAction) GetDoChangeMode() *DoChangeMode {
	if x, ok := x.GetAction().(*TrainerAction_DoChangeMode); ok {
		return x.DoChangeMode
	}
	return nil
}

func (x *TrainerAction) GetDoChangePlayerType() *DoChangePlayerType {
	if x, ok := x.GetAction().(*TrainerAction_DoChangePlayerType); ok {
		return x.DoChangePlayerType
	}
	return nil
}

type isTrainerAction_Action interface {
	isTrainerAction_Action()
}

type TrainerAction_DoKickOff struct {
	DoKickOff *DoKickOff `protobuf:"bytes,1,opt,name=do_kick_off,json=doKickOff,proto3,oneof"`
}

type TrainerAction_DoMoveBall struct {
	DoMoveBall *DoMoveBall `protobuf:"bytes,2,opt,name=do_move_ball,json=doMoveBall,proto3,oneof"`
}

type TrainerAction_DoMovePlayer struct {
	DoMovePlayer *DoMovePlayer `protobuf:"bytes,3,opt,name=do_move_player,json=doMovePlayer,proto3,oneof"`
}

type TrainerAction_DoRecover struct {
	DoRecover *DoRecover `protobuf:"bytes,4,opt,name=do_recover,json=doRecover,proto3,oneof"`
}

type TrainerAction_DoChangeMode struct {
	DoChangeMode *DoChangeMode `protobuf:"bytes,5,opt,name=do_change_mode,json=doChangeMode,proto3,oneof"`
}

type TrainerAction_DoChangePlayerType struct {
	DoChangePlayerType *DoChangePlayerType `protobuf:"bytes,6,opt,name=do_change_player_type,json=doChangePlayerType,proto3,oneof"`
}

func (*TrainerAction_DoKickOff) isTrainerAction_Action() {}

func (*TrainerAction_DoMoveBall) isTrainerAction_Action() {}

func (*TrainerAction_DoMovePlayer) isTrainerAction_Action() {}

func (*TrainerAction_DoRecover) isTrainerAction_Action() {}

func (*TrainerAction_DoChangeMode) isTrainerAction_Action() {}

func (*TrainerAction_DoChangePlayerType) isTrainerAction_Action() {}

type TrainerActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions []*TrainerAction `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *TrainerActions) Reset() {
	*x = TrainerActions{}
	mi := &file_service_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrainerActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainerActions) ProtoMessage() {}

func (x *TrainerActions) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainerActions.ProtoReflect.Descriptor instead.
func (*TrainerActions) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{123}
}

func (x *TrainerActions) GetActions() []*TrainerAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

type ServerParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisterResponse          *RegisterResponse `protobuf:"bytes,1,opt,name=register_response,json=registerResponse,proto3" json:"register_response,omitempty"`
	InertiaMoment             float32           `protobuf:"fixed32,2,opt,name=inertia_moment,json=inertiaMoment,proto3" json:"inertia_moment,omitempty"`
	PlayerSize                float32           `protobuf:"fixed32,3,opt,name=player_size,json=playerSize,proto3" json:"player_size,omitempty"`
	PlayerDecay               float32           `protobuf:"fixed32,4,opt,name=player_decay,json=playerDecay,proto3" json:"player_decay,omitempty"`
	PlayerRand                float32           `protobuf:"fixed32,5,opt,name=player_rand,json=playerRand,proto3" json:"player_rand,omitempty"`
	PlayerWeight              float32           `protobuf:"fixed32,6,opt,name=player_weight,json=playerWeight,proto3" json:"player_weight,omitempty"`
	PlayerSpeedMax            float32           `protobuf:"fixed32,7,opt,name=player_speed_max,json=playerSpeedMax,proto3" json:"player_speed_max,omitempty"`
	PlayerAccelMax            float32           `protobuf:"fixed32,8,opt,name=player_accel_max,json=playerAccelMax,proto3" json:"player_accel_max,omitempty"`
	StaminaMax                float32           `protobuf:"fixed32,9,opt,name=stamina_max,json=staminaMax,proto3" json:"stamina_max,omitempty"`
	StaminaIncMax             float32           `protobuf:"fixed32,10,opt,name=stamina_inc_max,json=staminaIncMax,proto3" json:"stamina_inc_max,omitempty"`
	RecoverInit               float32           `protobuf:"fixed32,11,opt,name=recover_init,json=recoverInit,proto3" json:"recover_init,omitempty"`
	RecoverDecThr             float32           `protobuf:"fixed32,12,opt,name=recover_dec_thr,json=recoverDecThr,proto3" json:"recover_dec_thr,omitempty"`
	RecoverMin                float32           `protobuf:"fixed32,13,opt,name=recover_min,json=recoverMin,proto3" json:"recover_min,omitempty"`
	RecoverDec                float32           `protobuf:"fixed32,14,opt,name=recover_dec,json=recoverDec,proto3" json:"recover_dec,omitempty"`
	EffortInit                float32           `protobuf:"fixed32,15,opt,name=effort_init,json=effortInit,proto3" json:"effort_init,omitempty"`
	EffortDecThr              float32           `protobuf:"fixed32,16,opt,name=effort_dec_thr,json=effortDecThr,proto3" json:"effort_dec_thr,omitempty"`
	EffortMin                 float32           `protobuf:"fixed32,17,opt,name=effort_min,json=effortMin,proto3" json:"effort_min,omitempty"`
	EffortDec                 float32           `protobuf:"fixed32,18,opt,name=effort_dec,json=effortDec,proto3" json:"effort_dec,omitempty"`
	EffortIncThr              float32           `protobuf:"fixed32,19,opt,name=effort_inc_thr,json=effortIncThr,proto3" json:"effort_inc_thr,omitempty"`
	EffortInc                 float32           `protobuf:"fixed32,20,opt,name=effort_inc,json=effortInc,proto3" json:"effort_inc,omitempty"`
	KickRand                  float32           `protobuf:"fixed32,21,opt,name=kick_rand,json=kickRand,proto3" json:"kick_rand,omitempty"`
	TeamActuatorNoise         bool              `protobuf:"varint,22,opt,name=team_actuator_noise,json=teamActuatorNoise,proto3" json:"team_actuator_noise,omitempty"`
	PlayerRandFactorL         float32           `protobuf:"fixed32,23,opt,name=player_rand_factor_l,json=playerRandFactorL,proto3" json:"player_rand_factor_l,omitempty"`
	PlayerRandFactorR         float32           `protobuf:"fixed32,24,opt,name=player_rand_factor_r,json=playerRandFactorR,proto3" json:"player_rand_factor_r,omitempty"`
	KickRandFactorL           float32           `protobuf:"fixed32,25,opt,name=kick_rand_factor_l,json=kickRandFactorL,proto3" json:"kick_rand_factor_l,omitempty"`
	KickRandFactorR           float32           `protobuf:"fixed32,26,opt,name=kick_rand_factor_r,json=kickRandFactorR,proto3" json:"kick_rand_factor_r,omitempty"`
	BallSize                  float32           `protobuf:"fixed32,27,opt,name=ball_size,json=ballSize,proto3" json:"ball_size,omitempty"`
	BallDecay                 float32           `protobuf:"fixed32,28,opt,name=ball_decay,json=ballDecay,proto3" json:"ball_decay,omitempty"`
	BallRand                  float32           `protobuf:"fixed32,29,opt,name=ball_rand,json=ballRand,proto3" json:"ball_rand,omitempty"`
	BallWeight                float32           `protobuf:"fixed32,30,opt,name=ball_weight,json=ballWeight,proto3" json:"ball_weight,omitempty"`
	BallSpeedMax              float32           `protobuf:"fixed32,31,opt,name=ball_speed_max,json=ballSpeedMax,proto3" json:"ball_speed_max,omitempty"`
	BallAccelMax              float32           `protobuf:"fixed32,32,opt,name=ball_accel_max,json=ballAccelMax,proto3" json:"ball_accel_max,omitempty"`
	DashPowerRate             float32           `protobuf:"fixed32,33,opt,name=dash_power_rate,json=dashPowerRate,proto3" json:"dash_power_rate,omitempty"`
	KickPowerRate             float32           `protobuf:"fixed32,34,opt,name=kick_power_rate,json=kickPowerRate,proto3" json:"kick_power_rate,omitempty"`
	KickableMargin            float32           `protobuf:"fixed32,35,opt,name=kickable_margin,json=kickableMargin,proto3" json:"kickable_margin,omitempty"`
	ControlRadius             float32           `protobuf:"fixed32,36,opt,name=control_radius,json=controlRadius,proto3" json:"control_radius,omitempty"`
	ControlRadiusWidth        float32           `protobuf:"fixed32,37,opt,name=control_radius_width,json=controlRadiusWidth,proto3" json:"control_radius_width,omitempty"`
	MaxPower                  float32           `protobuf:"fixed32,38,opt,name=max_power,json=maxPower,proto3" json:"max_power,omitempty"`
	MinPower                  float32           `protobuf:"fixed32,39,opt,name=min_power,json=minPower,proto3" json:"min_power,omitempty"`
	MaxMoment                 float32           `protobuf:"fixed32,40,opt,name=max_moment,json=maxMoment,proto3" json:"max_moment,omitempty"`
	MinMoment                 float32           `protobuf:"fixed32,41,opt,name=min_moment,json=minMoment,proto3" json:"min_moment,omitempty"`
	MaxNeckMoment             float32           `protobuf:"fixed32,42,opt,name=max_neck_moment,json=maxNeckMoment,proto3" json:"max_neck_moment,omitempty"`
	MinNeckMoment             float32           `protobuf:"fixed32,43,opt,name=min_neck_moment,json=minNeckMoment,proto3" json:"min_neck_moment,omitempty"`
	MaxNeckAngle              float32           `protobuf:"fixed32,44,opt,name=max_neck_angle,json=maxNeckAngle,proto3" json:"max_neck_angle,omitempty"`
	MinNeckAngle              float32           `protobuf:"fixed32,45,opt,name=min_neck_angle,json=minNeckAngle,proto3" json:"min_neck_angle,omitempty"`
	VisibleAngle              float32           `protobuf:"fixed32,46,opt,name=visible_angle,json=visibleAngle,proto3" json:"visible_angle,omitempty"`
	VisibleDistance           float32           `protobuf:"fixed32,47,opt,name=visible_distance,json=visibleDistance,proto3" json:"visible_distance,omitempty"`
	WindDir                   float32           `protobuf:"fixed32,48,opt,name=wind_dir,json=windDir,proto3" json:"wind_dir,omitempty"`
	WindForce                 float32           `protobuf:"fixed32,49,opt,name=wind_force,json=windForce,proto3" json:"wind_force,omitempty"`
	WindAngle                 float32           `protobuf:"fixed32,50,opt,name=wind_angle,json=windAngle,proto3" json:"wind_angle,omitempty"`
	WindRand                  float32           `protobuf:"fixed32,51,opt,name=wind_rand,json=windRand,proto3" json:"wind_rand,omitempty"`
	KickableArea              float32           `protobuf:"fixed32,52,opt,name=kickable_area,json=kickableArea,proto3" json:"kickable_area,omitempty"`
	CatchAreaL                float32           `protobuf:"fixed32,53,opt,name=catch_area_l,json=catchAreaL,proto3" json:"catch_area_l,omitempty"`
	CatchAreaW                float32           `protobuf:"fixed32,54,opt,name=catch_area_w,json=catchAreaW,proto3" json:"catch_area_w,omitempty"`
	CatchProbability          float32           `protobuf:"fixed32,55,opt,name=catch_probability,json=catchProbability,proto3" json:"catch_probability,omitempty"`
	GoalieMaxMoves            int32             `protobuf:"varint,56,opt,name=goalie_max_moves,json=goalieMaxMoves,proto3" json:"goalie_max_moves,omitempty"`
	CornerKickMargin          float32           `protobuf:"fixed32,57,opt,name=corner_kick_margin,json=cornerKickMargin,proto3" json:"corner_kick_margin,omitempty"`
	OffsideActiveAreaSize     float32           `protobuf:"fixed32,58,opt,name=offside_active_area_size,json=offsideActiveAreaSize,proto3" json:"offside_active_area_size,omitempty"`
	WindNone                  bool              `protobuf:"varint,59,opt,name=wind_none,json=windNone,proto3" json:"wind_none,omitempty"`
	UseWindRandom             bool              `protobuf:"varint,60,opt,name=use_wind_random,json=useWindRandom,proto3" json:"use_wind_random,omitempty"`
	CoachSayCountMax          int32             `protobuf:"varint,61,opt,name=coach_say_count_max,json=coachSayCountMax,proto3" json:"coach_say_count_max,omitempty"`
	CoachSayMsgSize           int32             `protobuf:"varint,62,opt,name=coach_say_msg_size,json=coachSayMsgSize,proto3" json:"coach_say_msg_size,omitempty"`
	ClangWinSize              int32             `protobuf:"varint,63,opt,name=clang_win_size,json=clangWinSize,proto3" json:"clang_win_size,omitempty"`
	ClangDefineWin            int32             `protobuf:"varint,64,opt,name=clang_define_win,json=clangDefineWin,proto3" json:"clang_define_win,omitempty"`
	ClangMetaWin              int32             `protobuf:"varint,65,opt,name=clang_meta_win,json=clangMetaWin,proto3" json:"clang_meta_win,omitempty"`
	ClangAdviceWin            int32             `protobuf:"varint,66,opt,name=clang_advice_win,json=clangAdviceWin,proto3" json:"clang_advice_win,omitempty"`
	ClangInfoWin              int32             `protobuf:"varint,67,opt,name=clang_info_win,json=clangInfoWin,proto3" json:"clang_info_win,omitempty"`
	ClangMessDelay            int32             `protobuf:"varint,68,opt,name=clang_mess_delay,json=clangMessDelay,proto3" json:"clang_mess_delay,omitempty"`
	ClangMessPerCycle         int32             `protobuf:"varint,69,opt,name=clang_mess_per_cycle,json=clangMessPerCycle,proto3" json:"clang_mess_per_cycle,omitempty"`
	HalfTime                  int32             `protobuf:"varint,70,opt,name=half_time,json=halfTime,proto3" json:"half_time,omitempty"`
	SimulatorStep             int32             `protobuf:"varint,71,opt,name=simulator_step,json=simulatorStep,proto3" json:"simulator_step,omitempty"`
	SendStep                  int32             `protobuf:"varint,72,opt,name=send_step,json=sendStep,proto3" json:"send_step,omitempty"`
	RecvStep                  int32             `protobuf:"varint,73,opt,name=recv_step,json=recvStep,proto3" json:"recv_step,omitempty"`
	SenseBodyStep             int32             `protobuf:"varint,74,opt,name=sense_body_step,json=senseBodyStep,proto3" json:"sense_body_step,omitempty"`
	LcmStep                   int32             `protobuf:"varint,75,opt,name=lcm_step,json=lcmStep,proto3" json:"lcm_step,omitempty"`
	PlayerSayMsgSize          int32             `protobuf:"varint,76,opt,name=player_say_msg_size,json=playerSayMsgSize,proto3" json:"player_say_msg_size,omitempty"`
	PlayerHearMax             int32             `protobuf:"varint,77,opt,name=player_hear_max,json=playerHearMax,proto3" json:"player_hear_max,omitempty"`
	PlayerHearInc             int32             `protobuf:"varint,78,opt,name=player_hear_inc,json=playerHearInc,proto3" json:"player_hear_inc,omitempty"`
	PlayerHearDecay           int32             `protobuf:"varint,79,opt,name=player_hear_decay,json=playerHearDecay,proto3" json:"player_hear_decay,omitempty"`
	CatchBanCycle             int32             `protobuf:"varint,80,opt,name=catch_ban_cycle,json=catchBanCycle,proto3" json:"catch_ban_cycle,omitempty"`
	SlowDownFactor            int32             `protobuf:"varint,81,opt,name=slow_down_factor,json=slowDownFactor,proto3" json:"slow_down_factor,omitempty"`
	UseOffside                bool              `protobuf:"varint,82,opt,name=use_offside,json=useOffside,proto3" json:"use_offside,omitempty"`
	KickoffOffside            bool              `protobuf:"varint,83,opt,name=kickoff_offside,json=kickoffOffside,proto3" json:"kickoff_offside,omitempty"`
	OffsideKickMargin         float32           `protobuf:"fixed32,84,opt,name=offside_kick_margin,json=offsideKickMargin,proto3" json:"offside_kick_margin,omitempty"`
	AudioCutDist              float32           `protobuf:"fixed32,85,opt,name=audio_cut_dist,json=audioCutDist,proto3" json:"audio_cut_dist,omitempty"`
	DistQuantizeStep          float32           `protobuf:"fixed32,86,opt,name=dist_quantize_step,json=distQuantizeStep,proto3" json:"dist_quantize_step,omitempty"`
	LandmarkDistQuantizeStep  float32           `protobuf:"fixed32,87,opt,name=landmark_dist_quantize_step,json=landmarkDistQuantizeStep,proto3" json:"landmark_dist_quantize_step,omitempty"`
	DirQuantizeStep           float32           `protobuf:"fixed32,88,opt,name=dir_quantize_step,json=dirQuantizeStep,proto3" json:"dir_quantize_step,omitempty"`
	DistQuantizeStepL         float32           `protobuf:"fixed32,89,opt,name=dist_quantize_step_l,json=distQuantizeStepL,proto3" json:"dist_quantize_step_l,omitempty"`
	DistQuantizeStepR         float32           `protobuf:"fixed32,90,opt,name=dist_quantize_step_r,json=distQuantizeStepR,proto3" json:"dist_quantize_step_r,omitempty"`
	LandmarkDistQuantizeStepL float32           `protobuf:"fixed32,91,opt,name=landmark_dist_quantize_step_l,json=landmarkDistQuantizeStepL,proto3" json:"landmark_dist_quantize_step_l,omitempty"`
	LandmarkDistQuantizeStepR float32           `protobuf:"fixed32,92,opt,name=landmark_dist_quantize_step_r,json=landmarkDistQuantizeStepR,proto3" json:"landmark_dist_quantize_step_r,omitempty"`
	DirQuantizeStepL          float32           `protobuf:"fixed32,93,opt,name=dir_quantize_step_l,json=dirQuantizeStepL,proto3" json:"dir_quantize_step_l,omitempty"`
	DirQuantizeStepR          float32           `protobuf:"fixed32,94,opt,name=dir_quantize_step_r,json=dirQuantizeStepR,proto3" json:"dir_quantize_step_r,omitempty"`
	CoachMode                 bool              `protobuf:"varint,95,opt,name=coach_mode,json=coachMode,proto3" json:"coach_mode,omitempty"`
	CoachWithRefereeMode      bool              `protobuf:"varint,96,opt,name=coach_with_referee_mode,json=coachWithRefereeMode,proto3" json:"coach_with_referee_mode,omitempty"`
	UseOldCoachHear           bool              `protobuf:"varint,97,opt,name=use_old_coach_hear,json=useOldCoachHear,proto3" json:"use_old_coach_hear,omitempty"`
	SlownessOnTopForLeftTeam  float32           `protobuf:"fixed32,98,opt,name=slowness_on_top_for_left_team,json=slownessOnTopForLeftTeam,proto3" json:"slowness_on_top_for_left_team,omitempty"`
	SlownessOnTopForRightTeam float32           `protobuf:"fixed32,99,opt,name=slowness_on_top_for_right_team,json=slownessOnTopForRightTeam,proto3" json:"slowness_on_top_for_right_team,omitempty"`
	StartGoalL                int32             `protobuf:"varint,100,opt,name=start_goal_l,json=startGoalL,proto3" json:"start_goal_l,omitempty"`
	StartGoalR                int32             `protobuf:"varint,101,opt,name=start_goal_r,json=startGoalR,proto3" json:"start_goal_r,omitempty"`
	FullstateL                bool              `protobuf:"varint,102,opt,name=fullstate_l,json=fullstateL,proto3" json:"fullstate_l,omitempty"`
	FullstateR                bool              `protobuf:"varint,103,opt,name=fullstate_r,json=fullstateR,proto3" json:"fullstate_r,omitempty"`
	DropBallTime              int32             `protobuf:"varint,104,opt,name=drop_ball_time,json=dropBallTime,proto3" json:"drop_ball_time,omitempty"`
	SynchMode                 bool              `protobuf:"varint,105,opt,name=synch_mode,json=synchMode,proto3" json:"synch_mode,omitempty"`
	SynchOffset               int32             `protobuf:"varint,106,opt,name=synch_offset,json=synchOffset,proto3" json:"synch_offset,omitempty"`
	SynchMicroSleep           int32             `protobuf:"varint,107,opt,name=synch_micro_sleep,json=synchMicroSleep,proto3" json:"synch_micro_sleep,omitempty"`
	PointToBan                int32             `protobuf:"varint,108,opt,name=point_to_ban,json=pointToBan,proto3" json:"point_to_ban,omitempty"`
	PointToDuration           int32             `protobuf:"varint,109,opt,name=point_to_duration,json=pointToDuration,proto3" json:"point_to_duration,omitempty"`
	PlayerPort                int32             `protobuf:"varint,110,opt,name=player_port,json=playerPort,proto3" json:"player_port,omitempty"`
	TrainerPort               int32             `protobuf:"varint,111,opt,name=trainer_port,json=trainerPort,proto3" json:"trainer_port,omitempty"`
	OnlineCoachPort           int32             `protobuf:"varint,112,opt,name=online_coach_port,json=onlineCoachPort,proto3" json:"online_coach_port,omitempty"`
	VerboseMode               bool              `protobuf:"varint,113,opt,name=verbose_mode,json=verboseMode,proto3" json:"verbose_mode,omitempty"`
	CoachSendViStep           int32             `protobuf:"varint,114,opt,name=coach_send_vi_step,json=coachSendViStep,proto3" json:"coach_send_vi_step,omitempty"`
	ReplayFile                string            `protobuf:"bytes,115,opt,name=replay_file,json=replayFile,proto3" json:"replay_file,omitempty"`
	LandmarkFile              string            `protobuf:"bytes,116,opt,name=landmark_file,json=landmarkFile,proto3" json:"landmark_file,omitempty"`
	SendComms                 bool              `protobuf:"varint,117,opt,name=send_comms,json=sendComms,proto3" json:"send_comms,omitempty"`
	TextLogging               bool              `protobuf:"varint,118,opt,name=text_logging,json=textLogging,proto3" json:"text_logging,omitempty"`
	GameLogging               bool              `protobuf:"varint,119,opt,name=game_logging,json=gameLogging,proto3" json:"game_logging,omitempty"`
	GameLogVersion            int32             `protobuf:"varint,120,opt,name=game_log_version,json=gameLogVersion,proto3" json:"game_log_version,omitempty"`
	TextLogDir                string            `protobuf:"bytes,121,opt,name=text_log_dir,json=textLogDir,proto3" json:"text_log_dir,omitempty"`
	GameLogDir                string            `protobuf:"bytes,122,opt,name=game_log_dir,json=gameLogDir,proto3" json:"game_log_dir,omitempty"`
	TextLogFixedName          string            `protobuf:"bytes,123,opt,name=text_log_fixed_name,json=textLogFixedName,proto3" json:"text_log_fixed_name,omitempty"`
	GameLogFixedName          string            `protobuf:"bytes,124,opt,name=game_log_fixed_name,json=gameLogFixedName,proto3" json:"game_log_fixed_name,omitempty"`
	UseTextLogFixed           bool              `protobuf:"varint,125,opt,name=use_text_log_fixed,json=useTextLogFixed,proto3" json:"use_text_log_fixed,omitempty"`
	UseGameLogFixed           bool              `protobuf:"varint,126,opt,name=use_game_log_fixed,json=useGameLogFixed,proto3" json:"use_game_log_fixed,omitempty"`
	UseTextLogDated           bool              `protobuf:"varint,127,opt,name=use_text_log_dated,json=useTextLogDated,proto3" json:"use_text_log_dated,omitempty"`
	UseGameLogDated           bool              `protobuf:"varint,128,opt,name=use_game_log_dated,json=useGameLogDated,proto3" json:"use_game_log_dated,omitempty"`
	LogDateFormat             string            `protobuf:"bytes,129,opt,name=log_date_format,json=logDateFormat,proto3" json:"log_date_format,omitempty"`
	LogTimes                  bool              `protobuf:"varint,130,opt,name=log_times,json=logTimes,proto3" json:"log_times,omitempty"`
	RecordMessage             bool              `protobuf:"varint,131,opt,name=record_message,json=recordMessage,proto3" json:"record_message,omitempty"`
	TextLogCompression        int32             `protobuf:"varint,132,opt,name=text_log_compression,json=textLogCompression,proto3" json:"text_log_compression,omitempty"`
	GameLogCompression        int32             `protobuf:"varint,133,opt,name=game_log_compression,json=gameLogCompression,proto3" json:"game_log_compression,omitempty"`
	UseProfile                bool              `protobuf:"varint,134,opt,name=use_profile,json=useProfile,proto3" json:"use_profile,omitempty"`
	TackleDist                float32           `protobuf:"fixed32,135,opt,name=tackle_dist,json=tackleDist,proto3" json:"tackle_dist,omitempty"`
	TackleBackDist            float32           `protobuf:"fixed32,136,opt,name=tackle_back_dist,json=tackleBackDist,proto3" json:"tackle_back_dist,omitempty"`
	TackleWidth               float32           `protobuf:"fixed32,137,opt,name=tackle_width,json=tackleWidth,proto3" json:"tackle_width,omitempty"`
	TackleExponent            float32           `protobuf:"fixed32,138,opt,name=tackle_exponent,json=tackleExponent,proto3" json:"tackle_exponent,omitempty"`
	TackleCycles              int32             `protobuf:"varint,139,opt,name=tackle_cycles,json=tackleCycles,proto3" json:"tackle_cycles,omitempty"`
	TacklePowerRate           float32           `protobuf:"fixed32,140,opt,name=tackle_power_rate,json=tacklePowerRate,proto3" json:"tackle_power_rate,omitempty"`
	FreeformWaitPeriod        int32             `protobuf:"varint,141,opt,name=freeform_wait_period,json=freeformWaitPeriod,proto3" json:"freeform_wait_period,omitempty"`
	FreeformSendPeriod        int32             `protobuf:"varint,142,opt,name=freeform_send_period,json=freeformSendPeriod,proto3" json:"freeform_send_period,omitempty"`
	FreeKickFaults            bool              `protobuf:"varint,143,opt,name=free_kick_faults,json=freeKickFaults,proto3" json:"free_kick_faults,omitempty"`
	BackPasses                bool              `protobuf:"varint,144,opt,name=back_passes,json=backPasses,proto3" json:"back_passes,omitempty"`
	ProperGoalKicks           bool              `protobuf:"varint,145,opt,name=proper_goal_kicks,json=properGoalKicks,proto3" json:"proper_goal_kicks,omitempty"`
	StoppedBallVel            float32           `protobuf:"fixed32,146,opt,name=stopped_ball_vel,json=stoppedBallVel,proto3" json:"stopped_ball_vel,omitempty"`
	MaxGoalKicks              int32             `protobuf:"varint,147,opt,name=max_goal_kicks,json=maxGoalKicks,proto3" json:"max_goal_kicks,omitempty"`
	ClangDelWin               int32             `protobuf:"varint,148,opt,name=clang_del_win,json=clangDelWin,proto3" json:"clang_del_win,omitempty"`
	ClangRuleWin              int32             `protobuf:"varint,149,opt,name=clang_rule_win,json=clangRuleWin,proto3" json:"clang_rule_win,omitempty"`
	AutoMode                  bool              `protobuf:"varint,150,opt,name=auto_mode,json=autoMode,proto3" json:"auto_mode,omitempty"`
	KickOffWait               int32             `protobuf:"varint,151,opt,name=kick_off_wait,json=kickOffWait,proto3" json:"kick_off_wait,omitempty"`
	ConnectWait               int32             `protobuf:"varint,152,opt,name=connect_wait,json=connectWait,proto3" json:"connect_wait,omitempty"`
	GameOverWait              int32             `protobuf:"varint,153,opt,name=game_over_wait,json=gameOverWait,proto3" json:"game_over_wait,omitempty"`
	TeamLStart                string            `protobuf:"bytes,154,opt,name=team_l_start,json=teamLStart,proto3" json:"team_l_start,omitempty"`
	TeamRStart                string            `protobuf:"bytes,155,opt,name=team_r_start,json=teamRStart,proto3" json:"team_r_start,omitempty"`
	KeepawayMode              bool              `protobuf:"varint,156,opt,name=keepaway_mode,json=keepawayMode,proto3" json:"keepaway_mode,omitempty"`
	KeepawayLength            float32           `protobuf:"fixed32,157,opt,name=keepaway_length,json=keepawayLength,proto3" json:"keepaway_length,omitempty"`
	KeepawayWidth             float32           `protobuf:"fixed32,158,opt,name=keepaway_width,json=keepawayWidth,proto3" json:"keepaway_width,omitempty"`
	KeepawayLogging           bool              `protobuf:"varint,159,opt,name=keepaway_logging,json=keepawayLogging,proto3" json:"keepaway_logging,omitempty"`
	KeepawayLogDir            string            `protobuf:"bytes,160,opt,name=keepaway_log_dir,json=keepawayLogDir,proto3" json:"keepaway_log_dir,omitempty"`
	KeepawayLogFixedName      string            `protobuf:"bytes,161,opt,name=keepaway_log_fixed_name,json=keepawayLogFixedName,proto3" json:"keepaway_log_fixed_name,omitempty"`
	KeepawayLogFixed          bool              `protobuf:"varint,162,opt,name=keepaway_log_fixed,json=keepawayLogFixed,proto3" json:"keepaway_log_fixed,omitempty"`
	KeepawayLogDated          bool              `protobuf:"varint,163,opt,name=keepaway_log_dated,json=keepawayLogDated,proto3" json:"keepaway_log_dated,omitempty"`
	KeepawayStart             int32             `protobuf:"varint,164,opt,name=keepaway_start,json=keepawayStart,proto3" json:"keepaway_start,omitempty"`
	NrNormalHalfs             int32             `protobuf:"varint,165,opt,name=nr_normal_halfs,json=nrNormalHalfs,proto3" json:"nr_normal_halfs,omitempty"`
	NrExtraHalfs              int32             `protobuf:"varint,166,opt,name=nr_extra_halfs,json=nrExtraHalfs,proto3" json:"nr_extra_halfs,omitempty"`
	PenaltyShootOuts          bool              `protobuf:"varint,167,opt,name=penalty_shoot_outs,json=penaltyShootOuts,proto3" json:"penalty_shoot_outs,omitempty"`
	PenBeforeSetupWait        int32             `protobuf:"varint,168,opt,name=pen_before_setup_wait,json=penBeforeSetupWait,proto3" json:"pen_before_setup_wait,omitempty"`
	PenSetupWait              int32             `protobuf:"varint,169,opt,name=pen_setup_wait,json=penSetupWait,proto3" json:"pen_setup_wait,omitempty"`
	PenReadyWait              int32             `protobuf:"varint,170,opt,name=pen_ready_wait,json=penReadyWait,proto3" json:"pen_ready_wait,omitempty"`
	PenTakenWait              int32             `protobuf:"varint,171,opt,name=pen_taken_wait,json=penTakenWait,proto3" json:"pen_taken_wait,omitempty"`
	PenNrKicks                int32             `protobuf:"varint,172,opt,name=pen_nr_kicks,json=penNrKicks,proto3" json:"pen_nr_kicks,omitempty"`
	PenMaxExtraKicks          int32             `protobuf:"varint,173,opt,name=pen_max_extra_kicks,json=penMaxExtraKicks,proto3" json:"pen_max_extra_kicks,omitempty"`
	PenDistX                  float32           `protobuf:"fixed32,174,opt,name=pen_dist_x,json=penDistX,proto3" json:"pen_dist_x,omitempty"`
	PenRandomWinner           bool              `protobuf:"varint,175,opt,name=pen_random_winner,json=penRandomWinner,proto3" json:"pen_random_winner,omitempty"`
	PenAllowMultKicks         bool              `protobuf:"varint,176,opt,name=pen_allow_mult_kicks,json=penAllowMultKicks,proto3" json:"pen_allow_mult_kicks,omitempty"`
	PenMaxGoalieDistX         float32           `protobuf:"fixed32,177,opt,name=pen_max_goalie_dist_x,json=penMaxGoalieDistX,proto3" json:"pen_max_goalie_dist_x,omitempty"`
	PenCoachMovesPlayers      bool              `protobuf:"varint,178,opt,name=pen_coach_moves_players,json=penCoachMovesPlayers,proto3" json:"pen_coach_moves_players,omitempty"`
	ModuleDir                 string            `protobuf:"bytes,179,opt,name=module_dir,json=moduleDir,proto3" json:"module_dir,omitempty"`
	BallStuckArea             float32           `protobuf:"fixed32,180,opt,name=ball_stuck_area,json=ballStuckArea,proto3" json:"ball_stuck_area,omitempty"`
	CoachMsgFile              string            `protobuf:"bytes,181,opt,name=coach_msg_file,json=coachMsgFile,proto3" json:"coach_msg_file,omitempty"`
	MaxTacklePower            float32           `protobuf:"fixed32,182,opt,name=max_tackle_power,json=maxTacklePower,proto3" json:"max_tackle_power,omitempty"`
	MaxBackTacklePower        float32           `protobuf:"fixed32,183,opt,name=max_back_tackle_power,json=maxBackTacklePower,proto3" json:"max_back_tackle_power,omitempty"`
	PlayerSpeedMaxMin         float32           `protobuf:"fixed32,184,opt,name=player_speed_max_min,json=playerSpeedMaxMin,proto3" json:"player_speed_max_min,omitempty"`
	ExtraStamina              float32           `protobuf:"fixed32,185,opt,name=extra_stamina,json=extraStamina,proto3" json:"extra_stamina,omitempty"`
	SynchSeeOffset            int32             `protobuf:"varint,186,opt,name=synch_see_offset,json=synchSeeOffset,proto3" json:"synch_see_offset,omitempty"`
	ExtraHalfTime             int32             `protobuf:"varint,187,opt,name=extra_half_time,json=extraHalfTime,proto3" json:"extra_half_time,omitempty"`
	StaminaCapacity           float32           `protobuf:"fixed32,188,opt,name=stamina_capacity,json=staminaCapacity,proto3" json:"stamina_capacity,omitempty"`
	MaxDashAngle              float32           `protobuf:"fixed32,189,opt,name=max_dash_angle,json=maxDashAngle,proto3" json:"max_dash_angle,omitempty"`
	MinDashAngle              float32           `protobuf:"fixed32,190,opt,name=min_dash_angle,json=minDashAngle,proto3" json:"min_dash_angle,omitempty"`
	DashAngleStep             float32           `protobuf:"fixed32,191,opt,name=dash_angle_step,json=dashAngleStep,proto3" json:"dash_angle_step,omitempty"`
	SideDashRate              float32           `protobuf:"fixed32,192,opt,name=side_dash_rate,json=sideDashRate,proto3" json:"side_dash_rate,omitempty"`
	BackDashRate              float32           `protobuf:"fixed32,193,opt,name=back_dash_rate,json=backDashRate,proto3" json:"back_dash_rate,omitempty"`
	MaxDashPower              float32           `protobuf:"fixed32,194,opt,name=max_dash_power,json=maxDashPower,proto3" json:"max_dash_power,omitempty"`
	MinDashPower              float32           `protobuf:"fixed32,195,opt,name=min_dash_power,json=minDashPower,proto3" json:"min_dash_power,omitempty"`
	TackleRandFactor          float32           `protobuf:"fixed32,196,opt,name=tackle_rand_factor,json=tackleRandFactor,proto3" json:"tackle_rand_factor,omitempty"`
	FoulDetectProbability     float32           `protobuf:"fixed32,197,opt,name=foul_detect_probability,json=foulDetectProbability,proto3" json:"foul_detect_probability,omitempty"`
	FoulExponent              float32           `protobuf:"fixed32,198,opt,name=foul_exponent,json=foulExponent,proto3" json:"foul_exponent,omitempty"`
	FoulCycles                int32             `protobuf:"varint,199,opt,name=foul_cycles,json=foulCycles,proto3" json:"foul_cycles,omitempty"`
	GoldenGoal                bool              `protobuf:"varint,200,opt,name=golden_goal,json=goldenGoal,proto3" json:"golden_goal,omitempty"`
	RedCardProbability        float32           `protobuf:"fixed32,201,opt,name=red_card_probability,json=redCardProbability,proto3" json:"red_card_probability,omitempty"`
	IllegalDefenseDuration    int32             `protobuf:"varint,202,opt,name=illegal_defense_duration,json=illegalDefenseDuration,proto3" json:"illegal_defense_duration,omitempty"`
	IllegalDefenseNumber      int32             `protobuf:"varint,203,opt,name=illegal_defense_number,json=illegalDefenseNumber,proto3" json:"illegal_defense_number,omitempty"`
	IllegalDefenseDistX       float32           `protobuf:"fixed32,204,opt,name=illegal_defense_dist_x,json=illegalDefenseDistX,proto3" json:"illegal_defense_dist_x,omitempty"`
	IllegalDefenseWidth       float32           `protobuf:"fixed32,205,opt,name=illegal_defense_width,json=illegalDefenseWidth,proto3" json:"illegal_defense_width,omitempty"`
	FixedTeamnameL            string            `protobuf:"bytes,206,opt,name=fixed_teamname_l,json=fixedTeamnameL,proto3" json:"fixed_teamname_l,omitempty"`
	FixedTeamnameR            string            `protobuf:"bytes,207,opt,name=fixed_teamname_r,json=fixedTeamnameR,proto3" json:"fixed_teamname_r,omitempty"`
	MaxCatchAngle             float32           `protobuf:"fixed32,208,opt,name=max_catch_angle,json=maxCatchAngle,proto3" json:"max_catch_angle,omitempty"`
	MinCatchAngle             float32           `protobuf:"fixed32,209,opt,name=min_catch_angle,json=minCatchAngle,proto3" json:"min_catch_angle,omitempty"`
	RandomSeed                int32             `protobuf:"varint,210,opt,name=random_seed,json=randomSeed,proto3" json:"random_seed,omitempty"`
	LongKickPowerFactor       float32           `protobuf:"fixed32,211,opt,name=long_kick_power_factor,json=longKickPowerFactor,proto3" json:"long_kick_power_factor,omitempty"`
	LongKickDelay             int32             `protobuf:"varint,212,opt,name=long_kick_delay,json=longKickDelay,proto3" json:"long_kick_delay,omitempty"`
	MaxMonitors               int32             `protobuf:"varint,213,opt,name=max_monitors,json=maxMonitors,proto3" json:"max_monitors,omitempty"`
	CatchableArea             float32           `protobuf:"fixed32,214,opt,name=catchable_area,json=catchableArea,proto3" json:"catchable_area,omitempty"`
	RealSpeedMax              float32           `protobuf:"fixed32,215,opt,name=real_speed_max,json=realSpeedMax,proto3" json:"real_speed_max,omitempty"`
	PitchHalfLength           float32           `protobuf:"fixed32,216,opt,name=pitch_half_length,json=pitchHalfLength,proto3" json:"pitch_half_length,omitempty"`
	PitchHalfWidth            float32           `protobuf:"fixed32,217,opt,name=pitch_half_width,json=pitchHalfWidth,proto3" json:"pitch_half_width,omitempty"`
	OurPenaltyAreaLineX       float32           `protobuf:"fixed32,218,opt,name=our_penalty_area_line_x,json=ourPenaltyAreaLineX,proto3" json:"our_penalty_area_line_x,omitempty"`
	TheirPenaltyAreaLineX     float32           `protobuf:"fixed32,219,opt,name=their_penalty_area_line_x,json=theirPenaltyAreaLineX,proto3" json:"their_penalty_area_line_x,omitempty"`
	PenaltyAreaHalfWidth      float32           `protobuf:"fixed32,220,opt,name=penalty_area_half_width,json=penaltyAreaHalfWidth,proto3" json:"penalty_area_half_width,omitempty"`
	PenaltyAreaLength         float32           `protobuf:"fixed32,221,opt,name=penalty_area_length,json=penaltyAreaLength,proto3" json:"penalty_area_length,omitempty"`
	GoalWidth                 float32           `protobuf:"fixed32,222,opt,name=goal_width,json=goalWidth,proto3" json:"goal_width,omitempty"`
	GoalAreaWidth             float32           `protobuf:"fixed32,223,opt,name=goal_area_width,json=goalAreaWidth,proto3" json:"goal_area_width,omitempty"`
	GoalAreaLength            float32           `protobuf:"fixed32,224,opt,name=goal_area_length,json=goalAreaLength,proto3" json:"goal_area_length,omitempty"`
	CenterCircleR             float32           `protobuf:"fixed32,225,opt,name=center_circle_r,json=centerCircleR,proto3" json:"center_circle_r,omitempty"`
	GoalPostRadius            float32           `protobuf:"fixed32,226,opt,name=goal_post_radius,json=goalPostRadius,proto3" json:"goal_post_radius,omitempty"`
}

func (x *ServerParam) Reset() {
	*x = ServerParam{}
	mi := &file_service_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerParam) ProtoMessage() {}

func (x *ServerParam) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerParam.ProtoReflect.Descriptor instead.
func (*ServerParam) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{124}
}

func (x *ServerParam) GetRegisterResponse() *RegisterResponse {
	if x != nil {
		return x.RegisterResponse
	}
	return nil
}

func (x *ServerParam) GetInertiaMoment() float32 {
	if x != nil {
		return x.InertiaMoment
	}
	return 0
}

func (x *ServerParam) GetPlayerSize() float32 {
	if x != nil {
		return x.PlayerSize
	}
	return 0
}

func (x *ServerParam) GetPlayerDecay() float32 {
	if x != nil {
		return x.PlayerDecay
	}
	return 0
}

func (x *ServerParam) GetPlayerRand() float32 {
	if x != nil {
		return x.PlayerRand
	}
	return 0
}

func (x *ServerParam) GetPlayerWeight() float32 {
	if x != nil {
		return x.PlayerWeight
	}
	return 0
}

func (x *ServerParam) GetPlayerSpeedMax() float32 {
	if x != nil {
		return x.PlayerSpeedMax
	}
	return 0
}

func (x *ServerParam) GetPlayerAccelMax() float32 {
	if x != nil {
		return x.PlayerAccelMax
	}
	return 0
}

func (x *ServerParam) GetStaminaMax() float32 {
	if x != nil {
		return x.StaminaMax
	}
	return 0
}

func (x *ServerParam) GetStaminaIncMax() float32 {
	if x != nil {
		return x.StaminaIncMax
	}
	return 0
}

func (x *ServerParam) GetRecoverInit() float32 {
	if x != nil {
		return x.RecoverInit
	}
	return 0
}

func (x *ServerParam) GetRecoverDecThr() float32 {
	if x != nil {
		return x.RecoverDecThr
	}
	return 0
}

func (x *ServerParam) GetRecoverMin() float32 {
	if x != nil {
		return x.RecoverMin
	}
	return 0
}

func (x *ServerParam) GetRecoverDec() float32 {
	if x != nil {
		return x.RecoverDec
	}
	return 0
}

func (x *ServerParam) GetEffortInit() float32 {
	if x != nil {
		return x.EffortInit
	}
	return 0
}

func (x *ServerParam) GetEffortDecThr() float32 {
	if x != nil {
		return x.EffortDecThr
	}
	return 0
}

func (x *ServerParam) GetEffortMin() float32 {
	if x != nil {
		return x.EffortMin
	}
	return 0
}

func (x *ServerParam) GetEffortDec() float32 {
	if x != nil {
		return x.EffortDec
	}
	return 0
}

func (x *ServerParam) GetEffortIncThr() float32 {
	if x != nil {
		return x.EffortIncThr
	}
	return 0
}

func (x *ServerParam) GetEffortInc() float32 {
	if x != nil {
		return x.EffortInc
	}
	return 0
}

func (x *ServerParam) GetKickRand() float32 {
	if x != nil {
		return x.KickRand
	}
	return 0
}

func (x *ServerParam) GetTeamActuatorNoise() bool {
	if x != nil {
		return x.TeamActuatorNoise
	}
	return false
}

func (x *ServerParam) GetPlayerRandFactorL() float32 {
	if x != nil {
		return x.PlayerRandFactorL
	}
	return 0
}

func (x *ServerParam) GetPlayerRandFactorR() float32 {
	if x != nil {
		return x.PlayerRandFactorR
	}
	return 0
}

func (x *ServerParam) GetKickRandFactorL() float32 {
	if x != nil {
		return x.KickRandFactorL
	}
	return 0
}

func (x *ServerParam) GetKickRandFactorR() float32 {
	if x != nil {
		return x.KickRandFactorR
	}
	return 0
}

func (x *ServerParam) GetBallSize() float32 {
	if x != nil {
		return x.BallSize
	}
	return 0
}

func (x *ServerParam) GetBallDecay() float32 {
	if x != nil {
		return x.BallDecay
	}
	return 0
}

func (x *ServerParam) GetBallRand() float32 {
	if x != nil {
		return x.BallRand
	}
	return 0
}

func (x *ServerParam) GetBallWeight() float32 {
	if x != nil {
		return x.BallWeight
	}
	return 0
}

func (x *ServerParam) GetBallSpeedMax() float32 {
	if x != nil {
		return x.BallSpeedMax
	}
	return 0
}

func (x *ServerParam) GetBallAccelMax() float32 {
	if x != nil {
		return x.BallAccelMax
	}
	return 0
}

func (x *ServerParam) GetDashPowerRate() float32 {
	if x != nil {
		return x.DashPowerRate
	}
	return 0
}

func (x *ServerParam) GetKickPowerRate() float32 {
	if x != nil {
		return x.KickPowerRate
	}
	return 0
}

func (x *ServerParam) GetKickableMargin() float32 {
	if x != nil {
		return x.KickableMargin
	}
	return 0
}

func (x *ServerParam) GetControlRadius() float32 {
	if x != nil {
		return x.ControlRadius
	}
	return 0
}

func (x *ServerParam) GetControlRadiusWidth() float32 {
	if x != nil {
		return x.ControlRadiusWidth
	}
	return 0
}

func (x *ServerParam) GetMaxPower() float32 {
	if x != nil {
		return x.MaxPower
	}
	return 0
}

func (x *ServerParam) GetMinPower() float32 {
	if x != nil {
		return x.MinPower
	}
	return 0
}

func (x *ServerParam) GetMaxMoment() float32 {
	if x != nil {
		return x.MaxMoment
	}
	return 0
}

func (x *ServerParam) GetMinMoment() float32 {
	if x != nil {
		return x.MinMoment
	}
	return 0
}

func (x *ServerParam) GetMaxNeckMoment() float32 {
	if x != nil {
		return x.MaxNeckMoment
	}
	return 0
}

func (x *ServerParam) GetMinNeckMoment() float32 {
	if x != nil {
		return x.MinNeckMoment
	}
	return 0
}

func (x *ServerParam) GetMaxNeckAngle() float32 {
	if x != nil {
		return x.MaxNeckAngle
	}
	return 0
}

func (x *ServerParam) GetMinNeckAngle() float32 {
	if x != nil {
		return x.MinNeckAngle
	}
	return 0
}

func (x *ServerParam) GetVisibleAngle() float32 {
	if x != nil {
		return x.VisibleAngle
	}
	return 0
}

func (x *ServerParam) GetVisibleDistance() float32 {
	if x != nil {
		return x.VisibleDistance
	}
	return 0
}

func (x *ServerParam) GetWindDir() float32 {
	if x != nil {
		return x.WindDir
	}
	return 0
}

func (x *ServerParam) GetWindForce() float32 {
	if x != nil {
		return x.WindForce
	}
	return 0
}

func (x *ServerParam) GetWindAngle() float32 {
	if x != nil {
		return x.WindAngle
	}
	return 0
}

func (x *ServerParam) GetWindRand() float32 {
	if x != nil {
		return x.WindRand
	}
	return 0
}

func (x *ServerParam) GetKickableArea() float32 {
	if x != nil {
		return x.KickableArea
	}
	return 0
}

func (x *ServerParam) GetCatchAreaL() float32 {
	if x != nil {
		return x.CatchAreaL
	}
	return 0
}

func (x *ServerParam) GetCatchAreaW() float32 {
	if x != nil {
		return x.CatchAreaW
	}
	return 0
}

func (x *ServerParam) GetCatchProbability() float32 {
	if x != nil {
		return x.CatchProbability
	}
	return 0
}

func (x *ServerParam) GetGoalieMaxMoves() int32 {
	if x != nil {
		return x.GoalieMaxMoves
	}
	return 0
}

func (x *ServerParam) GetCornerKickMargin() float32 {
	if x != nil {
		return x.CornerKickMargin
	}
	return 0
}

func (x *ServerParam) GetOffsideActiveAreaSize() float32 {
	if x != nil {
		return x.OffsideActiveAreaSize
	}
	return 0
}

func (x *ServerParam) GetWindNone() bool {
	if x != nil {
		return x.WindNone
	}
	return false
}

func (x *ServerParam) GetUseWindRandom() bool {
	if x != nil {
		return x.UseWindRandom
	}
	return false
}

func (x *ServerParam) GetCoachSayCountMax() int32 {
	if x != nil {
		return x.CoachSayCountMax
	}
	return 0
}

func (x *ServerParam) GetCoachSayMsgSize() int32 {
	if x != nil {
		return x.CoachSayMsgSize
	}
	return 0
}

func (x *ServerParam) GetClangWinSize() int32 {
	if x != nil {
		return x.ClangWinSize
	}
	return 0
}

func (x *ServerParam) GetClangDefineWin() int32 {
	if x != nil {
		return x.ClangDefineWin
	}
	return 0
}

func (x *ServerParam) GetClangMetaWin() int32 {
	if x != nil {
		return x.ClangMetaWin
	}
	return 0
}

func (x *ServerParam) GetClangAdviceWin() int32 {
	if x != nil {
		return x.ClangAdviceWin
	}
	return 0
}

func (x *ServerParam) GetClangInfoWin() int32 {
	if x != nil {
		return x.ClangInfoWin
	}
	return 0
}

func (x *ServerParam) GetClangMessDelay() int32 {
	if x != nil {
		return x.ClangMessDelay
	}
	return 0
}

func (x *ServerParam) GetClangMessPerCycle() int32 {
	if x != nil {
		return x.ClangMessPerCycle
	}
	return 0
}

func (x *ServerParam) GetHalfTime() int32 {
	if x != nil {
		return x.HalfTime
	}
	return 0
}

func (x *ServerParam) GetSimulatorStep() int32 {
	if x != nil {
		return x.SimulatorStep
	}
	return 0
}

func (x *ServerParam) GetSendStep() int32 {
	if x != nil {
		return x.SendStep
	}
	return 0
}

func (x *ServerParam) GetRecvStep() int32 {
	if x != nil {
		return x.RecvStep
	}
	return 0
}

func (x *ServerParam) GetSenseBodyStep() int32 {
	if x != nil {
		return x.SenseBodyStep
	}
	return 0
}

func (x *ServerParam) GetLcmStep() int32 {
	if x != nil {
		return x.LcmStep
	}
	return 0
}

func (x *ServerParam) GetPlayerSayMsgSize() int32 {
	if x != nil {
		return x.PlayerSayMsgSize
	}
	return 0
}

func (x *ServerParam) GetPlayerHearMax() int32 {
	if x != nil {
		return x.PlayerHearMax
	}
	return 0
}

func (x *ServerParam) GetPlayerHearInc() int32 {
	if x != nil {
		return x.PlayerHearInc
	}
	return 0
}

func (x *ServerParam) GetPlayerHearDecay() int32 {
	if x != nil {
		return x.PlayerHearDecay
	}
	return 0
}

func (x *ServerParam) GetCatchBanCycle() int32 {
	if x != nil {
		return x.CatchBanCycle
	}
	return 0
}

func (x *ServerParam) GetSlowDownFactor() int32 {
	if x != nil {
		return x.SlowDownFactor
	}
	return 0
}

func (x *ServerParam) GetUseOffside() bool {
	if x != nil {
		return x.UseOffside
	}
	return false
}

func (x *ServerParam) GetKickoffOffside() bool {
	if x != nil {
		return x.KickoffOffside
	}
	return false
}

func (x *ServerParam) GetOffsideKickMargin() float32 {
	if x != nil {
		return x.OffsideKickMargin
	}
	return 0
}

func (x *ServerParam) GetAudioCutDist() float32 {
	if x != nil {
		return x.AudioCutDist
	}
	return 0
}

func (x *ServerParam) GetDistQuantizeStep() float32 {
	if x != nil {
		return x.DistQuantizeStep
	}
	return 0
}

func (x *ServerParam) GetLandmarkDistQuantizeStep() float32 {
	if x != nil {
		return x.LandmarkDistQuantizeStep
	}
	return 0
}

func (x *ServerParam) GetDirQuantizeStep() float32 {
	if x != nil {
		return x.DirQuantizeStep
	}
	return 0
}

func (x *ServerParam) GetDistQuantizeStepL() float32 {
	if x != nil {
		return x.DistQuantizeStepL
	}
	return 0
}

func (x *ServerParam) GetDistQuantizeStepR() float32 {
	if x != nil {
		return x.DistQuantizeStepR
	}
	return 0
}

func (x *ServerParam) GetLandmarkDistQuantizeStepL() float32 {
	if x != nil {
		return x.LandmarkDistQuantizeStepL
	}
	return 0
}

func (x *ServerParam) GetLandmarkDistQuantizeStepR() float32 {
	if x != nil {
		return x.LandmarkDistQuantizeStepR
	}
	return 0
}

func (x *ServerParam) GetDirQuantizeStepL() float32 {
	if x != nil {
		return x.DirQuantizeStepL
	}
	return 0
}

func (x *ServerParam) GetDirQuantizeStepR() float32 {
	if x != nil {
		return x.DirQuantizeStepR
	}
	return 0
}

func (x *ServerParam) GetCoachMode() bool {
	if x != nil {
		return x.CoachMode
	}
	return false
}

func (x *ServerParam) GetCoachWithRefereeMode() bool {
	if x != nil {
		return x.CoachWithRefereeMode
	}
	return false
}

func (x *ServerParam) GetUseOldCoachHear() bool {
	if x != nil {
		return x.UseOldCoachHear
	}
	return false
}

func (x *ServerParam) GetSlownessOnTopForLeftTeam() float32 {
	if x != nil {
		return x.SlownessOnTopForLeftTeam
	}
	return 0
}

func (x *ServerParam) GetSlownessOnTopForRightTeam() float32 {
	if x != nil {
		return x.SlownessOnTopForRightTeam
	}
	return 0
}

func (x *ServerParam) GetStartGoalL() int32 {
	if x != nil {
		return x.StartGoalL
	}
	return 0
}

func (x *ServerParam) GetStartGoalR() int32 {
	if x != nil {
		return x.StartGoalR
	}
	return 0
}

func (x *ServerParam) GetFullstateL() bool {
	if x != nil {
		return x.FullstateL
	}
	return false
}

func (x *ServerParam) GetFullstateR() bool {
	if x != nil {
		return x.FullstateR
	}
	return false
}

func (x *ServerParam) GetDropBallTime() int32 {
	if x != nil {
		return x.DropBallTime
	}
	return 0
}

func (x *ServerParam) GetSynchMode() bool {
	if x != nil {
		return x.SynchMode
	}
	return false
}

func (x *ServerParam) GetSynchOffset() int32 {
	if x != nil {
		return x.SynchOffset
	}
	return 0
}

func (x *ServerParam) GetSynchMicroSleep() int32 {
	if x != nil {
		return x.SynchMicroSleep
	}
	return 0
}

func (x *ServerParam) GetPointToBan() int32 {
	if x != nil {
		return x.PointToBan
	}
	return 0
}

func (x *ServerParam) GetPointToDuration() int32 {
	if x != nil {
		return x.PointToDuration
	}
	return 0
}

func (x *ServerParam) GetPlayerPort() int32 {
	if x != nil {
		return x.PlayerPort
	}
	return 0
}

func (x *ServerParam) GetTrainerPort() int32 {
	if x != nil {
		return x.TrainerPort
	}
	return 0
}

func (x *ServerParam) GetOnlineCoachPort() int32 {
	if x != nil {
		return x.OnlineCoachPort
	}
	return 0
}

func (x *ServerParam) GetVerboseMode() bool {
	if x != nil {
		return x.VerboseMode
	}
	return false
}

func (x *ServerParam) GetCoachSendViStep() int32 {
	if x != nil {
		return x.CoachSendViStep
	}
	return 0
}

func (x *ServerParam) GetReplayFile() string {
	if x != nil {
		return x.ReplayFile
	}
	return ""
}

func (x *ServerParam) GetLandmarkFile() string {
	if x != nil {
		return x.LandmarkFile
	}
	return ""
}

func (x *ServerParam) GetSendComms() bool {
	if x != nil {
		return x.SendComms
	}
	return false
}

func (x *ServerParam) GetTextLogging() bool {
	if x != nil {
		return x.TextLogging
	}
	return false
}

func (x *ServerParam) GetGameLogging() bool {
	if x != nil {
		return x.GameLogging
	}
	return false
}

func (x *ServerParam) GetGameLogVersion() int32 {
	if x != nil {
		return x.GameLogVersion
	}
	return 0
}

func (x *ServerParam) GetTextLogDir() string {
	if x != nil {
		return x.TextLogDir
	}
	return ""
}

func (x *ServerParam) GetGameLogDir() string {
	if x != nil {
		return x.GameLogDir
	}
	return ""
}

func (x *ServerParam) GetTextLogFixedName() string {
	if x != nil {
		return x.TextLogFixedName
	}
	return ""
}

func (x *ServerParam) GetGameLogFixedName() string {
	if x != nil {
		return x.GameLogFixedName
	}
	return ""
}

func (x *ServerParam) GetUseTextLogFixed() bool {
	if x != nil {
		return x.UseTextLogFixed
	}
	return false
}

func (x *ServerParam) GetUseGameLogFixed() bool {
	if x != nil {
		return x.UseGameLogFixed
	}
	return false
}

func (x *ServerParam) GetUseTextLogDated() bool {
	if x != nil {
		return x.UseTextLogDated
	}
	return false
}

func (x *ServerParam) GetUseGameLogDated() bool {
	if x != nil {
		return x.UseGameLogDated
	}
	return false
}

func (x *ServerParam) GetLogDateFormat() string {
	if x != nil {
		return x.LogDateFormat
	}
	return ""
}

func (x *ServerParam) GetLogTimes() bool {
	if x != nil {
		return x.LogTimes
	}
	return false
}

func (x *ServerParam) GetRecordMessage() bool {
	if x != nil {
		return x.RecordMessage
	}
	return false
}

func (x *ServerParam) GetTextLogCompression() int32 {
	if x != nil {
		return x.TextLogCompression
	}
	return 0
}

func (x *ServerParam) GetGameLogCompression() int32 {
	if x != nil {
		return x.GameLogCompression
	}
	return 0
}

func (x *ServerParam) GetUseProfile() bool {
	if x != nil {
		return x.UseProfile
	}
	return false
}

func (x *ServerParam) GetTackleDist() float32 {
	if x != nil {
		return x.TackleDist
	}
	return 0
}

func (x *ServerParam) GetTackleBackDist() float32 {
	if x != nil {
		return x.TackleBackDist
	}
	return 0
}

func (x *ServerParam) GetTackleWidth() float32 {
	if x != nil {
		return x.TackleWidth
	}
	return 0
}

func (x *ServerParam) GetTackleExponent() float32 {
	if x != nil {
		return x.TackleExponent
	}
	return 0
}

func (x *ServerParam) GetTackleCycles() int32 {
	if x != nil {
		return x.TackleCycles
	}
	return 0
}

func (x *ServerParam) GetTacklePowerRate() float32 {
	if x != nil {
		return x.TacklePowerRate
	}
	return 0
}

func (x *ServerParam) GetFreeformWaitPeriod() int32 {
	if x != nil {
		return x.FreeformWaitPeriod
	}
	return 0
}

func (x *ServerParam) GetFreeformSendPeriod() int32 {
	if x != nil {
		return x.FreeformSendPeriod
	}
	return 0
}

func (x *ServerParam) GetFreeKickFaults() bool {
	if x != nil {
		return x.FreeKickFaults
	}
	return false
}

func (x *ServerParam) GetBackPasses() bool {
	if x != nil {
		return x.BackPasses
	}
	return false
}

func (x *ServerParam) GetProperGoalKicks() bool {
	if x != nil {
		return x.ProperGoalKicks
	}
	return false
}

func (x *ServerParam) GetStoppedBallVel() float32 {
	if x != nil {
		return x.StoppedBallVel
	}
	return 0
}

func (x *ServerParam) GetMaxGoalKicks() int32 {
	if x != nil {
		return x.MaxGoalKicks
	}
	return 0
}

func (x *ServerParam) GetClangDelWin() int32 {
	if x != nil {
		return x.ClangDelWin
	}
	return 0
}

func (x *ServerParam) GetClangRuleWin() int32 {
	if x != nil {
		return x.ClangRuleWin
	}
	return 0
}

func (x *ServerParam) GetAutoMode() bool {
	if x != nil {
		return x.AutoMode
	}
	return false
}

func (x *ServerParam) GetKickOffWait() int32 {
	if x != nil {
		return x.KickOffWait
	}
	return 0
}

func (x *ServerParam) GetConnectWait() int32 {
	if x != nil {
		return x.ConnectWait
	}
	return 0
}

func (x *ServerParam) GetGameOverWait() int32 {
	if x != nil {
		return x.GameOverWait
	}
	return 0
}

func (x *ServerParam) GetTeamLStart() string {
	if x != nil {
		return x.TeamLStart
	}
	return ""
}

func (x *ServerParam) GetTeamRStart() string {
	if x != nil {
		return x.TeamRStart
	}
	return ""
}

func (x *ServerParam) GetKeepawayMode() bool {
	if x != nil {
		return x.KeepawayMode
	}
	return false
}

func (x *ServerParam) GetKeepawayLength() float32 {
	if x != nil {
		return x.KeepawayLength
	}
	return 0
}

func (x *ServerParam) GetKeepawayWidth() float32 {
	if x != nil {
		return x.KeepawayWidth
	}
	return 0
}

func (x *ServerParam) GetKeepawayLogging() bool {
	if x != nil {
		return x.KeepawayLogging
	}
	return false
}

func (x *ServerParam) GetKeepawayLogDir() string {
	if x != nil {
		return x.KeepawayLogDir
	}
	return ""
}

func (x *ServerParam) GetKeepawayLogFixedName() string {
	if x != nil {
		return x.KeepawayLogFixedName
	}
	return ""
}

func (x *ServerParam) GetKeepawayLogFixed() bool {
	if x != nil {
		return x.KeepawayLogFixed
	}
	return false
}

func (x *ServerParam) GetKeepawayLogDated() bool {
	if x != nil {
		return x.KeepawayLogDated
	}
	return false
}

func (x *ServerParam) GetKeepawayStart() int32 {
	if x != nil {
		return x.KeepawayStart
	}
	return 0
}

func (x *ServerParam) GetNrNormalHalfs() int32 {
	if x != nil {
		return x.NrNormalHalfs
	}
	return 0
}

func (x *ServerParam) GetNrExtraHalfs() int32 {
	if x != nil {
		return x.NrExtraHalfs
	}
	return 0
}

func (x *ServerParam) GetPenaltyShootOuts() bool {
	if x != nil {
		return x.PenaltyShootOuts
	}
	return false
}

func (x *ServerParam) GetPenBeforeSetupWait() int32 {
	if x != nil {
		return x.PenBeforeSetupWait
	}
	return 0
}

func (x *ServerParam) GetPenSetupWait() int32 {
	if x != nil {
		return x.PenSetupWait
	}
	return 0
}

func (x *ServerParam) GetPenReadyWait() int32 {
	if x != nil {
		return x.PenReadyWait
	}
	return 0
}

func (x *ServerParam) GetPenTakenWait() int32 {
	if x != nil {
		return x.PenTakenWait
	}
	return 0
}

func (x *ServerParam) GetPenNrKicks() int32 {
	if x != nil {
		return x.PenNrKicks
	}
	return 0
}

func (x *ServerParam) GetPenMaxExtraKicks() int32 {
	if x != nil {
		return x.PenMaxExtraKicks
	}
	return 0
}

func (x *ServerParam) GetPenDistX() float32 {
	if x != nil {
		return x.PenDistX
	}
	return 0
}

func (x *ServerParam) GetPenRandomWinner() bool {
	if x != nil {
		return x.PenRandomWinner
	}
	return false
}

func (x *ServerParam) GetPenAllowMultKicks() bool {
	if x != nil {
		return x.PenAllowMultKicks
	}
	return false
}

func (x *ServerParam) GetPenMaxGoalieDistX() float32 {
	if x != nil {
		return x.PenMaxGoalieDistX
	}
	return 0
}

func (x *ServerParam) GetPenCoachMovesPlayers() bool {
	if x != nil {
		return x.PenCoachMovesPlayers
	}
	return false
}

func (x *ServerParam) GetModuleDir() string {
	if x != nil {
		return x.ModuleDir
	}
	return ""
}

func (x *ServerParam) GetBallStuckArea() float32 {
	if x != nil {
		return x.BallStuckArea
	}
	return 0
}

func (x *ServerParam) GetCoachMsgFile() string {
	if x != nil {
		return x.CoachMsgFile
	}
	return ""
}

func (x *ServerParam) GetMaxTacklePower() float32 {
	if x != nil {
		return x.MaxTacklePower
	}
	return 0
}

func (x *ServerParam) GetMaxBackTacklePower() float32 {
	if x != nil {
		return x.MaxBackTacklePower
	}
	return 0
}

func (x *ServerParam) GetPlayerSpeedMaxMin() float32 {
	if x != nil {
		return x.PlayerSpeedMaxMin
	}
	return 0
}

func (x *ServerParam) GetExtraStamina() float32 {
	if x != nil {
		return x.ExtraStamina
	}
	return 0
}

func (x *ServerParam) GetSynchSeeOffset() int32 {
	if x != nil {
		return x.SynchSeeOffset
	}
	return 0
}

func (x *ServerParam) GetExtraHalfTime() int32 {
	if x != nil {
		return x.ExtraHalfTime
	}
	return 0
}

func (x *ServerParam) GetStaminaCapacity() float32 {
	if x != nil {
		return x.StaminaCapacity
	}
	return 0
}

func (x *ServerParam) GetMaxDashAngle() float32 {
	if x != nil {
		return x.MaxDashAngle
	}
	return 0
}

func (x *ServerParam) GetMinDashAngle() float32 {
	if x != nil {
		return x.MinDashAngle
	}
	return 0
}

func (x *ServerParam) GetDashAngleStep() float32 {
	if x != nil {
		return x.DashAngleStep
	}
	return 0
}

func (x *ServerParam) GetSideDashRate() float32 {
	if x != nil {
		return x.SideDashRate
	}
	return 0
}

func (x *ServerParam) GetBackDashRate() float32 {
	if x != nil {
		return x.BackDashRate
	}
	return 0
}

func (x *ServerParam) GetMaxDashPower() float32 {
	if x != nil {
		return x.MaxDashPower
	}
	return 0
}

func (x *ServerParam) GetMinDashPower() float32 {
	if x != nil {
		return x.MinDashPower
	}
	return 0
}

func (x *ServerParam) GetTackleRandFactor() float32 {
	if x != nil {
		return x.TackleRandFactor
	}
	return 0
}

func (x *ServerParam) GetFoulDetectProbability() float32 {
	if x != nil {
		return x.FoulDetectProbability
	}
	return 0
}

func (x *ServerParam) GetFoulExponent() float32 {
	if x != nil {
		return x.FoulExponent
	}
	return 0
}

func (x *ServerParam) GetFoulCycles() int32 {
	if x != nil {
		return x.FoulCycles
	}
	return 0
}

func (x *ServerParam) GetGoldenGoal() bool {
	if x != nil {
		return x.GoldenGoal
	}
	return false
}

func (x *ServerParam) GetRedCardProbability() float32 {
	if x != nil {
		return x.RedCardProbability
	}
	return 0
}

func (x *ServerParam) GetIllegalDefenseDuration() int32 {
	if x != nil {
		return x.IllegalDefenseDuration
	}
	return 0
}

func (x *ServerParam) GetIllegalDefenseNumber() int32 {
	if x != nil {
		return x.IllegalDefenseNumber
	}
	return 0
}

func (x *ServerParam) GetIllegalDefenseDistX() float32 {
	if x != nil {
		return x.IllegalDefenseDistX
	}
	return 0
}

func (x *ServerParam) GetIllegalDefenseWidth() float32 {
	if x != nil {
		return x.IllegalDefenseWidth
	}
	return 0
}

func (x *ServerParam) GetFixedTeamnameL() string {
	if x != nil {
		return x.FixedTeamnameL
	}
	return ""
}

func (x *ServerParam) GetFixedTeamnameR() string {
	if x != nil {
		return x.FixedTeamnameR
	}
	return ""
}

func (x *ServerParam) GetMaxCatchAngle() float32 {
	if x != nil {
		return x.MaxCatchAngle
	}
	return 0
}

func (x *ServerParam) GetMinCatchAngle() float32 {
	if x != nil {
		return x.MinCatchAngle
	}
	return 0
}

func (x *ServerParam) GetRandomSeed() int32 {
	if x != nil {
		return x.RandomSeed
	}
	return 0
}

func (x *ServerParam) GetLongKickPowerFactor() float32 {
	if x != nil {
		return x.LongKickPowerFactor
	}
	return 0
}

func (x *ServerParam) GetLongKickDelay() int32 {
	if x != nil {
		return x.LongKickDelay
	}
	return 0
}

func (x *ServerParam) GetMaxMonitors() int32 {
	if x != nil {
		return x.MaxMonitors
	}
	return 0
}

func (x *ServerParam) GetCatchableArea() float32 {
	if x != nil {
		return x.CatchableArea
	}
	return 0
}

func (x *ServerParam) GetRealSpeedMax() float32 {
	if x != nil {
		return x.RealSpeedMax
	}
	return 0
}

func (x *ServerParam) GetPitchHalfLength() float32 {
	if x != nil {
		return x.PitchHalfLength
	}
	return 0
}

func (x *ServerParam) GetPitchHalfWidth() float32 {
	if x != nil {
		return x.PitchHalfWidth
	}
	return 0
}

func (x *ServerParam) GetOurPenaltyAreaLineX() float32 {
	if x != nil {
		return x.OurPenaltyAreaLineX
	}
	return 0
}

func (x *ServerParam) GetTheirPenaltyAreaLineX() float32 {
	if x != nil {
		return x.TheirPenaltyAreaLineX
	}
	return 0
}

func (x *ServerParam) GetPenaltyAreaHalfWidth() float32 {
	if x != nil {
		return x.PenaltyAreaHalfWidth
	}
	return 0
}

func (x *ServerParam) GetPenaltyAreaLength() float32 {
	if x != nil {
		return x.PenaltyAreaLength
	}
	return 0
}

func (x *ServerParam) GetGoalWidth() float32 {
	if x != nil {
		return x.GoalWidth
	}
	return 0
}

func (x *ServerParam) GetGoalAreaWidth() float32 {
	if x != nil {
		return x.GoalAreaWidth
	}
	return 0
}

func (x *ServerParam) GetGoalAreaLength() float32 {
	if x != nil {
		return x.GoalAreaLength
	}
	return 0
}

func (x *ServerParam) GetCenterCircleR() float32 {
	if x != nil {
		return x.CenterCircleR
	}
	return 0
}

func (x *ServerParam) GetGoalPostRadius() float32 {
	if x != nil {
		return x.GoalPostRadius
	}
	return 0
}

type PlayerParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisterResponse                 *RegisterResponse `protobuf:"bytes,1,opt,name=register_response,json=registerResponse,proto3" json:"register_response,omitempty"`
	PlayerTypes                      int32             `protobuf:"varint,2,opt,name=player_types,json=playerTypes,proto3" json:"player_types,omitempty"`
	SubsMax                          int32             `protobuf:"varint,3,opt,name=subs_max,json=subsMax,proto3" json:"subs_max,omitempty"`
	PtMax                            int32             `protobuf:"varint,4,opt,name=pt_max,json=ptMax,proto3" json:"pt_max,omitempty"`
	AllowMultDefaultType             bool              `protobuf:"varint,5,opt,name=allow_mult_default_type,json=allowMultDefaultType,proto3" json:"allow_mult_default_type,omitempty"`
	PlayerSpeedMaxDeltaMin           float32           `protobuf:"fixed32,6,opt,name=player_speed_max_delta_min,json=playerSpeedMaxDeltaMin,proto3" json:"player_speed_max_delta_min,omitempty"`
	PlayerSpeedMaxDeltaMax           float32           `protobuf:"fixed32,7,opt,name=player_speed_max_delta_max,json=playerSpeedMaxDeltaMax,proto3" json:"player_speed_max_delta_max,omitempty"`
	StaminaIncMaxDeltaFactor         float32           `protobuf:"fixed32,8,opt,name=stamina_inc_max_delta_factor,json=staminaIncMaxDeltaFactor,proto3" json:"stamina_inc_max_delta_factor,omitempty"`
	PlayerDecayDeltaMin              float32           `protobuf:"fixed32,9,opt,name=player_decay_delta_min,json=playerDecayDeltaMin,proto3" json:"player_decay_delta_min,omitempty"`
	PlayerDecayDeltaMax              float32           `protobuf:"fixed32,10,opt,name=player_decay_delta_max,json=playerDecayDeltaMax,proto3" json:"player_decay_delta_max,omitempty"`
	InertiaMomentDeltaFactor         float32           `protobuf:"fixed32,11,opt,name=inertia_moment_delta_factor,json=inertiaMomentDeltaFactor,proto3" json:"inertia_moment_delta_factor,omitempty"`
	DashPowerRateDeltaMin            float32           `protobuf:"fixed32,12,opt,name=dash_power_rate_delta_min,json=dashPowerRateDeltaMin,proto3" json:"dash_power_rate_delta_min,omitempty"`
	DashPowerRateDeltaMax            float32           `protobuf:"fixed32,13,opt,name=dash_power_rate_delta_max,json=dashPowerRateDeltaMax,proto3" json:"dash_power_rate_delta_max,omitempty"`
	PlayerSizeDeltaFactor            float32           `protobuf:"fixed32,14,opt,name=player_size_delta_factor,json=playerSizeDeltaFactor,proto3" json:"player_size_delta_factor,omitempty"`
	KickableMarginDeltaMin           float32           `protobuf:"fixed32,15,opt,name=kickable_margin_delta_min,json=kickableMarginDeltaMin,proto3" json:"kickable_margin_delta_min,omitempty"`
	KickableMarginDeltaMax           float32           `protobuf:"fixed32,16,opt,name=kickable_margin_delta_max,json=kickableMarginDeltaMax,proto3" json:"kickable_margin_delta_max,omitempty"`
	KickRandDeltaFactor              float32           `protobuf:"fixed32,17,opt,name=kick_rand_delta_factor,json=kickRandDeltaFactor,proto3" json:"kick_rand_delta_factor,omitempty"`
	ExtraStaminaDeltaMin             float32           `protobuf:"fixed32,18,opt,name=extra_stamina_delta_min,json=extraStaminaDeltaMin,proto3" json:"extra_stamina_delta_min,omitempty"`
	ExtraStaminaDeltaMax             float32           `protobuf:"fixed32,19,opt,name=extra_stamina_delta_max,json=extraStaminaDeltaMax,proto3" json:"extra_stamina_delta_max,omitempty"`
	EffortMaxDeltaFactor             float32           `protobuf:"fixed32,20,opt,name=effort_max_delta_factor,json=effortMaxDeltaFactor,proto3" json:"effort_max_delta_factor,omitempty"`
	EffortMinDeltaFactor             float32           `protobuf:"fixed32,21,opt,name=effort_min_delta_factor,json=effortMinDeltaFactor,proto3" json:"effort_min_delta_factor,omitempty"`
	RandomSeed                       int32             `protobuf:"varint,22,opt,name=random_seed,json=randomSeed,proto3" json:"random_seed,omitempty"`
	NewDashPowerRateDeltaMin         float32           `protobuf:"fixed32,23,opt,name=new_dash_power_rate_delta_min,json=newDashPowerRateDeltaMin,proto3" json:"new_dash_power_rate_delta_min,omitempty"`
	NewDashPowerRateDeltaMax         float32           `protobuf:"fixed32,24,opt,name=new_dash_power_rate_delta_max,json=newDashPowerRateDeltaMax,proto3" json:"new_dash_power_rate_delta_max,omitempty"`
	NewStaminaIncMaxDeltaFactor      float32           `protobuf:"fixed32,25,opt,name=new_stamina_inc_max_delta_factor,json=newStaminaIncMaxDeltaFactor,proto3" json:"new_stamina_inc_max_delta_factor,omitempty"`
	KickPowerRateDeltaMin            float32           `protobuf:"fixed32,26,opt,name=kick_power_rate_delta_min,json=kickPowerRateDeltaMin,proto3" json:"kick_power_rate_delta_min,omitempty"`
	KickPowerRateDeltaMax            float32           `protobuf:"fixed32,27,opt,name=kick_power_rate_delta_max,json=kickPowerRateDeltaMax,proto3" json:"kick_power_rate_delta_max,omitempty"`
	FoulDetectProbabilityDeltaFactor float32           `protobuf:"fixed32,28,opt,name=foul_detect_probability_delta_factor,json=foulDetectProbabilityDeltaFactor,proto3" json:"foul_detect_probability_delta_factor,omitempty"`
	CatchableAreaLStretchMin         float32           `protobuf:"fixed32,29,opt,name=catchable_area_l_stretch_min,json=catchableAreaLStretchMin,proto3" json:"catchable_area_l_stretch_min,omitempty"`
	CatchableAreaLStretchMax         float32           `protobuf:"fixed32,30,opt,name=catchable_area_l_stretch_max,json=catchableAreaLStretchMax,proto3" json:"catchable_area_l_stretch_max,omitempty"`
}

func (x *PlayerParam) Reset() {
	*x = PlayerParam{}
	mi := &file_service_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerParam) ProtoMessage() {}

func (x *PlayerParam) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerParam.ProtoReflect.Descriptor instead.
func (*PlayerParam) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{125}
}

func (x *PlayerParam) GetRegisterResponse() *RegisterResponse {
	if x != nil {
		return x.RegisterResponse
	}
	return nil
}

func (x *PlayerParam) GetPlayerTypes() int32 {
	if x != nil {
		return x.PlayerTypes
	}
	return 0
}

func (x *PlayerParam) GetSubsMax() int32 {
	if x != nil {
		return x.SubsMax
	}
	return 0
}

func (x *PlayerParam) GetPtMax() int32 {
	if x != nil {
		return x.PtMax
	}
	return 0
}

func (x *PlayerParam) GetAllowMultDefaultType() bool {
	if x != nil {
		return x.AllowMultDefaultType
	}
	return false
}

func (x *PlayerParam) GetPlayerSpeedMaxDeltaMin() float32 {
	if x != nil {
		return x.PlayerSpeedMaxDeltaMin
	}
	return 0
}

func (x *PlayerParam) GetPlayerSpeedMaxDeltaMax() float32 {
	if x != nil {
		return x.PlayerSpeedMaxDeltaMax
	}
	return 0
}

func (x *PlayerParam) GetStaminaIncMaxDeltaFactor() float32 {
	if x != nil {
		return x.StaminaIncMaxDeltaFactor
	}
	return 0
}

func (x *PlayerParam) GetPlayerDecayDeltaMin() float32 {
	if x != nil {
		return x.PlayerDecayDeltaMin
	}
	return 0
}

func (x *PlayerParam) GetPlayerDecayDeltaMax() float32 {
	if x != nil {
		return x.PlayerDecayDeltaMax
	}
	return 0
}

func (x *PlayerParam) GetInertiaMomentDeltaFactor() float32 {
	if x != nil {
		return x.InertiaMomentDeltaFactor
	}
	return 0
}

func (x *PlayerParam) GetDashPowerRateDeltaMin() float32 {
	if x != nil {
		return x.DashPowerRateDeltaMin
	}
	return 0
}

func (x *PlayerParam) GetDashPowerRateDeltaMax() float32 {
	if x != nil {
		return x.DashPowerRateDeltaMax
	}
	return 0
}

func (x *PlayerParam) GetPlayerSizeDeltaFactor() float32 {
	if x != nil {
		return x.PlayerSizeDeltaFactor
	}
	return 0
}

func (x *PlayerParam) GetKickableMarginDeltaMin() float32 {
	if x != nil {
		return x.KickableMarginDeltaMin
	}
	return 0
}

func (x *PlayerParam) GetKickableMarginDeltaMax() float32 {
	if x != nil {
		return x.KickableMarginDeltaMax
	}
	return 0
}

func (x *PlayerParam) GetKickRandDeltaFactor() float32 {
	if x != nil {
		return x.KickRandDeltaFactor
	}
	return 0
}

func (x *PlayerParam) GetExtraStaminaDeltaMin() float32 {
	if x != nil {
		return x.ExtraStaminaDeltaMin
	}
	return 0
}

func (x *PlayerParam) GetExtraStaminaDeltaMax() float32 {
	if x != nil {
		return x.ExtraStaminaDeltaMax
	}
	return 0
}

func (x *PlayerParam) GetEffortMaxDeltaFactor() float32 {
	if x != nil {
		return x.EffortMaxDeltaFactor
	}
	return 0
}

func (x *PlayerParam) GetEffortMinDeltaFactor() float32 {
	if x != nil {
		return x.EffortMinDeltaFactor
	}
	return 0
}

func (x *PlayerParam) GetRandomSeed() int32 {
	if x != nil {
		return x.RandomSeed
	}
	return 0
}

func (x *PlayerParam) GetNewDashPowerRateDeltaMin() float32 {
	if x != nil {
		return x.NewDashPowerRateDeltaMin
	}
	return 0
}

func (x *PlayerParam) GetNewDashPowerRateDeltaMax() float32 {
	if x != nil {
		return x.NewDashPowerRateDeltaMax
	}
	return 0
}

func (x *PlayerParam) GetNewStaminaIncMaxDeltaFactor() float32 {
	if x != nil {
		return x.NewStaminaIncMaxDeltaFactor
	}
	return 0
}

func (x *PlayerParam) GetKickPowerRateDeltaMin() float32 {
	if x != nil {
		return x.KickPowerRateDeltaMin
	}
	return 0
}

func (x *PlayerParam) GetKickPowerRateDeltaMax() float32 {
	if x != nil {
		return x.KickPowerRateDeltaMax
	}
	return 0
}

func (x *PlayerParam) GetFoulDetectProbabilityDeltaFactor() float32 {
	if x != nil {
		return x.FoulDetectProbabilityDeltaFactor
	}
	return 0
}

func (x *PlayerParam) GetCatchableAreaLStretchMin() float32 {
	if x != nil {
		return x.CatchableAreaLStretchMin
	}
	return 0
}

func (x *PlayerParam) GetCatchableAreaLStretchMax() float32 {
	if x != nil {
		return x.CatchableAreaLStretchMax
	}
	return 0
}

type PlayerType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisterResponse           *RegisterResponse `protobuf:"bytes,1,opt,name=register_response,json=registerResponse,proto3" json:"register_response,omitempty"`
	Id                         int32             `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	StaminaIncMax              float32           `protobuf:"fixed32,3,opt,name=stamina_inc_max,json=staminaIncMax,proto3" json:"stamina_inc_max,omitempty"`
	PlayerDecay                float32           `protobuf:"fixed32,4,opt,name=player_decay,json=playerDecay,proto3" json:"player_decay,omitempty"`
	InertiaMoment              float32           `protobuf:"fixed32,5,opt,name=inertia_moment,json=inertiaMoment,proto3" json:"inertia_moment,omitempty"`
	DashPowerRate              float32           `protobuf:"fixed32,6,opt,name=dash_power_rate,json=dashPowerRate,proto3" json:"dash_power_rate,omitempty"`
	PlayerSize                 float32           `protobuf:"fixed32,7,opt,name=player_size,json=playerSize,proto3" json:"player_size,omitempty"`
	KickableMargin             float32           `protobuf:"fixed32,8,opt,name=kickable_margin,json=kickableMargin,proto3" json:"kickable_margin,omitempty"`
	KickRand                   float32           `protobuf:"fixed32,9,opt,name=kick_rand,json=kickRand,proto3" json:"kick_rand,omitempty"`
	ExtraStamina               float32           `protobuf:"fixed32,10,opt,name=extra_stamina,json=extraStamina,proto3" json:"extra_stamina,omitempty"`
	EffortMax                  float32           `protobuf:"fixed32,11,opt,name=effort_max,json=effortMax,proto3" json:"effort_max,omitempty"`
	EffortMin                  float32           `protobuf:"fixed32,12,opt,name=effort_min,json=effortMin,proto3" json:"effort_min,omitempty"`
	KickPowerRate              float32           `protobuf:"fixed32,13,opt,name=kick_power_rate,json=kickPowerRate,proto3" json:"kick_power_rate,omitempty"`
	FoulDetectProbability      float32           `protobuf:"fixed32,14,opt,name=foul_detect_probability,json=foulDetectProbability,proto3" json:"foul_detect_probability,omitempty"`
	CatchableAreaLStretch      float32           `protobuf:"fixed32,15,opt,name=catchable_area_l_stretch,json=catchableAreaLStretch,proto3" json:"catchable_area_l_stretch,omitempty"`
	UnumFarLength              float32           `protobuf:"fixed32,16,opt,name=unum_far_length,json=unumFarLength,proto3" json:"unum_far_length,omitempty"`
	UnumTooFarLength           float32           `protobuf:"fixed32,17,opt,name=unum_too_far_length,json=unumTooFarLength,proto3" json:"unum_too_far_length,omitempty"`
	TeamFarLength              float32           `protobuf:"fixed32,18,opt,name=team_far_length,json=teamFarLength,proto3" json:"team_far_length,omitempty"`
	TeamTooFarLength           float32           `protobuf:"fixed32,19,opt,name=team_too_far_length,json=teamTooFarLength,proto3" json:"team_too_far_length,omitempty"`
	PlayerMaxObservationLength float32           `protobuf:"fixed32,20,opt,name=player_max_observation_length,json=playerMaxObservationLength,proto3" json:"player_max_observation_length,omitempty"`
	BallVelFarLength           float32           `protobuf:"fixed32,21,opt,name=ball_vel_far_length,json=ballVelFarLength,proto3" json:"ball_vel_far_length,omitempty"`
	BallVelTooFarLength        float32           `protobuf:"fixed32,22,opt,name=ball_vel_too_far_length,json=ballVelTooFarLength,proto3" json:"ball_vel_too_far_length,omitempty"`
	BallMaxObservationLength   float32           `protobuf:"fixed32,23,opt,name=ball_max_observation_length,json=ballMaxObservationLength,proto3" json:"ball_max_observation_length,omitempty"`
	FlagChgFarLength           float32           `protobuf:"fixed32,24,opt,name=flag_chg_far_length,json=flagChgFarLength,proto3" json:"flag_chg_far_length,omitempty"`
	FlagChgTooFarLength        float32           `protobuf:"fixed32,25,opt,name=flag_chg_too_far_length,json=flagChgTooFarLength,proto3" json:"flag_chg_too_far_length,omitempty"`
	FlagMaxObservationLength   float32           `protobuf:"fixed32,26,opt,name=flag_max_observation_length,json=flagMaxObservationLength,proto3" json:"flag_max_observation_length,omitempty"`
	KickableArea               float32           `protobuf:"fixed32,27,opt,name=kickable_area,json=kickableArea,proto3" json:"kickable_area,omitempty"`
	ReliableCatchableDist      float32           `protobuf:"fixed32,28,opt,name=reliable_catchable_dist,json=reliableCatchableDist,proto3" json:"reliable_catchable_dist,omitempty"`
	MaxCatchableDist           float32           `protobuf:"fixed32,29,opt,name=max_catchable_dist,json=maxCatchableDist,proto3" json:"max_catchable_dist,omitempty"`
	RealSpeedMax               float32           `protobuf:"fixed32,30,opt,name=real_speed_max,json=realSpeedMax,proto3" json:"real_speed_max,omitempty"`
	PlayerSpeedMax2            float32           `protobuf:"fixed32,31,opt,name=player_speed_max2,json=playerSpeedMax2,proto3" json:"player_speed_max2,omitempty"`
	RealSpeedMax2              float32           `protobuf:"fixed32,32,opt,name=real_speed_max2,json=realSpeedMax2,proto3" json:"real_speed_max2,omitempty"`
	CyclesToReachMaxSpeed      int32             `protobuf:"varint,33,opt,name=cycles_to_reach_max_speed,json=cyclesToReachMaxSpeed,proto3" json:"cycles_to_reach_max_speed,omitempty"`
	PlayerSpeedMax             float32           `protobuf:"fixed32,34,opt,name=player_speed_max,json=playerSpeedMax,proto3" json:"player_speed_max,omitempty"`
}

func (x *PlayerType) Reset() {
	*x = PlayerType{}
	mi := &file_service_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerType) ProtoMessage() {}

func (x *PlayerType) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerType.ProtoReflect.Descriptor instead.
func (*PlayerType) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{126}
}

func (x *PlayerType) GetRegisterResponse() *RegisterResponse {
	if x != nil {
		return x.RegisterResponse
	}
	return nil
}

func (x *PlayerType) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PlayerType) GetStaminaIncMax() float32 {
	if x != nil {
		return x.StaminaIncMax
	}
	return 0
}

func (x *PlayerType) GetPlayerDecay() float32 {
	if x != nil {
		return x.PlayerDecay
	}
	return 0
}

func (x *PlayerType) GetInertiaMoment() float32 {
	if x != nil {
		return x.InertiaMoment
	}
	return 0
}

func (x *PlayerType) GetDashPowerRate() float32 {
	if x != nil {
		return x.DashPowerRate
	}
	return 0
}

func (x *PlayerType) GetPlayerSize() float32 {
	if x != nil {
		return x.PlayerSize
	}
	return 0
}

func (x *PlayerType) GetKickableMargin() float32 {
	if x != nil {
		return x.KickableMargin
	}
	return 0
}

func (x *PlayerType) GetKickRand() float32 {
	if x != nil {
		return x.KickRand
	}
	return 0
}

func (x *PlayerType) GetExtraStamina() float32 {
	if x != nil {
		return x.ExtraStamina
	}
	return 0
}

func (x *PlayerType) GetEffortMax() float32 {
	if x != nil {
		return x.EffortMax
	}
	return 0
}

func (x *PlayerType) GetEffortMin() float32 {
	if x != nil {
		return x.EffortMin
	}
	return 0
}

func (x *PlayerType) GetKickPowerRate() float32 {
	if x != nil {
		return x.KickPowerRate
	}
	return 0
}

func (x *PlayerType) GetFoulDetectProbability() float32 {
	if x != nil {
		return x.FoulDetectProbability
	}
	return 0
}

func (x *PlayerType) GetCatchableAreaLStretch() float32 {
	if x != nil {
		return x.CatchableAreaLStretch
	}
	return 0
}

func (x *PlayerType) GetUnumFarLength() float32 {
	if x != nil {
		return x.UnumFarLength
	}
	return 0
}

func (x *PlayerType) GetUnumTooFarLength() float32 {
	if x != nil {
		return x.UnumTooFarLength
	}
	return 0
}

func (x *PlayerType) GetTeamFarLength() float32 {
	if x != nil {
		return x.TeamFarLength
	}
	return 0
}

func (x *PlayerType) GetTeamTooFarLength() float32 {
	if x != nil {
		return x.TeamTooFarLength
	}
	return 0
}

func (x *PlayerType) GetPlayerMaxObservationLength() float32 {
	if x != nil {
		return x.PlayerMaxObservationLength
	}
	return 0
}

func (x *PlayerType) GetBallVelFarLength() float32 {
	if x != nil {
		return x.BallVelFarLength
	}
	return 0
}

func (x *PlayerType) GetBallVelTooFarLength() float32 {
	if x != nil {
		return x.BallVelTooFarLength
	}
	return 0
}

func (x *PlayerType) GetBallMaxObservationLength() float32 {
	if x != nil {
		return x.BallMaxObservationLength
	}
	return 0
}

func (x *PlayerType) GetFlagChgFarLength() float32 {
	if x != nil {
		return x.FlagChgFarLength
	}
	return 0
}

func (x *PlayerType) GetFlagChgTooFarLength() float32 {
	if x != nil {
		return x.FlagChgTooFarLength
	}
	return 0
}

func (x *PlayerType) GetFlagMaxObservationLength() float32 {
	if x != nil {
		return x.FlagMaxObservationLength
	}
	return 0
}

func (x *PlayerType) GetKickableArea() float32 {
	if x != nil {
		return x.KickableArea
	}
	return 0
}

func (x *PlayerType) GetReliableCatchableDist() float32 {
	if x != nil {
		return x.ReliableCatchableDist
	}
	return 0
}

func (x *PlayerType) GetMaxCatchableDist() float32 {
	if x != nil {
		return x.MaxCatchableDist
	}
	return 0
}

func (x *PlayerType) GetRealSpeedMax() float32 {
	if x != nil {
		return x.RealSpeedMax
	}
	return 0
}

func (x *PlayerType) GetPlayerSpeedMax2() float32 {
	if x != nil {
		return x.PlayerSpeedMax2
	}
	return 0
}

func (x *PlayerType) GetRealSpeedMax2() float32 {
	if x != nil {
		return x.RealSpeedMax2
	}
	return 0
}

func (x *PlayerType) GetCyclesToReachMaxSpeed() int32 {
	if x != nil {
		return x.CyclesToReachMaxSpeed
	}
	return 0
}

func (x *PlayerType) GetPlayerSpeedMax() float32 {
	if x != nil {
		return x.PlayerSpeedMax
	}
	return 0
}

type RpcCooperativeAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category               RpcActionCategory `protobuf:"varint,1,opt,name=category,proto3,enum=protos.RpcActionCategory" json:"category,omitempty"`
	Index                  int32             `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	SenderUnum             int32             `protobuf:"varint,3,opt,name=sender_unum,json=senderUnum,proto3" json:"sender_unum,omitempty"`
	TargetUnum             int32             `protobuf:"varint,4,opt,name=target_unum,json=targetUnum,proto3" json:"target_unum,omitempty"`
	TargetPoint            *RpcVector2D      `protobuf:"bytes,5,opt,name=target_point,json=targetPoint,proto3" json:"target_point,omitempty"`
	FirstBallSpeed         float64           `protobuf:"fixed64,6,opt,name=first_ball_speed,json=firstBallSpeed,proto3" json:"first_ball_speed,omitempty"`
	FirstTurnMoment        float64           `protobuf:"fixed64,7,opt,name=first_turn_moment,json=firstTurnMoment,proto3" json:"first_turn_moment,omitempty"`
	FirstDashPower         float64           `protobuf:"fixed64,8,opt,name=first_dash_power,json=firstDashPower,proto3" json:"first_dash_power,omitempty"`
	FirstDashAngleRelative float64           `protobuf:"fixed64,9,opt,name=first_dash_angle_relative,json=firstDashAngleRelative,proto3" json:"first_dash_angle_relative,omitempty"`
	DurationStep           int32             `protobuf:"varint,10,opt,name=duration_step,json=durationStep,proto3" json:"duration_step,omitempty"`
	KickCount              int32             `protobuf:"varint,11,opt,name=kick_count,json=kickCount,proto3" json:"kick_count,omitempty"`
	TurnCount              int32             `protobuf:"varint,12,opt,name=turn_count,json=turnCount,proto3" json:"turn_count,omitempty"`
	DashCount              int32             `protobuf:"varint,13,opt,name=dash_count,json=dashCount,proto3" json:"dash_count,omitempty"`
	FinalAction            bool              `protobuf:"varint,14,opt,name=final_action,json=finalAction,proto3" json:"final_action,omitempty"`
	Description            string            `protobuf:"bytes,15,opt,name=description,proto3" json:"description,omitempty"`
	ParentIndex            int32             `protobuf:"varint,16,opt,name=parent_index,json=parentIndex,proto3" json:"parent_index,omitempty"`
}

func (x *RpcCooperativeAction) Reset() {
	*x = RpcCooperativeAction{}
	mi := &file_service_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RpcCooperativeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcCooperativeAction) ProtoMessage() {}

func (x *RpcCooperativeAction) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcCooperativeAction.ProtoReflect.Descriptor instead.
func (*RpcCooperativeAction) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{127}
}

func (x *RpcCooperativeAction) GetCategory() RpcActionCategory {
	if x != nil {
		return x.Category
	}
	return RpcActionCategory_AC_Hold
}

func (x *RpcCooperativeAction) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RpcCooperativeAction) GetSenderUnum() int32 {
	if x != nil {
		return x.SenderUnum
	}
	return 0
}

func (x *RpcCooperativeAction) GetTargetUnum() int32 {
	if x != nil {
		return x.TargetUnum
	}
	return 0
}

func (x *RpcCooperativeAction) GetTargetPoint() *RpcVector2D {
	if x != nil {
		return x.TargetPoint
	}
	return nil
}

func (x *RpcCooperativeAction) GetFirstBallSpeed() float64 {
	if x != nil {
		return x.FirstBallSpeed
	}
	return 0
}

func (x *RpcCooperativeAction) GetFirstTurnMoment() float64 {
	if x != nil {
		return x.FirstTurnMoment
	}
	return 0
}

func (x *RpcCooperativeAction) GetFirstDashPower() float64 {
	if x != nil {
		return x.FirstDashPower
	}
	return 0
}

func (x *RpcCooperativeAction) GetFirstDashAngleRelative() float64 {
	if x != nil {
		return x.FirstDashAngleRelative
	}
	return 0
}

func (x *RpcCooperativeAction) GetDurationStep() int32 {
	if x != nil {
		return x.DurationStep
	}
	return 0
}

func (x *RpcCooperativeAction) GetKickCount() int32 {
	if x != nil {
		return x.KickCount
	}
	return 0
}

func (x *RpcCooperativeAction) GetTurnCount() int32 {
	if x != nil {
		return x.TurnCount
	}
	return 0
}

func (x *RpcCooperativeAction) GetDashCount() int32 {
	if x != nil {
		return x.DashCount
	}
	return 0
}

func (x *RpcCooperativeAction) GetFinalAction() bool {
	if x != nil {
		return x.FinalAction
	}
	return false
}

func (x *RpcCooperativeAction) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RpcCooperativeAction) GetParentIndex() int32 {
	if x != nil {
		return x.ParentIndex
	}
	return 0
}

type RpcPredictState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpendTime       int32        `protobuf:"varint,1,opt,name=spend_time,json=spendTime,proto3" json:"spend_time,omitempty"`
	BallHolderUnum  int32        `protobuf:"varint,2,opt,name=ball_holder_unum,json=ballHolderUnum,proto3" json:"ball_holder_unum,omitempty"`
	BallPosition    *RpcVector2D `protobuf:"bytes,3,opt,name=ball_position,json=ballPosition,proto3" json:"ball_position,omitempty"`
	BallVelocity    *RpcVector2D `protobuf:"bytes,4,opt,name=ball_velocity,json=ballVelocity,proto3" json:"ball_velocity,omitempty"`
	OurDefenseLineX float64      `protobuf:"fixed64,5,opt,name=our_defense_line_x,json=ourDefenseLineX,proto3" json:"our_defense_line_x,omitempty"`
	OurOffenseLineX float64      `protobuf:"fixed64,6,opt,name=our_offense_line_x,json=ourOffenseLineX,proto3" json:"our_offense_line_x,omitempty"`
}

func (x *RpcPredictState) Reset() {
	*x = RpcPredictState{}
	mi := &file_service_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RpcPredictState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcPredictState) ProtoMessage() {}

func (x *RpcPredictState) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcPredictState.ProtoReflect.Descriptor instead.
func (*RpcPredictState) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{128}
}

func (x *RpcPredictState) GetSpendTime() int32 {
	if x != nil {
		return x.SpendTime
	}
	return 0
}

func (x *RpcPredictState) GetBallHolderUnum() int32 {
	if x != nil {
		return x.BallHolderUnum
	}
	return 0
}

func (x *RpcPredictState) GetBallPosition() *RpcVector2D {
	if x != nil {
		return x.BallPosition
	}
	return nil
}

func (x *RpcPredictState) GetBallVelocity() *RpcVector2D {
	if x != nil {
		return x.BallVelocity
	}
	return nil
}

func (x *RpcPredictState) GetOurDefenseLineX() float64 {
	if x != nil {
		return x.OurDefenseLineX
	}
	return 0
}

func (x *RpcPredictState) GetOurOffenseLineX() float64 {
	if x != nil {
		return x.OurOffenseLineX
	}
	return 0
}

type RpcActionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action       *RpcCooperativeAction `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	PredictState *RpcPredictState      `protobuf:"bytes,2,opt,name=predict_state,json=predictState,proto3" json:"predict_state,omitempty"`
	Evaluation   float64               `protobuf:"fixed64,3,opt,name=evaluation,proto3" json:"evaluation,omitempty"`
}

func (x *RpcActionState) Reset() {
	*x = RpcActionState{}
	mi := &file_service_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RpcActionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcActionState) ProtoMessage() {}

func (x *RpcActionState) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcActionState.ProtoReflect.Descriptor instead.
func (*RpcActionState) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{129}
}

func (x *RpcActionState) GetAction() *RpcCooperativeAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *RpcActionState) GetPredictState() *RpcPredictState {
	if x != nil {
		return x.PredictState
	}
	return nil
}

func (x *RpcActionState) GetEvaluation() float64 {
	if x != nil {
		return x.Evaluation
	}
	return 0
}

type BestPlannerActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisterResponse *RegisterResponse         `protobuf:"bytes,1,opt,name=register_response,json=registerResponse,proto3" json:"register_response,omitempty"`
	Pairs            map[int32]*RpcActionState `protobuf:"bytes,2,rep,name=pairs,proto3" json:"pairs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	State            *State                    `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BestPlannerActionRequest) Reset() {
	*x = BestPlannerActionRequest{}
	mi := &file_service_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BestPlannerActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BestPlannerActionRequest) ProtoMessage() {}

func (x *BestPlannerActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BestPlannerActionRequest.ProtoReflect.Descriptor instead.
func (*BestPlannerActionRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{130}
}

func (x *BestPlannerActionRequest) GetRegisterResponse() *RegisterResponse {
	if x != nil {
		return x.RegisterResponse
	}
	return nil
}

func (x *BestPlannerActionRequest) GetPairs() map[int32]*RpcActionState {
	if x != nil {
		return x.Pairs
	}
	return nil
}

func (x *BestPlannerActionRequest) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

type BestPlannerActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *BestPlannerActionResponse) Reset() {
	*x = BestPlannerActionResponse{}
	mi := &file_service_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BestPlannerActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BestPlannerActionResponse) ProtoMessage() {}

func (x *BestPlannerActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BestPlannerActionResponse.ProtoReflect.Descriptor instead.
func (*BestPlannerActionResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{131}
}

func (x *BestPlannerActionResponse) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_service_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{132}
}

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x22, 0x53, 0x0a, 0x0b, 0x52, 0x70, 0x63, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x01, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x04, 0x64, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x22, 0xa8, 0x01, 0x0a,
	0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x70, 0x63, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x70, 0x63,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xfd, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x56, 0x0a, 0x18, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x15, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xfa, 0x05, 0x0a, 0x04, 0x42, 0x61, 0x6c, 0x6c,
	0x12, 0x2f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32,
	0x44, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0d, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52,
	0x0c, 0x73, 0x65, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x0e, 0x68, 0x65, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52,
	0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x72,
	0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x76, 0x65, 0x6c,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44,
	0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x0d, 0x73, 0x65,
	0x65, 0x6e, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0c, 0x73, 0x65, 0x65, 0x6e, 0x56, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32,
	0x44, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x72, 0x64, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x65, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x68, 0x65,
	0x61, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76,
	0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x76, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x65, 0x6e,
	0x5f, 0x76, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x73, 0x65, 0x65, 0x6e, 0x56, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x68, 0x65, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x72, 0x64, 0x56, 0x65,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x73, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x68, 0x6f, 0x73,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x64, 0x69, 0x73, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x6c, 0x66, 0x12, 0x26, 0x0a, 0x0f,
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x53, 0x65, 0x6c, 0x66, 0x22, 0xbe, 0x02, 0x0a, 0x10, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x4b, 0x69, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x0d, 0x6f, 0x6e, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x0b,
	0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x69, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x12, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61,
	0x6b, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x75, 0x72, 0x5f, 0x74,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x6f, 0x75, 0x72, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x74, 0x61, 0x6b,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x74, 0x68, 0x65, 0x69, 0x72, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x75, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x75, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x68, 0x65, 0x69, 0x72, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x6b,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4b, 0x69, 0x63, 0x6b,
	0x54, 0x61, 0x6b, 0x65, 0x72, 0x22, 0xc9, 0x09, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x2f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x0d, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0c, 0x73,
	0x65, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0e, 0x68,
	0x65, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x72, 0x64, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x08,
	0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x0d, 0x73, 0x65, 0x65, 0x6e,
	0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x32, 0x44, 0x52, 0x0c, 0x73, 0x65, 0x65, 0x6e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x65, 0x6e, 0x50, 0x6f, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x65, 0x61, 0x72, 0x64, 0x5f, 0x70,
	0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x68, 0x65, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x76, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65,
	0x65, 0x6e, 0x5f, 0x76, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x65, 0x6e, 0x56, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73,
	0x65, 0x6c, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x46,
	0x72, 0x6f, 0x6d, 0x53, 0x65, 0x6c, 0x66, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6e, 0x67, 0x6c, 0x65,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x6c, 0x66, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x66, 0x6f,
	0x72, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x6e, 0x69, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x47, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6f, 0x64, 0x79, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x62, 0x6f, 0x64, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x14, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x62, 0x6f,
	0x64, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x66, 0x61, 0x63, 0x65, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x66, 0x61, 0x63, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x54, 0x6f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4b, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12,
	0x24, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x61, 0x6c,
	0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x46, 0x72, 0x6f,
	0x6d, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x28, 0x0a,
	0x10, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x65, 0x70,
	0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x61,
	0x63, 0x68, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x74, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x54, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x22, 0xe6, 0x0c, 0x0a, 0x04, 0x53, 0x65, 0x6c, 0x66, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32,
	0x44, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0d, 0x73,
	0x65, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0c, 0x73, 0x65, 0x65, 0x6e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x72, 0x64, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x32, 0x44, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x38, 0x0a, 0x0d, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0c,
	0x73, 0x65, 0x65, 0x6e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x65,
	0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x73, 0x65, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x68, 0x65, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x72, 0x64, 0x50,
	0x6f, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x76, 0x65, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65,
	0x65, 0x6e, 0x56, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x73,
	0x69, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x67, 0x6f, 0x61,
	0x6c, 0x69, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x47, 0x6f, 0x61,
	0x6c, 0x69, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x62, 0x6f, 0x64,
	0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6f,
	0x64, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x62, 0x6f, 0x64, 0x79, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x66, 0x61, 0x63, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x66, 0x61, 0x63, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74,
	0x6f, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x4b, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x64,
	0x69, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61, 0x6c,
	0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x62, 0x61, 0x6c, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x61, 0x6e, 0x67, 0x6c,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x6c,
	0x6c, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x61, 0x63, 0x68, 0x53, 0x74,
	0x65, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x69,
	0x6e, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x54, 0x61, 0x63, 0x6b,
	0x6c, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x6e, 0x65, 0x63, 0x6b, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e,
	0x65, 0x63, 0x6b, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6b, 0x69, 0x63,
	0x6b, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4b,
	0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x10, 0x63, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x11, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x6f, 0x75, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x66,
	0x6f, 0x75, 0x6c, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x30,
	0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x69, 0x63,
	0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6b, 0x69,
	0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x5f, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x26, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x73, 0x74,
	0x61, 0x6d, 0x69, 0x6e, 0x61, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a,
	0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x63,
	0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x22, 0x8c, 0x03, 0x0a, 0x0d, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74,
	0x75, 0x72, 0x6e, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x73, 0x68,
	0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x61,
	0x73, 0x68, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x73, 0x68, 0x5f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x64, 0x61, 0x73,
	0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x73, 0x68, 0x5f, 0x64,
	0x69, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x64, 0x61, 0x73, 0x68, 0x44, 0x69,
	0x72, 0x12, 0x43, 0x0a, 0x13, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x32, 0x44, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6d,
	0x69, 0x6e, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xad, 0x04, 0x0a, 0x0e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x65, 0x6c, 0x66, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x61, 0x63,
	0x68, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x63, 0x68, 0x53, 0x74,
	0x65, 0x70, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x63, 0x68, 0x53, 0x74, 0x65,
	0x70, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4f, 0x70, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12,
	0x3d, 0x0a, 0x1b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4f, 0x70, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x54, 0x65,
	0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6f,
	0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x45, 0x0a, 0x13, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xca, 0x12, 0x0a, 0x0a, 0x57, 0x6f,
	0x72, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x3f, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x72,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x75, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x68, 0x65, 0x69, 0x72, 0x54, 0x65, 0x61,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x6f, 0x75, 0x72, 0x5f, 0x73, 0x69, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x72, 0x53, 0x69, 0x64, 0x65, 0x12, 0x36,
	0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65,
	0x6c, 0x66, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x12, 0x20, 0x0a, 0x04, 0x62, 0x61, 0x6c, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x42, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x62, 0x61, 0x6c, 0x6c, 0x12, 0x2c, 0x0a, 0x09, 0x74, 0x65,
	0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x09, 0x74,
	0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x6f, 0x70, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x70, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x08, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x73, 0x12, 0x50, 0x0a, 0x10, 0x6f, 0x75, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x4f, 0x75, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x44, 0x69, 0x63, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6f, 0x75, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x44, 0x69, 0x63, 0x74, 0x12, 0x56, 0x0a, 0x12, 0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x68, 0x65, 0x69, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x44, 0x69, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x74, 0x68, 0x65, 0x69,
	0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x44, 0x69, 0x63, 0x74, 0x12, 0x39, 0x0a, 0x19,
	0x6f, 0x75, 0x72, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x16, 0x6f, 0x75, 0x72, 0x47, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72,
	0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x68, 0x65, 0x69, 0x72,
	0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x74, 0x68,
	0x65, 0x69, 0x72, 0x47, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x66, 0x66, 0x73, 0x69, 0x64,
	0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x6f, 0x66, 0x66, 0x73, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x58, 0x12, 0x2d, 0x0a, 0x13,
	0x6f, 0x66, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x78, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6f, 0x66, 0x73, 0x69, 0x64,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x58, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6b,
	0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6b, 0x69, 0x63, 0x6b, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x6b, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6b, 0x69, 0x63,
	0x6b, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x64,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4b, 0x69, 0x63, 0x6b, 0x53,
	0x69, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6b, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x4b, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6c, 0x65, 0x66,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6f, 0x75, 0x72, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x4f, 0x75, 0x72, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x29, 0x0a, 0x11, 0x69,
	0x73, 0x5f, 0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x54, 0x68, 0x65, 0x69, 0x72, 0x53,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x70, 0x65, 0x64,
	0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74,
	0x6f, 0x70, 0x65, 0x64, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x75, 0x72,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x6f, 0x75, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x68, 0x65, 0x69, 0x72,
	0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f,
	0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x50, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x4b, 0x69, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x5f, 0x0a, 0x15, 0x68, 0x65,
	0x6c, 0x69, 0x6f, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x65,
	0x6c, 0x69, 0x6f, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x68, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x48, 0x6f,
	0x6d, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x6f,
	0x75, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x78, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6f, 0x75, 0x72, 0x44, 0x65, 0x66, 0x65,
	0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x58, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x68, 0x65, 0x69,
	0x72, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x78,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x68, 0x65, 0x69, 0x72, 0x44, 0x65, 0x66,
	0x65, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x58, 0x12, 0x38, 0x0a, 0x19, 0x6f, 0x75, 0x72,
	0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x78, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x6f, 0x75,
	0x72, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69,
	0x6e, 0x65, 0x58, 0x12, 0x3c, 0x0a, 0x1b, 0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x64, 0x65, 0x66,
	0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x78, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x74, 0x68, 0x65, 0x69, 0x72, 0x44,
	0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65,
	0x58, 0x12, 0x3e, 0x0a, 0x1b, 0x6b, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x6b, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x6b, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x70,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x6b, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65,
	0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x46, 0x0a, 0x12, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x6b, 0x69, 0x63,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x4b, 0x69,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x10, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x4b, 0x69, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x73, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53,
	0x69, 0x64, 0x65, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x64,
	0x65, 0x1a, 0x51, 0x0a, 0x13, 0x4f, 0x75, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x44,
	0x69, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x15, 0x54, 0x68, 0x65, 0x69, 0x72, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x44, 0x69, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5b, 0x0a, 0x18, 0x48, 0x65, 0x6c,
	0x69, 0x6f, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xea, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x45, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x10,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0e, 0x66, 0x75, 0x6c, 0x6c,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x6e, 0x65, 0x65, 0x64, 0x50, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x73, 0x0a, 0x0b, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x4b, 0x0a, 0x04, 0x44, 0x61, 0x73, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x04, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x2d, 0x0a,
	0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x04,
	0x4b, 0x69, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x0a, 0x06, 0x54, 0x61, 0x63,
	0x6b, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x5f,
	0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x4f, 0x72, 0x44, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6f, 0x75, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x6f, 0x75, 0x6c, 0x22, 0x07, 0x0a, 0x05, 0x43, 0x61, 0x74,
	0x63, 0x68, 0x22, 0x22, 0x0a, 0x04, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x22, 0x22, 0x0a, 0x08, 0x54, 0x75, 0x72, 0x6e, 0x4e, 0x65,
	0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3e, 0x0a, 0x0a, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x30, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x57, 0x69, 0x64, 0x74, 0x68, 0x52,
	0x09, 0x76, 0x69, 0x65, 0x77, 0x57, 0x69, 0x64, 0x74, 0x68, 0x22, 0x81, 0x01, 0x0a, 0x0b, 0x42,
	0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x62, 0x61,
	0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0c, 0x62, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0d, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x65, 0x6c,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44,
	0x52, 0x0c, 0x62, 0x61, 0x6c, 0x6c, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x22, 0xf5,
	0x01, 0x0a, 0x0b, 0x50, 0x61, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36,
	0x0a, 0x17, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x32, 0x44, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0c,
	0x62, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0d,
	0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0c, 0x62, 0x61, 0x6c, 0x6c, 0x56, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x22, 0x61, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x75,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6f, 0x75, 0x72, 0x12, 0x25, 0x0a, 0x0e,
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x0d, 0x47, 0x6f,
	0x61, 0x6c, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x67,
	0x6f, 0x61, 0x6c, 0x69, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x67, 0x6f, 0x61, 0x6c,
	0x69, 0x65, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x3c, 0x0a, 0x0f, 0x67, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0e, 0x67,
	0x6f, 0x61, 0x6c, 0x69, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x15, 0x67, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x67, 0x6f,
	0x61, 0x6c, 0x69, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xb0, 0x02, 0x0a, 0x16, 0x47, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x41, 0x6e, 0x64, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x67, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x67, 0x6f, 0x61,
	0x6c, 0x69, 0x65, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x3c, 0x0a, 0x0f, 0x67, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0e,
	0x67, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x15, 0x67, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x67,
	0x6f, 0x61, 0x6c, 0x69, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x32, 0x44, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x0a, 0x12, 0x4f, 0x66, 0x66, 0x73, 0x69, 0x64, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x66,
	0x66, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x58,
	0x22, 0x3a, 0x0a, 0x12, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73,
	0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x58, 0x22, 0x14, 0x0a, 0x12,
	0x57, 0x61, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x2d, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x61, 0x69, 0x74, 0x53, 0x74, 0x65,
	0x70, 0x22, 0x4c, 0x0a, 0x12, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x32, 0x44, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22,
	0x2a, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x22, 0x2d, 0x0a, 0x0f, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x22, 0x43, 0x0a, 0x16, 0x53, 0x74,
	0x61, 0x6d, 0x69, 0x6e, 0x61, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x5f,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f,
	0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22,
	0x69, 0x0a, 0x0e, 0x44, 0x72, 0x69, 0x62, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf9, 0x01, 0x0a, 0x11, 0x42,
	0x61, 0x6c, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x38, 0x0a, 0x0d, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0c, 0x62, 0x61,
	0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0d, 0x62, 0x61,
	0x6c, 0x6c, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0c, 0x62, 0x61, 0x6c, 0x6c, 0x56, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0f, 0x67, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x32, 0x44, 0x52, 0x0e, 0x67, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x13, 0x67, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6a, 0x0a, 0x10, 0x4f, 0x6e, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e,
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xf2, 0x01, 0x0a, 0x10, 0x54, 0x77, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x66,
	0x6f, 0x72, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f,
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x66,
	0x6f, 0x72, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe2, 0x02, 0x0a, 0x12, 0x54, 0x68, 0x72, 0x65,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x3a, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0d, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x3c, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0e,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x14, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x68,
	0x69, 0x72, 0x64, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x3a, 0x0a, 0x0e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0d, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x01, 0x0a,
	0x0b, 0x53, 0x65, 0x6c, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0d,
	0x73, 0x65, 0x6c, 0x66, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x66, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x66, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x73,
	0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x73, 0x65,
	0x6c, 0x66, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x22, 0x90, 0x01, 0x0a, 0x0f, 0x54, 0x65,
	0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x62,
	0x6f, 0x64, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x01, 0x0a,
	0x0f, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72,
	0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6f, 0x64, 0x79,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x62, 0x6f, 0x64, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x93, 0x02, 0x0a, 0x11, 0x42, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32,
	0x44, 0x52, 0x0c, 0x62, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x0d, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0c, 0x62, 0x61, 0x6c,
	0x6c, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x69,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x3c, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x62, 0x6f, 0x64, 0x79, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd9, 0x0c, 0x0a, 0x03, 0x53, 0x61, 0x79, 0x12, 0x38, 0x0a,
	0x0c, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x61, 0x6c,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x61, 0x6c, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x47, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x67, 0x6f,
	0x61, 0x6c, 0x69, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x6f, 0x61, 0x6c,
	0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x6f, 0x61,
	0x6c, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x19, 0x67, 0x6f,
	0x61, 0x6c, 0x69, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x41, 0x6e, 0x64,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x16, 0x67, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x6f, 0x66, 0x66, 0x73, 0x69,
	0x64, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f,
	0x66, 0x66, 0x73, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x12, 0x6f, 0x66, 0x66, 0x73, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x65, 0x6e,
	0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44,
	0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x12, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x77, 0x61, 0x69, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x57,
	0x61, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x12, 0x77, 0x61, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x70, 0x6c, 0x61,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x70,
	0x6c, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x12, 0x70, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x74,
	0x61, 0x6d, 0x69, 0x6e, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x6d, 0x69, 0x6e, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x73,
	0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a,
	0x10, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x5a, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x16, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x41, 0x0a, 0x0f, 0x64, 0x72, 0x69, 0x62, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x44, 0x72, 0x69, 0x62, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x0e, 0x64, 0x72, 0x69, 0x62, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x69,
	0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x47, 0x6f, 0x61,
	0x6c, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x11, 0x62, 0x61,
	0x6c, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x48, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x74, 0x77, 0x6f,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54,
	0x77, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x10, 0x74, 0x77, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x74, 0x68, 0x72, 0x65, 0x65, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x12, 0x74, 0x68, 0x72, 0x65, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a,
	0x10, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x62, 0x61, 0x6c,
	0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x42, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x11, 0x62, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x25, 0x0a, 0x07, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x12, 0x0c, 0x0a, 0x01,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x22, 0x0b, 0x0a, 0x09, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x54, 0x6f, 0x4f, 0x66, 0x22, 0x43, 0x0a, 0x0b, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x69, 0x64, 0x65,
	0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x75, 0x6e, 0x75, 0x6d, 0x22, 0x0f, 0x0a, 0x0d, 0x41, 0x74,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x4f, 0x66, 0x22, 0x4e, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c,
	0x6f, 0x67, 0x67, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x76, 0x0a, 0x08, 0x41,
	0x64, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x29, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x22, 0x9c, 0x01, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12,
	0x29, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x22, 0xce, 0x01, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x41, 0x72, 0x63, 0x12, 0x29, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x06, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x41, 0x6e, 0x67, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x22, 0xa5, 0x01, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x43, 0x69, 0x72, 0x63, 0x6c,
	0x65, 0x12, 0x29, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x06,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32,
	0x44, 0x52, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x22, 0xe9, 0x01, 0x0a, 0x0b,
	0x41, 0x64, 0x64, 0x54, 0x72, 0x69, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x31,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x31, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x32,
	0x12, 0x2b, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x33, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x22, 0xb7, 0x01, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x6c, 0x22, 0x8b, 0x02, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x29, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52,
	0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x72,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x69, 0x6e,
	0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x52,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x61,
	0x6e, 0x67, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x70, 0x61, 0x6e,
	0x41, 0x6e, 0x67, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x22,
	0x98, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xda, 0x03, 0x0a, 0x03, 0x4c,
	0x6f, 0x67, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x64,
	0x64, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x2f, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x61, 0x64, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12,
	0x29, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x5f, 0x61, 0x72, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x72, 0x63,
	0x48, 0x00, 0x52, 0x06, 0x61, 0x64, 0x64, 0x41, 0x72, 0x63, 0x12, 0x32, 0x0a, 0x0a, 0x61, 0x64,
	0x64, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x69, 0x72, 0x63, 0x6c,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x38,
	0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x64,
	0x64, 0x54, 0x72, 0x69, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x64, 0x64,
	0x54, 0x72, 0x69, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f,
	0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x63, 0x74,
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x52, 0x65, 0x63, 0x74,
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x64, 0x64,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x05, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x22, 0x27, 0x0a, 0x0b, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x9d, 0x01, 0x0a, 0x0e, 0x42, 0x6f, 0x64, 0x79, 0x5f, 0x47, 0x6f, 0x54, 0x6f, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61,
	0x78, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x22, 0xba, 0x01, 0x0a, 0x0e, 0x42, 0x6f, 0x64, 0x79, 0x5f, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x4b,
	0x69, 0x63, 0x6b, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x65, 0x70, 0x73, 0x22, 0x3e, 0x0a,
	0x11, 0x42, 0x68, 0x76, 0x5f, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x4f,
	0x66, 0x66, 0x12, 0x29, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x14, 0x0a,
	0x12, 0x42, 0x68, 0x76, 0x5f, 0x42, 0x6f, 0x64, 0x79, 0x4e, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x42,
	0x61, 0x6c, 0x6c, 0x22, 0x40, 0x0a, 0x13, 0x42, 0x68, 0x76, 0x5f, 0x42, 0x6f, 0x64, 0x79, 0x4e,
	0x65, 0x63, 0x6b, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x05,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x42, 0x68, 0x76, 0x5f, 0x45, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xa4, 0x01, 0x0a, 0x15, 0x42, 0x68, 0x76, 0x5f, 0x47,
	0x6f, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x42, 0x61, 0x6c, 0x6c,
	0x12, 0x36, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x64,
	0x61, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x31, 0x0a,
	0x12, 0x42, 0x68, 0x76, 0x5f, 0x4e, 0x65, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x6f, 0x42,
	0x61, 0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x75, 0x66,
	0x22, 0x5d, 0x0a, 0x13, 0x42, 0x68, 0x76, 0x5f, 0x4e, 0x65, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79,
	0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x05, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x75, 0x66, 0x22,
	0x0f, 0x0a, 0x0d, 0x42, 0x68, 0x76, 0x5f, 0x53, 0x63, 0x61, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x22, 0x12, 0x0a, 0x10, 0x42, 0x6f, 0x64, 0x79, 0x5f, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x42, 0x61, 0x6c, 0x6c, 0x22, 0x10, 0x0a, 0x0e, 0x42, 0x6f, 0x64, 0x79, 0x5f, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x42, 0x61, 0x6c, 0x6c, 0x22, 0xc9, 0x01, 0x0a, 0x0c, 0x42, 0x6f, 0x64, 0x79, 0x5f,
	0x44, 0x72, 0x69, 0x62, 0x62, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x32, 0x44, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x2d, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x64, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x64, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x6f, 0x64, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x6f, 0x64,
	0x67, 0x65, 0x22, 0x6c, 0x0a, 0x13, 0x42, 0x6f, 0x64, 0x79, 0x5f, 0x47, 0x6f, 0x54, 0x6f, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x44, 0x6f, 0x64, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x32, 0x44, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x64, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x22, 0xaa, 0x01, 0x0a, 0x0d, 0x42, 0x6f, 0x64, 0x79, 0x5f, 0x48, 0x6f, 0x6c, 0x64, 0x42, 0x61,
	0x6c, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x6f, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x6f, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x3f, 0x0a, 0x11, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0f, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x11,
	0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0f, 0x6b, 0x69,
	0x63, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x69, 0x0a,
	0x0e, 0x42, 0x6f, 0x64, 0x79, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x61, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x0a, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x09, 0x66,
	0x61, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x10, 0x42, 0x6f, 0x64,
	0x79, 0x5f, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x36, 0x0a,
	0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x42, 0x6f, 0x64, 0x79, 0x5f, 0x53, 0x74,
	0x6f, 0x70, 0x42, 0x61, 0x6c, 0x6c, 0x22, 0x34, 0x0a, 0x0d, 0x42, 0x6f, 0x64, 0x79, 0x5f, 0x53,
	0x74, 0x6f, 0x70, 0x44, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x61, 0x76, 0x65, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x73, 0x61, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x22, 0x92, 0x01, 0x0a,
	0x12, 0x42, 0x6f, 0x64, 0x79, 0x5f, 0x54, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x54, 0x6f, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6d,
	0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x22, 0x28, 0x0a, 0x10, 0x42, 0x6f, 0x64, 0x79, 0x5f, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f,
	0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x22, 0x27, 0x0a, 0x0f, 0x42,
	0x6f, 0x64, 0x79, 0x5f, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x22, 0x60, 0x0a, 0x10, 0x42, 0x6f, 0x64, 0x79, 0x5f, 0x54, 0x75, 0x72,
	0x6e, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x32, 0x44, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x22, 0x4b, 0x0a, 0x11, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x5f,
	0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x22, 0x0d, 0x0a, 0x0b, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x22, 0x10, 0x0a, 0x0e, 0x4e, 0x65, 0x63, 0x6b, 0x5f, 0x53, 0x63, 0x61, 0x6e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x4e, 0x65, 0x63, 0x6b, 0x5f, 0x53, 0x63, 0x61,
	0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x18, 0x4e, 0x65, 0x63,
	0x6b, 0x5f, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x42, 0x61, 0x6c, 0x6c, 0x41, 0x6e, 0x64, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x69, 0x64,
	0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x40, 0x0a, 0x15, 0x4e, 0x65, 0x63, 0x6b, 0x5f,
	0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x42, 0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x53, 0x63, 0x61, 0x6e,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x11, 0x0a, 0x0f, 0x4e, 0x65, 0x63,
	0x6b, 0x5f, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x42, 0x61, 0x6c, 0x6c, 0x22, 0x42, 0x0a, 0x17,
	0x4e, 0x65, 0x63, 0x6b, 0x5f, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x47, 0x6f, 0x61, 0x6c, 0x69,
	0x65, 0x4f, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x22, 0x1c, 0x0a, 0x1a, 0x4e, 0x65, 0x63, 0x6b, 0x5f, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x4c,
	0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x22, 0x8b,
	0x01, 0x0a, 0x17, 0x4e, 0x65, 0x63, 0x6b, 0x5f, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x69,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x4a, 0x0a, 0x10,
	0x4e, 0x65, 0x63, 0x6b, 0x5f, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x36, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x2b, 0x0a, 0x13, 0x4e, 0x65, 0x63, 0x6b,
	0x5f, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x22, 0x44, 0x0a, 0x10, 0x56, 0x69, 0x65, 0x77, 0x5f, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x0a, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x57, 0x69, 0x64, 0x74, 0x68, 0x22, 0x0d, 0x0a, 0x0b, 0x56,
	0x69, 0x65, 0x77, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x22, 0x0c, 0x0a, 0x0a, 0x56, 0x69,
	0x65, 0x77, 0x5f, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x22, 0x0b, 0x0a, 0x09, 0x56, 0x69, 0x65, 0x77,
	0x5f, 0x57, 0x69, 0x64, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x48, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x47,
	0x6f, 0x61, 0x6c, 0x69, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x48, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x47,
	0x6f, 0x61, 0x6c, 0x69, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x48, 0x65, 0x6c,
	0x69, 0x6f, 0x73, 0x47, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x22, 0x0d, 0x0a,
	0x0b, 0x48, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x22, 0xf4, 0x02, 0x0a,
	0x16, 0x48, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x4f, 0x66, 0x66, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x64,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x65, 0x61,
	0x64, 0x50, 0x61, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x50, 0x61, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x5f, 0x64, 0x72, 0x69, 0x62, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x72, 0x69, 0x62, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x64, 0x72, 0x69, 0x62, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x72, 0x69, 0x62, 0x62, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x64, 0x72, 0x69, 0x62, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x72, 0x69, 0x62, 0x62, 0x6c, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x6f,
	0x74, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x65,
	0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x44, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x48, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x4f, 0x66, 0x66, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x48,
	0x65, 0x6c, 0x69, 0x6f, 0x73, 0x42, 0x61, 0x73, 0x69, 0x63, 0x4d, 0x6f, 0x76, 0x65, 0x22, 0x0f,
	0x0a, 0x0d, 0x48, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x22,
	0x0f, 0x0a, 0x0d, 0x48, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x22, 0x14, 0x0a, 0x12, 0x48, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x69, 0x6f, 0x6e, 0x22, 0x11, 0x0a, 0x0f, 0x62, 0x68, 0x76, 0x5f, 0x64, 0x6f,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x22, 0x18, 0x0a, 0x16, 0x62, 0x68, 0x76,
	0x5f, 0x64, 0x6f, 0x48, 0x65, 0x61, 0x72, 0x64, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x63, 0x69,
	0x65, 0x76, 0x65, 0x22, 0xe3, 0x22, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x61, 0x73, 0x68,
	0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x75, 0x72, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x54, 0x75, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x22, 0x0a, 0x04,
	0x6b, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x6b, 0x69, 0x63, 0x6b,
	0x12, 0x28, 0x0a, 0x06, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x61, 0x63, 0x6b, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x06, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x63, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x05, 0x63, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x22, 0x0a, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6e, 0x65,
	0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x54, 0x75, 0x72, 0x6e, 0x4e, 0x65, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x74, 0x75,
	0x72, 0x6e, 0x4e, 0x65, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x69, 0x65, 0x77, 0x48,
	0x00, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1f, 0x0a,
	0x03, 0x73, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x53, 0x61, 0x79, 0x48, 0x00, 0x52, 0x03, 0x73, 0x61, 0x79, 0x12, 0x2c,
	0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54,
	0x6f, 0x48, 0x00, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x12, 0x33, 0x0a, 0x0b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x6f, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x54, 0x6f, 0x4f, 0x66, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x4f,
	0x66, 0x12, 0x38, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x48, 0x00, 0x52, 0x0b,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x12, 0x3f, 0x0a, 0x0f, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x6f, 0x66, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x74,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x4f, 0x66, 0x48, 0x00, 0x52, 0x0d, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x4f, 0x66, 0x12, 0x1f, 0x0a, 0x03,
	0x6c, 0x6f, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x38, 0x0a,
	0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x10, 0x62, 0x6f, 0x64, 0x79, 0x5f,
	0x67, 0x6f, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x5f,
	0x47, 0x6f, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x6f, 0x64,
	0x79, 0x47, 0x6f, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0f, 0x62, 0x6f,
	0x64, 0x79, 0x5f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x6f, 0x64,
	0x79, 0x5f, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x4b, 0x69, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0d, 0x62,
	0x6f, 0x64, 0x79, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x4a, 0x0a, 0x13,
	0x62, 0x68, 0x76, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x5f,
	0x6f, 0x66, 0x66, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x42, 0x68, 0x76, 0x5f, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4b, 0x69, 0x63,
	0x6b, 0x4f, 0x66, 0x66, 0x48, 0x00, 0x52, 0x10, 0x62, 0x68, 0x76, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x12, 0x4e, 0x0a, 0x15, 0x62, 0x68, 0x76, 0x5f,
	0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6e, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x61, 0x6c,
	0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x42, 0x68, 0x76, 0x5f, 0x42, 0x6f, 0x64, 0x79, 0x4e, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x42,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x62, 0x68, 0x76, 0x42, 0x6f, 0x64, 0x79, 0x4e, 0x65,
	0x63, 0x6b, 0x54, 0x6f, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x51, 0x0a, 0x16, 0x62, 0x68, 0x76, 0x5f,
	0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6e, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x42, 0x68, 0x76, 0x5f, 0x42, 0x6f, 0x64, 0x79, 0x4e, 0x65, 0x63, 0x6b, 0x54, 0x6f,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x62, 0x68, 0x76, 0x42, 0x6f, 0x64, 0x79,
	0x4e, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x62,
	0x68, 0x76, 0x5f, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x68, 0x76, 0x5f,
	0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x68, 0x76,
	0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x58, 0x0a, 0x19, 0x62, 0x68, 0x76,
	0x5f, 0x67, 0x6f, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x6f,
	0x6b, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x68, 0x76, 0x5f, 0x47, 0x6f, 0x54, 0x6f, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x42, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x14, 0x62,
	0x68, 0x76, 0x47, 0x6f, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x42,
	0x61, 0x6c, 0x6c, 0x12, 0x4e, 0x0a, 0x15, 0x62, 0x68, 0x76, 0x5f, 0x6e, 0x65, 0x63, 0x6b, 0x5f,
	0x62, 0x6f, 0x64, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x68, 0x76, 0x5f,
	0x4e, 0x65, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x6f, 0x42, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x11, 0x62, 0x68, 0x76, 0x4e, 0x65, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x6f, 0x42,
	0x61, 0x6c, 0x6c, 0x12, 0x51, 0x0a, 0x16, 0x62, 0x68, 0x76, 0x5f, 0x6e, 0x65, 0x63, 0x6b, 0x5f,
	0x62, 0x6f, 0x64, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x68, 0x76,
	0x5f, 0x4e, 0x65, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x12, 0x62, 0x68, 0x76, 0x4e, 0x65, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x54,
	0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x62, 0x68, 0x76, 0x5f, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x68, 0x76, 0x5f, 0x53, 0x63, 0x61, 0x6e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x68, 0x76, 0x53, 0x63, 0x61, 0x6e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x46, 0x0a, 0x11, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x61, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x5f, 0x41,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x6f,
	0x64, 0x79, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x40, 0x0a,
	0x0f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x62, 0x61, 0x6c, 0x6c,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x42, 0x6f, 0x64, 0x79, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x42, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x0d, 0x62, 0x6f, 0x64, 0x79, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x42, 0x61, 0x6c, 0x6c, 0x12,
	0x39, 0x0a, 0x0c, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x64, 0x72, 0x69, 0x62, 0x62, 0x6c, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42,
	0x6f, 0x64, 0x79, 0x5f, 0x44, 0x72, 0x69, 0x62, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x62,
	0x6f, 0x64, 0x79, 0x44, 0x72, 0x69, 0x62, 0x62, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x16, 0x62, 0x6f,
	0x64, 0x79, 0x5f, 0x67, 0x6f, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x64,
	0x6f, 0x64, 0x67, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x5f, 0x47, 0x6f, 0x54, 0x6f, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x44, 0x6f, 0x64, 0x67, 0x65, 0x48, 0x00, 0x52, 0x12, 0x62, 0x6f, 0x64, 0x79, 0x47,
	0x6f, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x6f, 0x64, 0x67, 0x65, 0x12, 0x3d, 0x0a,
	0x0e, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42,
	0x6f, 0x64, 0x79, 0x5f, 0x48, 0x6f, 0x6c, 0x64, 0x42, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0c,
	0x62, 0x6f, 0x64, 0x79, 0x48, 0x6f, 0x6c, 0x64, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x3f, 0x0a, 0x0e,
	0x62, 0x6f, 0x64, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x6f,
	0x64, 0x79, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0d,
	0x62, 0x6f, 0x64, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x12, 0x47, 0x0a,
	0x12, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x5f, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x6e, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x6f, 0x64, 0x79, 0x4b, 0x69, 0x63, 0x6b, 0x4f,
	0x6e, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x3d, 0x0a, 0x0e, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73,
	0x74, 0x6f, 0x70, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x5f, 0x53, 0x74, 0x6f,
	0x70, 0x42, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x74, 0x6f,
	0x70, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x3d, 0x0a, 0x0e, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x74,
	0x6f, 0x70, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x5f, 0x53, 0x74, 0x6f, 0x70,
	0x44, 0x61, 0x73, 0x68, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x74, 0x6f, 0x70,
	0x44, 0x61, 0x73, 0x68, 0x12, 0x4d, 0x0a, 0x14, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x74, 0x61, 0x63,
	0x6b, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x6f, 0x64, 0x79,
	0x5f, 0x54, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x11, 0x62, 0x6f, 0x64, 0x79, 0x54, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x54, 0x6f, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x12, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x5f, 0x54, 0x75,
	0x72, 0x6e, 0x54, 0x6f, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x6f, 0x64,
	0x79, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x11,
	0x62, 0x6f, 0x64, 0x79, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x61, 0x6c,
	0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x42, 0x6f, 0x64, 0x79, 0x5f, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x42, 0x61, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x0e, 0x62, 0x6f, 0x64, 0x79, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x42, 0x61,
	0x6c, 0x6c, 0x12, 0x47, 0x0a, 0x12, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x5f, 0x54, 0x75, 0x72,
	0x6e, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x6f, 0x64, 0x79,
	0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x13, 0x66,
	0x6f, 0x63, 0x75, 0x73, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x4d, 0x6f, 0x76, 0x65,
	0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x66, 0x6f, 0x63, 0x75, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12,
	0x40, 0x0a, 0x0f, 0x6e, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x4e, 0x65, 0x63, 0x6b, 0x5f, 0x53, 0x63, 0x61, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x48, 0x00, 0x52, 0x0d, 0x6e, 0x65, 0x63, 0x6b, 0x53, 0x63, 0x61, 0x6e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x46, 0x0a, 0x11, 0x6e, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x65, 0x63, 0x6b, 0x5f, 0x53, 0x63, 0x61, 0x6e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x65, 0x63, 0x6b, 0x53, 0x63,
	0x61, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x61, 0x0a, 0x1c, 0x6e, 0x65, 0x63,
	0x6b, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x65, 0x63, 0x6b, 0x5f, 0x54, 0x75,
	0x72, 0x6e, 0x54, 0x6f, 0x42, 0x61, 0x6c, 0x6c, 0x41, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x17, 0x6e, 0x65, 0x63, 0x6b, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x42,
	0x61, 0x6c, 0x6c, 0x41, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x19,
	0x6e, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x61, 0x6c,
	0x6c, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x65, 0x63, 0x6b, 0x5f, 0x54, 0x75,
	0x72, 0x6e, 0x54, 0x6f, 0x42, 0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x48, 0x00,
	0x52, 0x14, 0x6e, 0x65, 0x63, 0x6b, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x42, 0x61, 0x6c, 0x6c,
	0x4f, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x44, 0x0a, 0x11, 0x6e, 0x65, 0x63, 0x6b, 0x5f, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x65, 0x63, 0x6b, 0x5f,
	0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x42, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x6e, 0x65,
	0x63, 0x6b, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x5e, 0x0a, 0x1b,
	0x6e, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x67, 0x6f, 0x61,
	0x6c, 0x69, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x65, 0x63, 0x6b, 0x5f,
	0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x47, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x4f, 0x72, 0x53, 0x63,
	0x61, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x6e, 0x65, 0x63, 0x6b, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f,
	0x47, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x4f, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x67, 0x0a, 0x1e,
	0x6e, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x6f, 0x77,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x65,
	0x63, 0x6b, 0x5f, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x4c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66,
	0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x19, 0x6e, 0x65, 0x63, 0x6b,
	0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x4c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x54, 0x65, 0x61,
	0x6d, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x1b, 0x6e, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x5f,
	0x73, 0x63, 0x61, 0x6e, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x65, 0x63, 0x6b, 0x5f, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x6e,
	0x65, 0x63, 0x6b, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f,
	0x72, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x47, 0x0a, 0x12, 0x6e, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x31, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x65, 0x63, 0x6b, 0x5f,
	0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6e,
	0x65, 0x63, 0x6b, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x50,
	0x0a, 0x15, 0x6e, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x65, 0x63, 0x6b, 0x5f, 0x54, 0x75, 0x72, 0x6e,
	0x54, 0x6f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x12, 0x6e, 0x65,
	0x63, 0x6b, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x46, 0x0a, 0x11, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x48, 0x00, 0x52, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x5f, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x12, 0x33, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x56, 0x69,
	0x65, 0x77, 0x5f, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x48, 0x00, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77,
	0x53, 0x79, 0x6e, 0x63, 0x68, 0x12, 0x30, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x77, 0x69,
	0x64, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x5f, 0x57, 0x69, 0x64, 0x65, 0x48, 0x00, 0x52, 0x08, 0x76,
	0x69, 0x65, 0x77, 0x57, 0x69, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x68, 0x65, 0x6c, 0x69, 0x6f,
	0x73, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x47, 0x6f,
	0x61, 0x6c, 0x69, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x68, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x47, 0x6f,
	0x61, 0x6c, 0x69, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x68, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x5f, 0x67,
	0x6f, 0x61, 0x6c, 0x69, 0x65, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48, 0x65, 0x6c, 0x69, 0x6f, 0x73,
	0x47, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x10, 0x68, 0x65,
	0x6c, 0x69, 0x6f, 0x73, 0x47, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x48,
	0x0a, 0x12, 0x68, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x5f,
	0x6b, 0x69, 0x63, 0x6b, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x48, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x47, 0x6f, 0x61, 0x6c, 0x69, 0x65,
	0x4b, 0x69, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x10, 0x68, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x47, 0x6f,
	0x61, 0x6c, 0x69, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x38, 0x0a, 0x0c, 0x68, 0x65, 0x6c, 0x69,
	0x6f, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x53, 0x68,
	0x6f, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x68, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x53, 0x68, 0x6f,
	0x6f, 0x74, 0x12, 0x5a, 0x0a, 0x18, 0x68, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x5f, 0x6f, 0x66, 0x66,
	0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x3b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48, 0x65,
	0x6c, 0x69, 0x6f, 0x73, 0x4f, 0x66, 0x66, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x48, 0x00, 0x52, 0x16, 0x68, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x4f, 0x66,
	0x66, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x54,
	0x0a, 0x16, 0x68, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x6f,
	0x66, 0x66, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x4f, 0x66, 0x66, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x14,
	0x68, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x42, 0x61, 0x73, 0x69, 0x63, 0x4f, 0x66, 0x66, 0x65, 0x6e,
	0x73, 0x69, 0x76, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x68, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x5f, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x4d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x68, 0x65, 0x6c, 0x69,
	0x6f, 0x73, 0x42, 0x61, 0x73, 0x69, 0x63, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x68,
	0x65, 0x6c, 0x69, 0x6f, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x3e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48, 0x65,
	0x6c, 0x69, 0x6f, 0x73, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x68,
	0x65, 0x6c, 0x69, 0x6f, 0x73, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x0e,
	0x68, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x3f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48, 0x65,
	0x6c, 0x69, 0x6f, 0x73, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x68,
	0x65, 0x6c, 0x69, 0x6f, 0x73, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x14,
	0x68, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x48, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x68, 0x65, 0x6c, 0x69, 0x6f, 0x73,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a,
	0x11, 0x62, 0x68, 0x76, 0x5f, 0x64, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x69,
	0x63, 0x6b, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x62, 0x68, 0x76, 0x5f, 0x64, 0x6f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x63,
	0x6b, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x68, 0x76, 0x44, 0x6f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4b,
	0x69, 0x63, 0x6b, 0x12, 0x5a, 0x0a, 0x19, 0x62, 0x68, 0x76, 0x5f, 0x64, 0x6f, 0x5f, 0x68, 0x65,
	0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x65, 0x76, 0x65,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x62, 0x68, 0x76, 0x5f, 0x64, 0x6f, 0x48, 0x65, 0x61, 0x72, 0x64, 0x50, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x63, 0x69, 0x65, 0x76, 0x65, 0x48, 0x00, 0x52, 0x15, 0x62, 0x68, 0x76, 0x44, 0x6f, 0x48,
	0x65, 0x61, 0x72, 0x64, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x63, 0x69, 0x65, 0x76, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd8, 0x01, 0x0a, 0x0d, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x50, 0x72,
	0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x5f, 0x64, 0x6f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6b, 0x69, 0x63, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x6f, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x6b, 0x69, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x19, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x5f, 0x64, 0x6f, 0x48, 0x65, 0x61, 0x72, 0x64, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x63,
	0x69, 0x65, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x44, 0x6f, 0x48, 0x65, 0x61, 0x72, 0x64, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x63,
	0x69, 0x65, 0x76, 0x65, 0x22, 0x4d, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x6f, 0x48, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x6f, 0x48,
	0x65, 0x6c, 0x69, 0x6f, 0x73, 0x53, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x22, 0x91, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x11, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x4e, 0x0a, 0x14, 0x64, 0x6f, 0x5f, 0x68, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x6f, 0x48, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x12, 0x64, 0x6f, 0x48,
	0x65, 0x6c, 0x69, 0x6f, 0x73, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x12,
	0x5c, 0x0a, 0x1a, 0x64, 0x6f, 0x5f, 0x68, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x5f, 0x73, 0x61, 0x79,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x6f, 0x48,
	0x65, 0x6c, 0x69, 0x6f, 0x73, 0x53, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x48, 0x00, 0x52, 0x16, 0x64, 0x6f, 0x48, 0x65, 0x6c, 0x69, 0x6f, 0x73, 0x53,
	0x61, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x08, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x61, 0x63, 0x68,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x0b, 0x0a, 0x09, 0x44, 0x6f, 0x4b, 0x69, 0x63, 0x6b,
	0x4f, 0x66, 0x66, 0x22, 0x6e, 0x0a, 0x0a, 0x44, 0x6f, 0x4d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x6c,
	0x6c, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70,
	0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x22, 0xa8, 0x01, 0x0a, 0x0c, 0x44, 0x6f, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x75, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x75, 0x72, 0x53, 0x69, 0x64, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6f, 0x64, 0x79, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x62, 0x6f, 0x64, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0b,
	0x0a, 0x09, 0x44, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x22, 0x6c, 0x0a, 0x0c, 0x44,
	0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53,
	0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x22, 0x6a, 0x0a, 0x12, 0x44, 0x6f, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x75, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x6f, 0x75, 0x72, 0x53, 0x69, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e,
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x87, 0x03, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0b, 0x64, 0x6f, 0x5f, 0x6b, 0x69,
	0x63, 0x6b, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x6f, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x48,
	0x00, 0x52, 0x09, 0x64, 0x6f, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x12, 0x36, 0x0a, 0x0c,
	0x64, 0x6f, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x6f, 0x4d, 0x6f,
	0x76, 0x65, 0x42, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x6f, 0x4d, 0x6f, 0x76, 0x65,
	0x42, 0x61, 0x6c, 0x6c, 0x12, 0x3c, 0x0a, 0x0e, 0x64, 0x6f, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x6f, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x6f, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x32, 0x0a, 0x0a, 0x64, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x44, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x64, 0x6f, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0e, 0x64, 0x6f, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x15, 0x64, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x6f, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x12, 0x64, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x41, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2f, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xce, 0x48, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x45, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x65,
	0x72, 0x74, 0x69, 0x61, 0x5f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x69, 0x6e, 0x65, 0x72, 0x74, 0x69, 0x61, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x61,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x65, 0x63, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72,
	0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x61, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x4d, 0x61, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x4d, 0x61, 0x78, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x4d, 0x61, 0x78, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x5f, 0x69, 0x6e, 0x63, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e,
	0x61, 0x49, 0x6e, 0x63, 0x4d, 0x61, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x5f, 0x74, 0x68, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x63, 0x54,
	0x68, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x69,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x4d, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64,
	0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x44, 0x65, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x6e, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x5f,
	0x64, 0x65, 0x63, 0x5f, 0x74, 0x68, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x65,
	0x66, 0x66, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x63, 0x54, 0x68, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x66, 0x66, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x66,
	0x66, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x63, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x66, 0x66,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x5f, 0x74, 0x68, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0c, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x63, 0x54, 0x68, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x63, 0x12, 0x1b,
	0x0a, 0x09, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x6b, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x69,
	0x73, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x63,
	0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x61, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x12, 0x2f, 0x0a, 0x14,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x61, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x12, 0x2b, 0x0a,
	0x12, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6b, 0x69, 0x63, 0x6b, 0x52,
	0x61, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x12, 0x2b, 0x0a, 0x12, 0x6b, 0x69,
	0x63, 0x6b, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x72,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6b, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x64,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6c, 0x6c, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x6c,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x63,
	0x61, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x62, 0x61, 0x6c, 0x6c, 0x44, 0x65,
	0x63, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x64,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x61, 0x6c, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x62, 0x61, 0x6c, 0x6c, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61, 0x6c, 0x6c, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x20, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x62, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x4d, 0x61, 0x78, 0x12, 0x26, 0x0a,
	0x0f, 0x64, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x64, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x6b, 0x69, 0x63, 0x6b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x6b, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6b, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x5f,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x25, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x27, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78,
	0x5f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d,
	0x61, 0x78, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f,
	0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x69,
	0x6e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x6e,
	0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x6d, 0x61, 0x78, 0x4e, 0x65, 0x63, 0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x4e, 0x65, 0x63,
	0x6b, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x6e,
	0x65, 0x63, 0x6b, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x6d, 0x61, 0x78, 0x4e, 0x65, 0x63, 0x6b, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x65, 0x63, 0x6b, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x4e, 0x65, 0x63, 0x6b, 0x41, 0x6e,
	0x67, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x69, 0x6e, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x77, 0x69, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x69, 0x63,
	0x6b, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x34, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x6b, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x20,
	0x0a, 0x0c, 0x63, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6c, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x63, 0x68, 0x41, 0x72, 0x65, 0x61, 0x4c,
	0x12, 0x20, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x77,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x63, 0x68, 0x41, 0x72, 0x65,
	0x61, 0x57, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x37, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x63,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x28, 0x0a, 0x10, 0x67, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x6f,
	0x76, 0x65, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x6f, 0x61, 0x6c, 0x69,
	0x65, 0x4d, 0x61, 0x78, 0x4d, 0x6f, 0x76, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x72,
	0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18,
	0x39, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x4b, 0x69, 0x63,
	0x6b, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x6f, 0x66, 0x66, 0x73, 0x69,
	0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x6f, 0x66, 0x66, 0x73, 0x69,
	0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x72, 0x65, 0x61, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x3b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x6e, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x75, 0x73, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x5f, 0x73,
	0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x53, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x61, 0x78, 0x12, 0x2b, 0x0a, 0x12, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x5f, 0x73, 0x61,
	0x79, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x53, 0x61, 0x79, 0x4d, 0x73, 0x67, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x6e, 0x67,
	0x57, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x61, 0x6e, 0x67,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x40, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x6e, 0x67, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x57, 0x69,
	0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x77, 0x69, 0x6e, 0x18, 0x41, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x6e, 0x67,
	0x4d, 0x65, 0x74, 0x61, 0x57, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x61, 0x6e, 0x67,
	0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x42, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x6e, 0x67, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x57, 0x69,
	0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x77, 0x69, 0x6e, 0x18, 0x43, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x57, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x61, 0x6e, 0x67,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x44, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x63, 0x6c, 0x61, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x43, 0x79, 0x63,
	0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x61, 0x6c, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x18, 0x47, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x48, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x53,
	0x74, 0x65, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x73, 0x74, 0x65, 0x70,
	0x18, 0x49, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x63, 0x76, 0x53, 0x74, 0x65, 0x70,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x73, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x53, 0x74, 0x65, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x63, 0x6d, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x63, 0x6d, 0x53,
	0x74, 0x65, 0x70, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x61,
	0x79, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x61, 0x79, 0x4d, 0x73, 0x67, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x61,
	0x72, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x18, 0x4e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x49,
	0x6e, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x61,
	0x72, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x79, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x44, 0x65, 0x63, 0x61, 0x79, 0x12, 0x26,
	0x0a, 0x0f, 0x63, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x61, 0x6e, 0x5f, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x61, 0x74, 0x63, 0x68, 0x42, 0x61,
	0x6e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x64,
	0x6f, 0x77, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x51, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x73, 0x6c, 0x6f, 0x77, 0x44, 0x6f, 0x77, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x69, 0x64, 0x65, 0x18,
	0x52, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x69, 0x64,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x69, 0x64, 0x65, 0x18, 0x53, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6b, 0x69, 0x63, 0x6b,
	0x6f, 0x66, 0x66, 0x4f, 0x66, 0x66, 0x73, 0x69, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x66,
	0x66, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x18, 0x54, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6f, 0x66, 0x66, 0x73, 0x69, 0x64, 0x65,
	0x4b, 0x69, 0x63, 0x6b, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x63, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x18, 0x55, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x75, 0x74, 0x44, 0x69, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a,
	0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x56, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x64, 0x69,
	0x73, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x3d,
	0x0a, 0x1b, 0x6c, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x5f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x57, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x18, 0x6c, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x44, 0x69, 0x73,
	0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x2a, 0x0a,
	0x11, 0x64, 0x69, 0x72, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x58, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x64, 0x69, 0x72, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x69, 0x73,
	0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f,
	0x6c, 0x18, 0x59, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x64, 0x69, 0x73, 0x74, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x65, 0x70, 0x4c, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x69,
	0x73, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70,
	0x5f, 0x72, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x64, 0x69, 0x73, 0x74, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x12, 0x40, 0x0a, 0x1d, 0x6c,
	0x61, 0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x6c, 0x18, 0x5b, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x19, 0x6c, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x44, 0x69, 0x73, 0x74,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x65, 0x70, 0x4c, 0x12, 0x40, 0x0a,
	0x1d, 0x6c, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x72, 0x18, 0x5c,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x6c, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x44, 0x69,
	0x73, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x12,
	0x2d, 0x0a, 0x13, 0x64, 0x69, 0x72, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x65, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x5f, 0x6c, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x64, 0x69,
	0x72, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x65, 0x70, 0x4c, 0x12, 0x2d,
	0x0a, 0x13, 0x64, 0x69, 0x72, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x65, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x5f, 0x72, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x64, 0x69, 0x72,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x5f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x17,
	0x63, 0x6f, 0x61, 0x63, 0x68, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x60, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63,
	0x6f, 0x61, 0x63, 0x68, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x63,
	0x6f, 0x61, 0x63, 0x68, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x18, 0x61, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x75, 0x73, 0x65, 0x4f, 0x6c, 0x64, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x48, 0x65, 0x61, 0x72,
	0x12, 0x3f, 0x0a, 0x1d, 0x73, 0x6c, 0x6f, 0x77, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x6e, 0x5f,
	0x74, 0x6f, 0x70, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x18, 0x62, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x73, 0x6c, 0x6f, 0x77, 0x6e, 0x65, 0x73,
	0x73, 0x4f, 0x6e, 0x54, 0x6f, 0x70, 0x46, 0x6f, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x12, 0x41, 0x0a, 0x1e, 0x73, 0x6c, 0x6f, 0x77, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x6e,
	0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x18, 0x63, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x73, 0x6c, 0x6f, 0x77, 0x6e,
	0x65, 0x73, 0x73, 0x4f, 0x6e, 0x54, 0x6f, 0x70, 0x46, 0x6f, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x67, 0x6f,
	0x61, 0x6c, 0x5f, 0x6c, 0x18, 0x64, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x47, 0x6f, 0x61, 0x6c, 0x4c, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x72, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6c, 0x6c,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x18, 0x66, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66,
	0x75, 0x6c, 0x6c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6c,
	0x6c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x18, 0x67, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x66, 0x75, 0x6c, 0x6c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x68, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x42, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x69,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x6a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x5f, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73,
	0x79, 0x6e, 0x63, 0x68, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x20,
	0x0a, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x61, 0x6e, 0x18, 0x6c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x42, 0x61, 0x6e,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x54, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x6f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x61, 0x63, 0x68,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x70, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x71, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x2b, 0x0a, 0x12, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x69,
	0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x72, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x61,
	0x63, 0x68, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x69, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x74,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x73,
	0x18, 0x75, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x18, 0x76, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x18, 0x77, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x78, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x69,
	0x72, 0x18, 0x79, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x6f, 0x67,
	0x44, 0x69, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x64, 0x69, 0x72, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x4c,
	0x6f, 0x67, 0x44, 0x69, 0x72, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x7b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x7c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x78, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x75, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x12, 0x2b, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x73,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x78, 0x65, 0x64, 0x12, 0x2b, 0x0a,
	0x12, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73,
	0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x81, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x82,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x84, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x6f, 0x67, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x4c,
	0x6f, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x86, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x18, 0x87,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x44, 0x69, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x74, 0x61,
	0x63, 0x6b, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x89, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x28, 0x0a, 0x0f, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x74, 0x61, 0x63, 0x6b,
	0x6c, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61,
	0x63, 0x6b, 0x6c, 0x65, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x8b, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x74, 0x61,
	0x63, 0x6b, 0x6c, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a,
	0x14, 0x66, 0x72, 0x65, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x66, 0x72,
	0x65, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x57, 0x61, 0x69, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x31, 0x0a, 0x14, 0x66, 0x72, 0x65, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x66, 0x72, 0x65, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6b, 0x69, 0x63, 0x6b,
	0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x66, 0x72, 0x65, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x90, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x5f,
	0x6b, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x47, 0x6f, 0x61, 0x6c, 0x4b, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x65,
	0x6c, 0x18, 0x92, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x42, 0x61, 0x6c, 0x6c, 0x56, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f,
	0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x47, 0x6f, 0x61, 0x6c, 0x4b, 0x69, 0x63, 0x6b, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x5f, 0x77, 0x69, 0x6e,
	0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6c, 0x61, 0x6e, 0x67, 0x44, 0x65,
	0x6c, 0x57, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63,
	0x6c, 0x61, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x57, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x61, 0x75, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x69, 0x63,
	0x6b, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6b, 0x69, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x57, 0x61, 0x69, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x98,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x57, 0x61,
	0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x77, 0x61, 0x69, 0x74, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x61, 0x6d,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x57, 0x61, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x9b, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x77, 0x61,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x77, 0x61,
	0x79, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0e, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x77, 0x61, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x26, 0x0a, 0x0e, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x77,
	0x61, 0x79, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x6b, 0x65, 0x65, 0x70, 0x61,
	0x77, 0x61, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x9f, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x77, 0x61, 0x79, 0x4c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x77, 0x61, 0x79, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6b, 0x65, 0x65, 0x70, 0x61, 0x77, 0x61, 0x79, 0x4c, 0x6f, 0x67, 0x44, 0x69, 0x72, 0x12, 0x36,
	0x0a, 0x17, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x77, 0x61, 0x79, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x77,
	0x61, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x18, 0xa2, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x77, 0x61, 0x79, 0x4c, 0x6f, 0x67,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x77, 0x61,
	0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0xa3, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x77, 0x61, 0x79, 0x4c, 0x6f, 0x67, 0x44,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x77, 0x61, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6b,
	0x65, 0x65, 0x70, 0x61, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x6e, 0x72, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x73, 0x18,
	0xa5, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x48, 0x61, 0x6c, 0x66, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x73, 0x18, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x6e, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x48, 0x61, 0x6c, 0x66, 0x73, 0x12, 0x2d, 0x0a, 0x12,
	0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x5f, 0x6f, 0x75,
	0x74, 0x73, 0x18, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x70,
	0x65, 0x6e, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f,
	0x77, 0x61, 0x69, 0x74, 0x18, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x65, 0x6e,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x57, 0x61, 0x69, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x77, 0x61, 0x69,
	0x74, 0x18, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x57, 0x61, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x6e, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x57, 0x61, 0x69, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18,
	0xab, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x54, 0x61, 0x6b, 0x65, 0x6e,
	0x57, 0x61, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x6e, 0x5f, 0x6e, 0x72, 0x5f, 0x6b,
	0x69, 0x63, 0x6b, 0x73, 0x18, 0xac, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x65, 0x6e,
	0x4e, 0x72, 0x4b, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x65, 0x6e, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x73, 0x18, 0xad,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x65, 0x6e, 0x4d, 0x61, 0x78, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x4b, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x65, 0x6e, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x5f, 0x78, 0x18, 0xae, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x65,
	0x6e, 0x44, 0x69, 0x73, 0x74, 0x58, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x65, 0x6e, 0x5f, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0xaf, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x70, 0x65, 0x6e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x57, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x73, 0x18, 0xb0, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x70, 0x65, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x75, 0x6c, 0x74,
	0x4b, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x78, 0x18, 0xb1,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x70, 0x65, 0x6e, 0x4d, 0x61, 0x78, 0x47, 0x6f, 0x61,
	0x6c, 0x69, 0x65, 0x44, 0x69, 0x73, 0x74, 0x58, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x65, 0x6e, 0x5f,
	0x63, 0x6f, 0x61, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x18, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x70, 0x65, 0x6e, 0x43,
	0x6f, 0x61, 0x63, 0x68, 0x4d, 0x6f, 0x76, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x18, 0xb3,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x69, 0x72,
	0x12, 0x27, 0x0a, 0x0f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x75, 0x63, 0x6b, 0x5f, 0x61,
	0x72, 0x65, 0x61, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x62, 0x61, 0x6c, 0x6c,
	0x53, 0x74, 0x75, 0x63, 0x6b, 0x41, 0x72, 0x65, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x61,
	0x63, 0x68, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0xb5, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x4d, 0x73, 0x67, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x61, 0x78,
	0x54, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x6d,
	0x61, 0x78, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6d, 0x61, 0x78,
	0x42, 0x61, 0x63, 0x6b, 0x54, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x4d, 0x69,
	0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x69,
	0x6e, 0x61, 0x18, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x79, 0x6e, 0x63, 0x68,
	0x5f, 0x73, 0x65, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0xba, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x53, 0x65, 0x65, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x68, 0x61, 0x6c, 0x66,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x48, 0x61, 0x6c, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73,
	0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18,
	0xbc, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x64,
	0x61, 0x73, 0x68, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x73, 0x68, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65,
	0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x44, 0x61, 0x73, 0x68,
	0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x6e,
	0x67, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x64, 0x61, 0x73, 0x68, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x69, 0x64, 0x65, 0x44, 0x61, 0x73,
	0x68, 0x52, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x61,
	0x73, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x62, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x6d, 0x61, 0x78, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xc2,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x73, 0x68, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x5f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x69,
	0x6e, 0x44, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x61,
	0x63, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x65, 0x52,
	0x61, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x17, 0x66, 0x6f, 0x75,
	0x6c, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0xc5, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x66, 0x6f, 0x75,
	0x6c, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x18, 0xc6, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x66, 0x6f, 0x75, 0x6c,
	0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x75, 0x6c,
	0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x66, 0x6f, 0x75, 0x6c, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x6f,
	0x6c, 0x64, 0x65, 0x6e, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x14,
	0x72, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x72, 0x65, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x39, 0x0a, 0x18, 0x69, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e,
	0x73, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xca, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x16, 0x69, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x44, 0x65, 0x66, 0x65, 0x6e,
	0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x16, 0x69, 0x6c,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x69, 0x6c, 0x6c,
	0x65, 0x67, 0x61, 0x6c, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x66,
	0x65, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x78, 0x18, 0xcc, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x13, 0x69, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x44, 0x65, 0x66, 0x65, 0x6e,
	0x73, 0x65, 0x44, 0x69, 0x73, 0x74, 0x58, 0x12, 0x33, 0x0a, 0x15, 0x69, 0x6c, 0x6c, 0x65, 0x67,
	0x61, 0x6c, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x69, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c,
	0x18, 0xce, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x78, 0x65, 0x64, 0x54, 0x65,
	0x61, 0x6d, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x18, 0xcf, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x78, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x61,
	0x78, 0x43, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d,
	0x69, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0xd1,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x43, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x6e, 0x67, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73,
	0x65, 0x65, 0x64, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6b,
	0x69, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x6c, 0x6f, 0x6e, 0x67, 0x4b, 0x69, 0x63,
	0x6b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f,
	0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0xd4, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6c, 0x6f, 0x6e, 0x67, 0x4b, 0x69, 0x63, 0x6b,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x73, 0x18, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x74,
	0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0xd6, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x63, 0x61, 0x74, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x65,
	0x61, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0xd7, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x6c,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x69, 0x74, 0x63,
	0x68, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0xd8, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x48, 0x61, 0x6c, 0x66, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x68,
	0x61, 0x6c, 0x66, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0xd9, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x70, 0x69, 0x74, 0x63, 0x68, 0x48, 0x61, 0x6c, 0x66, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x35, 0x0a, 0x17, 0x6f, 0x75, 0x72, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x78, 0x18, 0xda, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x13, 0x6f, 0x75, 0x72, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x41, 0x72,
	0x65, 0x61, 0x4c, 0x69, 0x6e, 0x65, 0x58, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x68, 0x65, 0x69, 0x72,
	0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x78, 0x18, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x74, 0x68, 0x65,
	0x69, 0x72, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x69, 0x6e,
	0x65, 0x58, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0xdc, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x41, 0x72, 0x65,
	0x61, 0x48, 0x61, 0x6c, 0x66, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x67,
	0x6f, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0xde, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x67, 0x6f, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x67,
	0x6f, 0x61, 0x6c, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0xdf,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x67, 0x6f, 0x61, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0e, 0x67, 0x6f, 0x61, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65,
	0x5f, 0x72, 0x18, 0xe1, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x6f, 0x61, 0x6c,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0xe2, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x67, 0x6f, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x22, 0xa3, 0x0d, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x45, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x74, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x74, 0x4d, 0x61, 0x78, 0x12,
	0x35, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d,
	0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x61, 0x78, 0x12, 0x3e,
	0x0a, 0x1c, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x5f, 0x69, 0x6e, 0x63, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x49, 0x6e, 0x63,
	0x4d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x33,
	0x0a, 0x16, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x79, 0x5f, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x63, 0x61, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x4d, 0x69, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x63, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x63, 0x61, 0x79,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x61, 0x78, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x6e, 0x65, 0x72,
	0x74, 0x69, 0x61, 0x5f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x69,
	0x6e, 0x65, 0x72, 0x74, 0x69, 0x61, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x19, 0x64, 0x61, 0x73, 0x68, 0x5f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x64, 0x61, 0x73, 0x68,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x69,
	0x6e, 0x12, 0x38, 0x0a, 0x19, 0x64, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x64, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x61, 0x78, 0x12, 0x37, 0x0a, 0x18, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x19, 0x6b, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x6d, 0x69,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x6b, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x69, 0x6e, 0x12,
	0x39, 0x0a, 0x19, 0x6b, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x16, 0x6b, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x61, 0x78, 0x12, 0x33, 0x0a, 0x16, 0x6b, 0x69,
	0x63, 0x6b, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x6b, 0x69, 0x63, 0x6b,
	0x52, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x35, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61,
	0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x14, 0x65, 0x78, 0x74, 0x72, 0x61, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x4d, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x65, 0x78, 0x74, 0x72, 0x61, 0x53, 0x74,
	0x61, 0x6d, 0x69, 0x6e, 0x61, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x61, 0x78, 0x12, 0x35, 0x0a,
	0x17, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14,
	0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x6e,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x1d,
	0x6e, 0x65, 0x77, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x18, 0x6e, 0x65, 0x77, 0x44, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x69, 0x6e, 0x12, 0x3f, 0x0a,
	0x1d, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x6e, 0x65, 0x77, 0x44, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x61, 0x78, 0x12, 0x45,
	0x0a, 0x20, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x5f, 0x69, 0x6e,
	0x63, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61,
	0x6d, 0x69, 0x6e, 0x61, 0x49, 0x6e, 0x63, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x19, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x6d,
	0x69, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x6b, 0x69, 0x63, 0x6b, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x69, 0x6e, 0x12,
	0x38, 0x0a, 0x19, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x15, 0x6b, 0x69, 0x63, 0x6b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x61, 0x78, 0x12, 0x4e, 0x0a, 0x24, 0x66, 0x6f, 0x75,
	0x6c, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x20, 0x66, 0x6f, 0x75, 0x6c, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x1c, 0x63, 0x61, 0x74,
	0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6c, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x18, 0x63, 0x61, 0x74, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x53,
	0x74, 0x72, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x1c, 0x63, 0x61, 0x74,
	0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6c, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x18, 0x63, 0x61, 0x74, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x53,
	0x74, 0x72, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x78, 0x22, 0x82, 0x0c, 0x0a, 0x0a, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x5f, 0x69, 0x6e, 0x63, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e,
	0x61, 0x49, 0x6e, 0x63, 0x4d, 0x61, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x63, 0x61, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x65, 0x72, 0x74, 0x69, 0x61, 0x5f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x69, 0x6e, 0x65, 0x72, 0x74, 0x69, 0x61, 0x4d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x64, 0x61, 0x73, 0x68,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x69,
	0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x6b, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x6e, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6b, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e,
	0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x53, 0x74,
	0x61, 0x6d, 0x69, 0x6e, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x65, 0x66, 0x66, 0x6f, 0x72,
	0x74, 0x4d, 0x61, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x5f, 0x6d,
	0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74,
	0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6b, 0x69,
	0x63, 0x6b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x66,
	0x6f, 0x75, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x66, 0x6f,
	0x75, 0x6c, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x61, 0x74, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x74, 0x63, 0x68, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x63, 0x61, 0x74, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x72, 0x65, 0x61, 0x4c, 0x53, 0x74, 0x72, 0x65, 0x74, 0x63, 0x68, 0x12, 0x26, 0x0a, 0x0f,
	0x75, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x75, 0x6e, 0x75, 0x6d, 0x46, 0x61, 0x72, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x13, 0x75, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x6f,
	0x5f, 0x66, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x10, 0x75, 0x6e, 0x75, 0x6d, 0x54, 0x6f, 0x6f, 0x46, 0x61, 0x72, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x66, 0x61, 0x72, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x65,
	0x61, 0x6d, 0x46, 0x61, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x13, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x74, 0x6f, 0x6f, 0x5f, 0x66, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x6f,
	0x6f, 0x46, 0x61, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x41, 0x0a, 0x1d, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2d, 0x0a,
	0x13, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x65, 0x6c, 0x5f, 0x66, 0x61, 0x72, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x62, 0x61, 0x6c, 0x6c,
	0x56, 0x65, 0x6c, 0x46, 0x61, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x17,
	0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x6f, 0x5f, 0x66, 0x61, 0x72,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x62,
	0x61, 0x6c, 0x6c, 0x56, 0x65, 0x6c, 0x54, 0x6f, 0x6f, 0x46, 0x61, 0x72, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x62, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x78,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x2d, 0x0a, 0x13, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x63, 0x68, 0x67, 0x5f, 0x66, 0x61,
	0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10,
	0x66, 0x6c, 0x61, 0x67, 0x43, 0x68, 0x67, 0x46, 0x61, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x34, 0x0a, 0x17, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x63, 0x68, 0x67, 0x5f, 0x74, 0x6f, 0x6f,
	0x5f, 0x66, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x13, 0x66, 0x6c, 0x61, 0x67, 0x43, 0x68, 0x67, 0x54, 0x6f, 0x6f, 0x46, 0x61, 0x72,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x1b, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x66, 0x6c, 0x61,
	0x67, 0x4d, 0x61, 0x78, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6b, 0x69,
	0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65,
	0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x72, 0x65, 0x6c,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x74, 0x63, 0x68, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10,
	0x6d, 0x61, 0x78, 0x43, 0x61, 0x74, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x6c, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x32, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x61,
	0x78, 0x32, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x5f, 0x6d, 0x61, 0x78, 0x32, 0x18, 0x20, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x72, 0x65, 0x61,
	0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x32, 0x12, 0x38, 0x0a, 0x19, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x61, 0x63, 0x68, 0x4d, 0x61, 0x78, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x22, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x22, 0x82,
	0x05, 0x0a, 0x14, 0x52, 0x70, 0x63, 0x43, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x75,
	0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x55, 0x6e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x75, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x55, 0x6e, 0x75, 0x6d, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32,
	0x44, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42,
	0x61, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x4d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x64, 0x61,
	0x73, 0x68, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x39,
	0x0a, 0x19, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x16, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x61, 0x73, 0x68, 0x41, 0x6e, 0x67, 0x6c,
	0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6b, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x64, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0xa8, 0x02, 0x0a, 0x0f, 0x52, 0x70, 0x63, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x62, 0x61, 0x6c, 0x6c, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x75, 0x6d,
	0x12, 0x38, 0x0a, 0x0d, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x52, 0x70, 0x63, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0c, 0x62, 0x61,
	0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0d, 0x62, 0x61,
	0x6c, 0x6c, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x0c, 0x62, 0x61, 0x6c, 0x6c, 0x56, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x12, 0x6f, 0x75, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x65,
	0x6e, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x6f, 0x75, 0x72, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x58, 0x12, 0x2b, 0x0a, 0x12, 0x6f, 0x75, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6f,
	0x75, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x58, 0x22, 0xa4,
	0x01, 0x0a, 0x0e, 0x52, 0x70, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x43, 0x6f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x02, 0x0a, 0x18, 0x42, 0x65, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x45, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x69,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0x50, 0x0a, 0x0a, 0x50, 0x61, 0x69, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70, 0x63, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x31, 0x0a, 0x19, 0x42, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x2a,
	0x2d, 0x0a, 0x09, 0x56, 0x69, 0x65, 0x77, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x49, 0x44, 0x45, 0x10, 0x02, 0x2a, 0x7b,
	0x0a, 0x15, 0x52, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x50, 0x59, 0x54, 0x68, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x41, 0x56,
	0x41, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x50, 0x50, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x53, 0x48, 0x41, 0x52, 0x50, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x55, 0x42, 0x59,
	0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x41, 0x56, 0x45, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x10, 0x06, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x4f, 0x10, 0x07, 0x2a, 0x28, 0x0a, 0x04, 0x53,
	0x69, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x49,
	0x47, 0x48, 0x54, 0x10, 0x02, 0x2a, 0xb2, 0x02, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f, 0x6e, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x57, 0x4f, 0x52, 0x4c, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x43, 0x45, 0x50, 0x54,
	0x10, 0x10, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x49, 0x43, 0x4b, 0x10, 0x20, 0x12, 0x08, 0x0a, 0x04,
	0x48, 0x4f, 0x4c, 0x44, 0x10, 0x40, 0x12, 0x0c, 0x0a, 0x07, 0x44, 0x52, 0x49, 0x42, 0x42, 0x4c,
	0x45, 0x10, 0x80, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x50, 0x41, 0x53, 0x53, 0x10, 0x80, 0x02, 0x12,
	0x0a, 0x0a, 0x05, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x10, 0x80, 0x04, 0x12, 0x0a, 0x0a, 0x05, 0x53,
	0x48, 0x4f, 0x4f, 0x54, 0x10, 0x80, 0x08, 0x12, 0x0a, 0x0a, 0x05, 0x43, 0x4c, 0x45, 0x41, 0x52,
	0x10, 0x80, 0x10, 0x12, 0x0a, 0x0a, 0x05, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x80, 0x20, 0x12,
	0x09, 0x0a, 0x04, 0x4d, 0x41, 0x52, 0x4b, 0x10, 0x80, 0x40, 0x12, 0x11, 0x0a, 0x0b, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x80, 0x80, 0x01, 0x12, 0x0a, 0x0a,
	0x04, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x80, 0x80, 0x02, 0x12, 0x0a, 0x0a, 0x04, 0x54, 0x45, 0x41,
	0x4d, 0x10, 0x80, 0x80, 0x04, 0x12, 0x13, 0x0a, 0x0d, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x80, 0x80, 0x08, 0x12, 0x0e, 0x0a, 0x08, 0x41, 0x4e,
	0x41, 0x4c, 0x59, 0x5a, 0x45, 0x52, 0x10, 0x80, 0x80, 0x10, 0x12, 0x12, 0x0a, 0x0c, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x10, 0x80, 0x80, 0x20, 0x12, 0x0a,
	0x0a, 0x04, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x80, 0x80, 0x40, 0x2a, 0x2c, 0x0a, 0x08, 0x43, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12,
	0x07, 0x0a, 0x03, 0x52, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x76, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x1d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x44, 0x41, 0x53, 0x48, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52,
	0x44, 0x5f, 0x44, 0x41, 0x53, 0x48, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x55, 0x52, 0x4e,
	0x5f, 0x42, 0x41, 0x43, 0x4b, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x44, 0x41, 0x53, 0x48, 0x10, 0x03,
	0x2a, 0xbb, 0x04, 0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x4f,
	0x66, 0x66, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x4f, 0x6e, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x5f, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x4b, 0x69, 0x63, 0x6b, 0x49, 0x6e, 0x5f, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x72, 0x65,
	0x65, 0x4b, 0x69, 0x63, 0x6b, 0x5f, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f, 0x72, 0x6e,
	0x65, 0x72, 0x4b, 0x69, 0x63, 0x6b, 0x5f, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x6f, 0x61,
	0x6c, 0x4b, 0x69, 0x63, 0x6b, 0x5f, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x47, 0x6f, 0x61, 0x6c, 0x5f, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x66, 0x66, 0x53,
	0x69, 0x64, 0x65, 0x5f, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x4b, 0x69, 0x63, 0x6b, 0x5f, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x48, 0x61, 0x6c, 0x66, 0x4f, 0x76, 0x65, 0x72, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x10,
	0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x6f, 0x75, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x6f, 0x75, 0x6c, 0x50, 0x75, 0x73, 0x68, 0x5f, 0x10,
	0x0f, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x6f, 0x75, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c,
	0x46, 0x6f, 0x75, 0x6c, 0x42, 0x61, 0x6c, 0x6c, 0x4f, 0x75, 0x74, 0x5f, 0x10, 0x11, 0x12, 0x0d,
	0x0a, 0x09, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x5f, 0x10, 0x12, 0x12, 0x12, 0x0a,
	0x0e, 0x46, 0x72, 0x65, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x10,
	0x13, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x61, 0x74, 0x63, 0x68, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6e, 0x64, 0x46, 0x72, 0x65, 0x65, 0x4b, 0x69, 0x63,
	0x6b, 0x5f, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x53,
	0x65, 0x74, 0x75, 0x70, 0x5f, 0x10, 0x16, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x52, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x10, 0x17, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x10, 0x18, 0x12, 0x10, 0x0a,
	0x0c, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x4d, 0x69, 0x73, 0x73, 0x5f, 0x10, 0x19, 0x12,
	0x11, 0x0a, 0x0d, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x10, 0x1a, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x44, 0x65, 0x66,
	0x65, 0x6e, 0x73, 0x65, 0x5f, 0x10, 0x1b, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x4f, 0x6e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x10, 0x1c, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x46, 0x6f, 0x75, 0x6c, 0x5f, 0x10, 0x1d, 0x12, 0x10,
	0x0a, 0x0c, 0x47, 0x6f, 0x61, 0x6c, 0x69, 0x65, 0x43, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x10, 0x1e,
	0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x48, 0x61, 0x6c, 0x66, 0x10, 0x1f,
	0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x20, 0x2a, 0x32,
	0x0a, 0x09, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6f, 0x61, 0x63,
	0x68, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54,
	0x10, 0x02, 0x2a, 0x77, 0x0a, 0x11, 0x52, 0x70, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x43, 0x5f, 0x48, 0x6f,
	0x6c, 0x64, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x43, 0x5f, 0x44, 0x72, 0x69, 0x62, 0x62,
	0x6c, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x43, 0x5f, 0x50, 0x61, 0x73, 0x73, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x5f, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x43, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x43, 0x5f, 0x4d, 0x6f, 0x76, 0x65, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43,
	0x5f, 0x4e, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x32, 0xfb, 0x04, 0x0a, 0x04,
	0x47, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00,
	0x12, 0x38, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x61, 0x63,
	0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64,
	0x49, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x38, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x10, 0x53,
	0x65, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x08,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a,
	0x0e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x79, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x42, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x65, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x65,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x3b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_service_proto_rawDescOnce sync.Once
	file_service_proto_rawDescData = file_service_proto_rawDesc
)

func file_service_proto_rawDescGZIP() []byte {
	file_service_proto_rawDescOnce.Do(func() {
		file_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_proto_rawDescData)
	})
	return file_service_proto_rawDescData
}

var file_service_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_service_proto_msgTypes = make([]protoimpl.MessageInfo, 137)
var file_service_proto_goTypes = []any{
	(ViewWidth)(0),                     // 0: protos.ViewWidth
	(RpcServerLanguageType)(0),         // 1: protos.RpcServerLanguageType
	(Side)(0),                          // 2: protos.Side
	(LoggerLevel)(0),                   // 3: protos.LoggerLevel
	(CardType)(0),                      // 4: protos.CardType
	(InterceptActionType)(0),           // 5: protos.InterceptActionType
	(GameModeType)(0),                  // 6: protos.GameModeType
	(AgentType)(0),                     // 7: protos.AgentType
	(RpcActionCategory)(0),             // 8: protos.RpcActionCategory
	(*RpcVector2D)(nil),                // 9: protos.RpcVector2D
	(*RegisterRequest)(nil),            // 10: protos.RegisterRequest
	(*RegisterResponse)(nil),           // 11: protos.RegisterResponse
	(*Ball)(nil),                       // 12: protos.Ball
	(*PenaltyKickState)(nil),           // 13: protos.PenaltyKickState
	(*Player)(nil),                     // 14: protos.Player
	(*Self)(nil),                       // 15: protos.Self
	(*InterceptInfo)(nil),              // 16: protos.InterceptInfo
	(*InterceptTable)(nil),             // 17: protos.InterceptTable
	(*WorldModel)(nil),                 // 18: protos.WorldModel
	(*State)(nil),                      // 19: protos.State
	(*InitMessage)(nil),                // 20: protos.InitMessage
	(*Dash)(nil),                       // 21: protos.Dash
	(*Turn)(nil),                       // 22: protos.Turn
	(*Kick)(nil),                       // 23: protos.Kick
	(*Tackle)(nil),                     // 24: protos.Tackle
	(*Catch)(nil),                      // 25: protos.Catch
	(*Move)(nil),                       // 26: protos.Move
	(*TurnNeck)(nil),                   // 27: protos.TurnNeck
	(*ChangeView)(nil),                 // 28: protos.ChangeView
	(*BallMessage)(nil),                // 29: protos.BallMessage
	(*PassMessage)(nil),                // 30: protos.PassMessage
	(*InterceptMessage)(nil),           // 31: protos.InterceptMessage
	(*GoalieMessage)(nil),              // 32: protos.GoalieMessage
	(*GoalieAndPlayerMessage)(nil),     // 33: protos.GoalieAndPlayerMessage
	(*OffsideLineMessage)(nil),         // 34: protos.OffsideLineMessage
	(*DefenseLineMessage)(nil),         // 35: protos.DefenseLineMessage
	(*WaitRequestMessage)(nil),         // 36: protos.WaitRequestMessage
	(*SetplayMessage)(nil),             // 37: protos.SetplayMessage
	(*PassRequestMessage)(nil),         // 38: protos.PassRequestMessage
	(*StaminaMessage)(nil),             // 39: protos.StaminaMessage
	(*RecoveryMessage)(nil),            // 40: protos.RecoveryMessage
	(*StaminaCapacityMessage)(nil),     // 41: protos.StaminaCapacityMessage
	(*DribbleMessage)(nil),             // 42: protos.DribbleMessage
	(*BallGoalieMessage)(nil),          // 43: protos.BallGoalieMessage
	(*OnePlayerMessage)(nil),           // 44: protos.OnePlayerMessage
	(*TwoPlayerMessage)(nil),           // 45: protos.TwoPlayerMessage
	(*ThreePlayerMessage)(nil),         // 46: protos.ThreePlayerMessage
	(*SelfMessage)(nil),                // 47: protos.SelfMessage
	(*TeammateMessage)(nil),            // 48: protos.TeammateMessage
	(*OpponentMessage)(nil),            // 49: protos.OpponentMessage
	(*BallPlayerMessage)(nil),          // 50: protos.BallPlayerMessage
	(*Say)(nil),                        // 51: protos.Say
	(*PointTo)(nil),                    // 52: protos.PointTo
	(*PointToOf)(nil),                  // 53: protos.PointToOf
	(*AttentionTo)(nil),                // 54: protos.AttentionTo
	(*AttentionToOf)(nil),              // 55: protos.AttentionToOf
	(*AddText)(nil),                    // 56: protos.AddText
	(*AddPoint)(nil),                   // 57: protos.AddPoint
	(*AddLine)(nil),                    // 58: protos.AddLine
	(*AddArc)(nil),                     // 59: protos.AddArc
	(*AddCircle)(nil),                  // 60: protos.AddCircle
	(*AddTriangle)(nil),                // 61: protos.AddTriangle
	(*AddRectangle)(nil),               // 62: protos.AddRectangle
	(*AddSector)(nil),                  // 63: protos.AddSector
	(*AddMessage)(nil),                 // 64: protos.AddMessage
	(*Log)(nil),                        // 65: protos.Log
	(*DebugClient)(nil),                // 66: protos.DebugClient
	(*Body_GoToPoint)(nil),             // 67: protos.Body_GoToPoint
	(*Body_SmartKick)(nil),             // 68: protos.Body_SmartKick
	(*Bhv_BeforeKickOff)(nil),          // 69: protos.Bhv_BeforeKickOff
	(*Bhv_BodyNeckToBall)(nil),         // 70: protos.Bhv_BodyNeckToBall
	(*Bhv_BodyNeckToPoint)(nil),        // 71: protos.Bhv_BodyNeckToPoint
	(*Bhv_Emergency)(nil),              // 72: protos.Bhv_Emergency
	(*Bhv_GoToPointLookBall)(nil),      // 73: protos.Bhv_GoToPointLookBall
	(*Bhv_NeckBodyToBall)(nil),         // 74: protos.Bhv_NeckBodyToBall
	(*Bhv_NeckBodyToPoint)(nil),        // 75: protos.Bhv_NeckBodyToPoint
	(*Bhv_ScanField)(nil),              // 76: protos.Bhv_ScanField
	(*Body_AdvanceBall)(nil),           // 77: protos.Body_AdvanceBall
	(*Body_ClearBall)(nil),             // 78: protos.Body_ClearBall
	(*Body_Dribble)(nil),               // 79: protos.Body_Dribble
	(*Body_GoToPointDodge)(nil),        // 80: protos.Body_GoToPointDodge
	(*Body_HoldBall)(nil),              // 81: protos.Body_HoldBall
	(*Body_Intercept)(nil),             // 82: protos.Body_Intercept
	(*Body_KickOneStep)(nil),           // 83: protos.Body_KickOneStep
	(*Body_StopBall)(nil),              // 84: protos.Body_StopBall
	(*Body_StopDash)(nil),              // 85: protos.Body_StopDash
	(*Body_TackleToPoint)(nil),         // 86: protos.Body_TackleToPoint
	(*Body_TurnToAngle)(nil),           // 87: protos.Body_TurnToAngle
	(*Body_TurnToBall)(nil),            // 88: protos.Body_TurnToBall
	(*Body_TurnToPoint)(nil),           // 89: protos.Body_TurnToPoint
	(*Focus_MoveToPoint)(nil),          // 90: protos.Focus_MoveToPoint
	(*Focus_Reset)(nil),                // 91: protos.Focus_Reset
	(*Neck_ScanField)(nil),             // 92: protos.Neck_ScanField
	(*Neck_ScanPlayers)(nil),           // 93: protos.Neck_ScanPlayers
	(*Neck_TurnToBallAndPlayer)(nil),   // 94: protos.Neck_TurnToBallAndPlayer
	(*Neck_TurnToBallOrScan)(nil),      // 95: protos.Neck_TurnToBallOrScan
	(*Neck_TurnToBall)(nil),            // 96: protos.Neck_TurnToBall
	(*Neck_TurnToGoalieOrScan)(nil),    // 97: protos.Neck_TurnToGoalieOrScan
	(*Neck_TurnToLowConfTeammate)(nil), // 98: protos.Neck_TurnToLowConfTeammate
	(*Neck_TurnToPlayerOrScan)(nil),    // 99: protos.Neck_TurnToPlayerOrScan
	(*Neck_TurnToPoint)(nil),           // 100: protos.Neck_TurnToPoint
	(*Neck_TurnToRelative)(nil),        // 101: protos.Neck_TurnToRelative
	(*View_ChangeWidth)(nil),           // 102: protos.View_ChangeWidth
	(*View_Normal)(nil),                // 103: protos.View_Normal
	(*View_Synch)(nil),                 // 104: protos.View_Synch
	(*View_Wide)(nil),                  // 105: protos.View_Wide
	(*HeliosGoalie)(nil),               // 106: protos.HeliosGoalie
	(*HeliosGoalieMove)(nil),           // 107: protos.HeliosGoalieMove
	(*HeliosGoalieKick)(nil),           // 108: protos.HeliosGoalieKick
	(*HeliosShoot)(nil),                // 109: protos.HeliosShoot
	(*HeliosOffensivePlanner)(nil),     // 110: protos.HeliosOffensivePlanner
	(*HeliosBasicOffensive)(nil),       // 111: protos.HeliosBasicOffensive
	(*HeliosBasicMove)(nil),            // 112: protos.HeliosBasicMove
	(*HeliosSetPlay)(nil),              // 113: protos.HeliosSetPlay
	(*HeliosPenalty)(nil),              // 114: protos.HeliosPenalty
	(*HeliosCommunicaion)(nil),         // 115: protos.HeliosCommunicaion
	(*BhvDoForceKick)(nil),             // 116: protos.bhv_doForceKick
	(*BhvDoHeardPassRecieve)(nil),      // 117: protos.bhv_doHeardPassRecieve
	(*PlayerAction)(nil),               // 118: protos.PlayerAction
	(*PlayerActions)(nil),              // 119: protos.PlayerActions
	(*ChangePlayerType)(nil),           // 120: protos.ChangePlayerType
	(*DoHeliosSubstitute)(nil),         // 121: protos.DoHeliosSubstitute
	(*DoHeliosSayPlayerTypes)(nil),     // 122: protos.DoHeliosSayPlayerTypes
	(*CoachAction)(nil),                // 123: protos.CoachAction
	(*CoachActions)(nil),               // 124: protos.CoachActions
	(*DoKickOff)(nil),                  // 125: protos.DoKickOff
	(*DoMoveBall)(nil),                 // 126: protos.DoMoveBall
	(*DoMovePlayer)(nil),               // 127: protos.DoMovePlayer
	(*DoRecover)(nil),                  // 128: protos.DoRecover
	(*DoChangeMode)(nil),               // 129: protos.DoChangeMode
	(*DoChangePlayerType)(nil),         // 130: protos.DoChangePlayerType
	(*TrainerAction)(nil),              // 131: protos.TrainerAction
	(*TrainerActions)(nil),             // 132: protos.TrainerActions
	(*ServerParam)(nil),                // 133: protos.ServerParam
	(*PlayerParam)(nil),                // 134: protos.PlayerParam
	(*PlayerType)(nil),                 // 135: protos.PlayerType
	(*RpcCooperativeAction)(nil),       // 136: protos.RpcCooperativeAction
	(*RpcPredictState)(nil),            // 137: protos.RpcPredictState
	(*RpcActionState)(nil),             // 138: protos.RpcActionState
	(*BestPlannerActionRequest)(nil),   // 139: protos.BestPlannerActionRequest
	(*BestPlannerActionResponse)(nil),  // 140: protos.BestPlannerActionResponse
	(*Empty)(nil),                      // 141: protos.Empty
	nil,                                // 142: protos.WorldModel.OurPlayersDictEntry
	nil,                                // 143: protos.WorldModel.TheirPlayersDictEntry
	nil,                                // 144: protos.WorldModel.HeliosHomePositionsEntry
	nil,                                // 145: protos.BestPlannerActionRequest.PairsEntry
}
var file_service_proto_depIdxs = []int32{
	7,   // 0: protos.RegisterRequest.agent_type:type_name -> protos.AgentType
	7,   // 1: protos.RegisterResponse.agent_type:type_name -> protos.AgentType
	1,   // 2: protos.RegisterResponse.rpc_server_language_type:type_name -> protos.RpcServerLanguageType
	9,   // 3: protos.Ball.position:type_name -> protos.RpcVector2D
	9,   // 4: protos.Ball.relative_position:type_name -> protos.RpcVector2D
	9,   // 5: protos.Ball.seen_position:type_name -> protos.RpcVector2D
	9,   // 6: protos.Ball.heard_position:type_name -> protos.RpcVector2D
	9,   // 7: protos.Ball.velocity:type_name -> protos.RpcVector2D
	9,   // 8: protos.Ball.seen_velocity:type_name -> protos.RpcVector2D
	9,   // 9: protos.Ball.heard_velocity:type_name -> protos.RpcVector2D
	2,   // 10: protos.PenaltyKickState.on_field_side:type_name -> protos.Side
	2,   // 11: protos.PenaltyKickState.current_taker_side:type_name -> protos.Side
	9,   // 12: protos.Player.position:type_name -> protos.RpcVector2D
	9,   // 13: protos.Player.seen_position:type_name -> protos.RpcVector2D
	9,   // 14: protos.Player.heard_position:type_name -> protos.RpcVector2D
	9,   // 15: protos.Player.velocity:type_name -> protos.RpcVector2D
	9,   // 16: protos.Player.seen_velocity:type_name -> protos.RpcVector2D
	2,   // 17: protos.Player.side:type_name -> protos.Side
	9,   // 18: protos.Self.position:type_name -> protos.RpcVector2D
	9,   // 19: protos.Self.seen_position:type_name -> protos.RpcVector2D
	9,   // 20: protos.Self.heard_position:type_name -> protos.RpcVector2D
	9,   // 21: protos.Self.velocity:type_name -> protos.RpcVector2D
	9,   // 22: protos.Self.seen_velocity:type_name -> protos.RpcVector2D
	2,   // 23: protos.Self.side:type_name -> protos.Side
	0,   // 24: protos.Self.view_width:type_name -> protos.ViewWidth
	4,   // 25: protos.Self.card:type_name -> protos.CardType
	5,   // 26: protos.InterceptInfo.action_type:type_name -> protos.InterceptActionType
	9,   // 27: protos.InterceptInfo.final_self_position:type_name -> protos.RpcVector2D
	16,  // 28: protos.InterceptTable.self_intercept_info:type_name -> protos.InterceptInfo
	17,  // 29: protos.WorldModel.intercept_table:type_name -> protos.InterceptTable
	2,   // 30: protos.WorldModel.our_side:type_name -> protos.Side
	15,  // 31: protos.WorldModel.self:type_name -> protos.Self
	12,  // 32: protos.WorldModel.ball:type_name -> protos.Ball
	14,  // 33: protos.WorldModel.teammates:type_name -> protos.Player
	14,  // 34: protos.WorldModel.opponents:type_name -> protos.Player
	14,  // 35: protos.WorldModel.unknowns:type_name -> protos.Player
	142, // 36: protos.WorldModel.our_players_dict:type_name -> protos.WorldModel.OurPlayersDictEntry
	143, // 37: protos.WorldModel.their_players_dict:type_name -> protos.WorldModel.TheirPlayersDictEntry
	2,   // 38: protos.WorldModel.last_kick_side:type_name -> protos.Side
	6,   // 39: protos.WorldModel.game_mode_type:type_name -> protos.GameModeType
	144, // 40: protos.WorldModel.helios_home_positions:type_name -> protos.WorldModel.HeliosHomePositionsEntry
	13,  // 41: protos.WorldModel.penalty_kick_state:type_name -> protos.PenaltyKickState
	2,   // 42: protos.WorldModel.game_mode_side:type_name -> protos.Side
	11,  // 43: protos.State.register_response:type_name -> protos.RegisterResponse
	18,  // 44: protos.State.world_model:type_name -> protos.WorldModel
	18,  // 45: protos.State.full_world_model:type_name -> protos.WorldModel
	11,  // 46: protos.InitMessage.register_response:type_name -> protos.RegisterResponse
	0,   // 47: protos.ChangeView.view_width:type_name -> protos.ViewWidth
	9,   // 48: protos.BallMessage.ball_position:type_name -> protos.RpcVector2D
	9,   // 49: protos.BallMessage.ball_velocity:type_name -> protos.RpcVector2D
	9,   // 50: protos.PassMessage.receiver_point:type_name -> protos.RpcVector2D
	9,   // 51: protos.PassMessage.ball_position:type_name -> protos.RpcVector2D
	9,   // 52: protos.PassMessage.ball_velocity:type_name -> protos.RpcVector2D
	9,   // 53: protos.GoalieMessage.goalie_position:type_name -> protos.RpcVector2D
	9,   // 54: protos.GoalieAndPlayerMessage.goalie_position:type_name -> protos.RpcVector2D
	9,   // 55: protos.GoalieAndPlayerMessage.player_position:type_name -> protos.RpcVector2D
	9,   // 56: protos.PassRequestMessage.target_point:type_name -> protos.RpcVector2D
	9,   // 57: protos.DribbleMessage.target_point:type_name -> protos.RpcVector2D
	9,   // 58: protos.BallGoalieMessage.ball_position:type_name -> protos.RpcVector2D
	9,   // 59: protos.BallGoalieMessage.ball_velocity:type_name -> protos.RpcVector2D
	9,   // 60: protos.BallGoalieMessage.goalie_position:type_name -> protos.RpcVector2D
	9,   // 61: protos.OnePlayerMessage.position:type_name -> protos.RpcVector2D
	9,   // 62: protos.TwoPlayerMessage.first_position:type_name -> protos.RpcVector2D
	9,   // 63: protos.TwoPlayerMessage.second_position:type_name -> protos.RpcVector2D
	9,   // 64: protos.ThreePlayerMessage.first_position:type_name -> protos.RpcVector2D
	9,   // 65: protos.ThreePlayerMessage.second_position:type_name -> protos.RpcVector2D
	9,   // 66: protos.ThreePlayerMessage.third_position:type_name -> protos.RpcVector2D
	9,   // 67: protos.SelfMessage.self_position:type_name -> protos.RpcVector2D
	9,   // 68: protos.TeammateMessage.position:type_name -> protos.RpcVector2D
	9,   // 69: protos.OpponentMessage.position:type_name -> protos.RpcVector2D
	9,   // 70: protos.BallPlayerMessage.ball_position:type_name -> protos.RpcVector2D
	9,   // 71: protos.BallPlayerMessage.ball_velocity:type_name -> protos.RpcVector2D
	9,   // 72: protos.BallPlayerMessage.player_position:type_name -> protos.RpcVector2D
	29,  // 73: protos.Say.ball_message:type_name -> protos.BallMessage
	30,  // 74: protos.Say.pass_message:type_name -> protos.PassMessage
	31,  // 75: protos.Say.intercept_message:type_name -> protos.InterceptMessage
	32,  // 76: protos.Say.goalie_message:type_name -> protos.GoalieMessage
	33,  // 77: protos.Say.goalie_and_player_message:type_name -> protos.GoalieAndPlayerMessage
	34,  // 78: protos.Say.offside_line_message:type_name -> protos.OffsideLineMessage
	35,  // 79: protos.Say.defense_line_message:type_name -> protos.DefenseLineMessage
	36,  // 80: protos.Say.wait_request_message:type_name -> protos.WaitRequestMessage
	37,  // 81: protos.Say.setplay_message:type_name -> protos.SetplayMessage
	38,  // 82: protos.Say.pass_request_message:type_name -> protos.PassRequestMessage
	39,  // 83: protos.Say.stamina_message:type_name -> protos.StaminaMessage
	40,  // 84: protos.Say.recovery_message:type_name -> protos.RecoveryMessage
	41,  // 85: protos.Say.stamina_capacity_message:type_name -> protos.StaminaCapacityMessage
	42,  // 86: protos.Say.dribble_message:type_name -> protos.DribbleMessage
	43,  // 87: protos.Say.ball_goalie_message:type_name -> protos.BallGoalieMessage
	44,  // 88: protos.Say.one_player_message:type_name -> protos.OnePlayerMessage
	45,  // 89: protos.Say.two_player_message:type_name -> protos.TwoPlayerMessage
	46,  // 90: protos.Say.three_player_message:type_name -> protos.ThreePlayerMessage
	47,  // 91: protos.Say.self_message:type_name -> protos.SelfMessage
	48,  // 92: protos.Say.teammate_message:type_name -> protos.TeammateMessage
	49,  // 93: protos.Say.opponent_message:type_name -> protos.OpponentMessage
	50,  // 94: protos.Say.ball_player_message:type_name -> protos.BallPlayerMessage
	2,   // 95: protos.AttentionTo.side:type_name -> protos.Side
	3,   // 96: protos.AddText.level:type_name -> protos.LoggerLevel
	3,   // 97: protos.AddPoint.level:type_name -> protos.LoggerLevel
	9,   // 98: protos.AddPoint.point:type_name -> protos.RpcVector2D
	3,   // 99: protos.AddLine.level:type_name -> protos.LoggerLevel
	9,   // 100: protos.AddLine.start:type_name -> protos.RpcVector2D
	9,   // 101: protos.AddLine.end:type_name -> protos.RpcVector2D
	3,   // 102: protos.AddArc.level:type_name -> protos.LoggerLevel
	9,   // 103: protos.AddArc.center:type_name -> protos.RpcVector2D
	3,   // 104: protos.AddCircle.level:type_name -> protos.LoggerLevel
	9,   // 105: protos.AddCircle.center:type_name -> protos.RpcVector2D
	3,   // 106: protos.AddTriangle.level:type_name -> protos.LoggerLevel
	9,   // 107: protos.AddTriangle.point1:type_name -> protos.RpcVector2D
	9,   // 108: protos.AddTriangle.point2:type_name -> protos.RpcVector2D
	9,   // 109: protos.AddTriangle.point3:type_name -> protos.RpcVector2D
	3,   // 110: protos.AddRectangle.level:type_name -> protos.LoggerLevel
	3,   // 111: protos.AddSector.level:type_name -> protos.LoggerLevel
	9,   // 112: protos.AddSector.center:type_name -> protos.RpcVector2D
	3,   // 113: protos.AddMessage.level:type_name -> protos.LoggerLevel
	9,   // 114: protos.AddMessage.position:type_name -> protos.RpcVector2D
	56,  // 115: protos.Log.add_text:type_name -> protos.AddText
	57,  // 116: protos.Log.add_point:type_name -> protos.AddPoint
	58,  // 117: protos.Log.add_line:type_name -> protos.AddLine
	59,  // 118: protos.Log.add_arc:type_name -> protos.AddArc
	60,  // 119: protos.Log.add_circle:type_name -> protos.AddCircle
	61,  // 120: protos.Log.add_triangle:type_name -> protos.AddTriangle
	62,  // 121: protos.Log.add_rectangle:type_name -> protos.AddRectangle
	63,  // 122: protos.Log.add_sector:type_name -> protos.AddSector
	64,  // 123: protos.Log.add_message:type_name -> protos.AddMessage
	9,   // 124: protos.Body_GoToPoint.target_point:type_name -> protos.RpcVector2D
	9,   // 125: protos.Body_SmartKick.target_point:type_name -> protos.RpcVector2D
	9,   // 126: protos.Bhv_BeforeKickOff.point:type_name -> protos.RpcVector2D
	9,   // 127: protos.Bhv_BodyNeckToPoint.point:type_name -> protos.RpcVector2D
	9,   // 128: protos.Bhv_GoToPointLookBall.target_point:type_name -> protos.RpcVector2D
	9,   // 129: protos.Bhv_NeckBodyToPoint.point:type_name -> protos.RpcVector2D
	9,   // 130: protos.Body_Dribble.target_point:type_name -> protos.RpcVector2D
	9,   // 131: protos.Body_GoToPointDodge.target_point:type_name -> protos.RpcVector2D
	9,   // 132: protos.Body_HoldBall.turn_target_point:type_name -> protos.RpcVector2D
	9,   // 133: protos.Body_HoldBall.kick_target_point:type_name -> protos.RpcVector2D
	9,   // 134: protos.Body_Intercept.face_point:type_name -> protos.RpcVector2D
	9,   // 135: protos.Body_KickOneStep.target_point:type_name -> protos.RpcVector2D
	9,   // 136: protos.Body_TackleToPoint.target_point:type_name -> protos.RpcVector2D
	9,   // 137: protos.Body_TurnToPoint.target_point:type_name -> protos.RpcVector2D
	9,   // 138: protos.Focus_MoveToPoint.target_point:type_name -> protos.RpcVector2D
	2,   // 139: protos.Neck_TurnToBallAndPlayer.side:type_name -> protos.Side
	2,   // 140: protos.Neck_TurnToPlayerOrScan.side:type_name -> protos.Side
	9,   // 141: protos.Neck_TurnToPoint.target_point:type_name -> protos.RpcVector2D
	0,   // 142: protos.View_ChangeWidth.view_width:type_name -> protos.ViewWidth
	21,  // 143: protos.PlayerAction.dash:type_name -> protos.Dash
	22,  // 144: protos.PlayerAction.turn:type_name -> protos.Turn
	23,  // 145: protos.PlayerAction.kick:type_name -> protos.Kick
	24,  // 146: protos.PlayerAction.tackle:type_name -> protos.Tackle
	25,  // 147: protos.PlayerAction.catch:type_name -> protos.Catch
	26,  // 148: protos.PlayerAction.move:type_name -> protos.Move
	27,  // 149: protos.PlayerAction.turn_neck:type_name -> protos.TurnNeck
	28,  // 150: protos.PlayerAction.change_view:type_name -> protos.ChangeView
	51,  // 151: protos.PlayerAction.say:type_name -> protos.Say
	52,  // 152: protos.PlayerAction.point_to:type_name -> protos.PointTo
	53,  // 153: protos.PlayerAction.point_to_of:type_name -> protos.PointToOf
	54,  // 154: protos.PlayerAction.attention_to:type_name -> protos.AttentionTo
	55,  // 155: protos.PlayerAction.attention_to_of:type_name -> protos.AttentionToOf
	65,  // 156: protos.PlayerAction.log:type_name -> protos.Log
	66,  // 157: protos.PlayerAction.debug_client:type_name -> protos.DebugClient
	67,  // 158: protos.PlayerAction.body_go_to_point:type_name -> protos.Body_GoToPoint
	68,  // 159: protos.PlayerAction.body_smart_kick:type_name -> protos.Body_SmartKick
	69,  // 160: protos.PlayerAction.bhv_before_kick_off:type_name -> protos.Bhv_BeforeKickOff
	70,  // 161: protos.PlayerAction.bhv_body_neck_to_ball:type_name -> protos.Bhv_BodyNeckToBall
	71,  // 162: protos.PlayerAction.bhv_body_neck_to_point:type_name -> protos.Bhv_BodyNeckToPoint
	72,  // 163: protos.PlayerAction.bhv_emergency:type_name -> protos.Bhv_Emergency
	73,  // 164: protos.PlayerAction.bhv_go_to_point_look_ball:type_name -> protos.Bhv_GoToPointLookBall
	74,  // 165: protos.PlayerAction.bhv_neck_body_to_ball:type_name -> protos.Bhv_NeckBodyToBall
	75,  // 166: protos.PlayerAction.bhv_neck_body_to_point:type_name -> protos.Bhv_NeckBodyToPoint
	76,  // 167: protos.PlayerAction.bhv_scan_field:type_name -> protos.Bhv_ScanField
	77,  // 168: protos.PlayerAction.body_advance_ball:type_name -> protos.Body_AdvanceBall
	78,  // 169: protos.PlayerAction.body_clear_ball:type_name -> protos.Body_ClearBall
	79,  // 170: protos.PlayerAction.body_dribble:type_name -> protos.Body_Dribble
	80,  // 171: protos.PlayerAction.body_go_to_point_dodge:type_name -> protos.Body_GoToPointDodge
	81,  // 172: protos.PlayerAction.body_hold_ball:type_name -> protos.Body_HoldBall
	82,  // 173: protos.PlayerAction.body_intercept:type_name -> protos.Body_Intercept
	83,  // 174: protos.PlayerAction.body_kick_one_step:type_name -> protos.Body_KickOneStep
	84,  // 175: protos.PlayerAction.body_stop_ball:type_name -> protos.Body_StopBall
	85,  // 176: protos.PlayerAction.body_stop_dash:type_name -> protos.Body_StopDash
	86,  // 177: protos.PlayerAction.body_tackle_to_point:type_name -> protos.Body_TackleToPoint
	87,  // 178: protos.PlayerAction.body_turn_to_angle:type_name -> protos.Body_TurnToAngle
	88,  // 179: protos.PlayerAction.body_turn_to_ball:type_name -> protos.Body_TurnToBall
	89,  // 180: protos.PlayerAction.body_turn_to_point:type_name -> protos.Body_TurnToPoint
	90,  // 181: protos.PlayerAction.focus_move_to_point:type_name -> protos.Focus_MoveToPoint
	91,  // 182: protos.PlayerAction.focus_reset:type_name -> protos.Focus_Reset
	92,  // 183: protos.PlayerAction.neck_scan_field:type_name -> protos.Neck_ScanField
	93,  // 184: protos.PlayerAction.neck_scan_players:type_name -> protos.Neck_ScanPlayers
	94,  // 185: protos.PlayerAction.neck_turn_to_ball_and_player:type_name -> protos.Neck_TurnToBallAndPlayer
	95,  // 186: protos.PlayerAction.neck_turn_to_ball_or_scan:type_name -> protos.Neck_TurnToBallOrScan
	96,  // 187: protos.PlayerAction.neck_turn_to_ball:type_name -> protos.Neck_TurnToBall
	97,  // 188: protos.PlayerAction.neck_turn_to_goalie_or_scan:type_name -> protos.Neck_TurnToGoalieOrScan
	98,  // 189: protos.PlayerAction.neck_turn_to_low_conf_teammate:type_name -> protos.Neck_TurnToLowConfTeammate
	99,  // 190: protos.PlayerAction.neck_turn_to_player_or_scan:type_name -> protos.Neck_TurnToPlayerOrScan
	100, // 191: protos.PlayerAction.neck_turn_to_point:type_name -> protos.Neck_TurnToPoint
	101, // 192: protos.PlayerAction.neck_turn_to_relative:type_name -> protos.Neck_TurnToRelative
	102, // 193: protos.PlayerAction.view_change_width:type_name -> protos.View_ChangeWidth
	103, // 194: protos.PlayerAction.view_normal:type_name -> protos.View_Normal
	104, // 195: protos.PlayerAction.view_synch:type_name -> protos.View_Synch
	105, // 196: protos.PlayerAction.view_wide:type_name -> protos.View_Wide
	106, // 197: protos.PlayerAction.helios_goalie:type_name -> protos.HeliosGoalie
	107, // 198: protos.PlayerAction.helios_goalie_move:type_name -> protos.HeliosGoalieMove
	108, // 199: protos.PlayerAction.helios_goalie_kick:type_name -> protos.HeliosGoalieKick
	109, // 200: protos.PlayerAction.helios_shoot:type_name -> protos.HeliosShoot
	110, // 201: protos.PlayerAction.helios_offensive_planner:type_name -> protos.HeliosOffensivePlanner
	111, // 202: protos.PlayerAction.helios_basic_offensive:type_name -> protos.HeliosBasicOffensive
	112, // 203: protos.PlayerAction.helios_basic_move:type_name -> protos.HeliosBasicMove
	113, // 204: protos.PlayerAction.helios_set_play:type_name -> protos.HeliosSetPlay
	114, // 205: protos.PlayerAction.helios_penalty:type_name -> protos.HeliosPenalty
	115, // 206: protos.PlayerAction.helios_communication:type_name -> protos.HeliosCommunicaion
	116, // 207: protos.PlayerAction.bhv_do_force_kick:type_name -> protos.bhv_doForceKick
	117, // 208: protos.PlayerAction.bhv_do_heard_pass_recieve:type_name -> protos.bhv_doHeardPassRecieve
	118, // 209: protos.PlayerActions.actions:type_name -> protos.PlayerAction
	120, // 210: protos.CoachAction.change_player_types:type_name -> protos.ChangePlayerType
	121, // 211: protos.CoachAction.do_helios_substitute:type_name -> protos.DoHeliosSubstitute
	122, // 212: protos.CoachAction.do_helios_say_player_types:type_name -> protos.DoHeliosSayPlayerTypes
	123, // 213: protos.CoachActions.actions:type_name -> protos.CoachAction
	9,   // 214: protos.DoMoveBall.position:type_name -> protos.RpcVector2D
	9,   // 215: protos.DoMoveBall.velocity:type_name -> protos.RpcVector2D
	9,   // 216: protos.DoMovePlayer.position:type_name -> protos.RpcVector2D
	6,   // 217: protos.DoChangeMode.game_mode_type:type_name -> protos.GameModeType
	2,   // 218: protos.DoChangeMode.side:type_name -> protos.Side
	125, // 219: protos.TrainerAction.do_kick_off:type_name -> protos.DoKickOff
	126, // 220: protos.TrainerAction.do_move_ball:type_name -> protos.DoMoveBall
	127, // 221: protos.TrainerAction.do_move_player:type_name -> protos.DoMovePlayer
	128, // 222: protos.TrainerAction.do_recover:type_name -> protos.DoRecover
	129, // 223: protos.TrainerAction.do_change_mode:type_name -> protos.DoChangeMode
	130, // 224: protos.TrainerAction.do_change_player_type:type_name -> protos.DoChangePlayerType
	131, // 225: protos.TrainerActions.actions:type_name -> protos.TrainerAction
	11,  // 226: protos.ServerParam.register_response:type_name -> protos.RegisterResponse
	11,  // 227: protos.PlayerParam.register_response:type_name -> protos.RegisterResponse
	11,  // 228: protos.PlayerType.register_response:type_name -> protos.RegisterResponse
	8,   // 229: protos.RpcCooperativeAction.category:type_name -> protos.RpcActionCategory
	9,   // 230: protos.RpcCooperativeAction.target_point:type_name -> protos.RpcVector2D
	9,   // 231: protos.RpcPredictState.ball_position:type_name -> protos.RpcVector2D
	9,   // 232: protos.RpcPredictState.ball_velocity:type_name -> protos.RpcVector2D
	136, // 233: protos.RpcActionState.action:type_name -> protos.RpcCooperativeAction
	137, // 234: protos.RpcActionState.predict_state:type_name -> protos.RpcPredictState
	11,  // 235: protos.BestPlannerActionRequest.register_response:type_name -> protos.RegisterResponse
	145, // 236: protos.BestPlannerActionRequest.pairs:type_name -> protos.BestPlannerActionRequest.PairsEntry
	19,  // 237: protos.BestPlannerActionRequest.state:type_name -> protos.State
	14,  // 238: protos.WorldModel.OurPlayersDictEntry.value:type_name -> protos.Player
	14,  // 239: protos.WorldModel.TheirPlayersDictEntry.value:type_name -> protos.Player
	9,   // 240: protos.WorldModel.HeliosHomePositionsEntry.value:type_name -> protos.RpcVector2D
	138, // 241: protos.BestPlannerActionRequest.PairsEntry.value:type_name -> protos.RpcActionState
	19,  // 242: protos.Game.GetPlayerActions:input_type -> protos.State
	19,  // 243: protos.Game.GetCoachActions:input_type -> protos.State
	19,  // 244: protos.Game.GetTrainerActions:input_type -> protos.State
	20,  // 245: protos.Game.SendInitMessage:input_type -> protos.InitMessage
	133, // 246: protos.Game.SendServerParams:input_type -> protos.ServerParam
	134, // 247: protos.Game.SendPlayerParams:input_type -> protos.PlayerParam
	135, // 248: protos.Game.SendPlayerType:input_type -> protos.PlayerType
	10,  // 249: protos.Game.Register:input_type -> protos.RegisterRequest
	11,  // 250: protos.Game.SendByeCommand:input_type -> protos.RegisterResponse
	139, // 251: protos.Game.GetBestPlannerAction:input_type -> protos.BestPlannerActionRequest
	119, // 252: protos.Game.GetPlayerActions:output_type -> protos.PlayerActions
	124, // 253: protos.Game.GetCoachActions:output_type -> protos.CoachActions
	132, // 254: protos.Game.GetTrainerActions:output_type -> protos.TrainerActions
	141, // 255: protos.Game.SendInitMessage:output_type -> protos.Empty
	141, // 256: protos.Game.SendServerParams:output_type -> protos.Empty
	141, // 257: protos.Game.SendPlayerParams:output_type -> protos.Empty
	141, // 258: protos.Game.SendPlayerType:output_type -> protos.Empty
	11,  // 259: protos.Game.Register:output_type -> protos.RegisterResponse
	141, // 260: protos.Game.SendByeCommand:output_type -> protos.Empty
	140, // 261: protos.Game.GetBestPlannerAction:output_type -> protos.BestPlannerActionResponse
	252, // [252:262] is the sub-list for method output_type
	242, // [242:252] is the sub-list for method input_type
	242, // [242:242] is the sub-list for extension type_name
	242, // [242:242] is the sub-list for extension extendee
	0,   // [0:242] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	file_service_proto_msgTypes[42].OneofWrappers = []any{
		(*Say_BallMessage)(nil),
		(*Say_PassMessage)(nil),
		(*Say_InterceptMessage)(nil),
		(*Say_GoalieMessage)(nil),
		(*Say_GoalieAndPlayerMessage)(nil),
		(*Say_OffsideLineMessage)(nil),
		(*Say_DefenseLineMessage)(nil),
		(*Say_WaitRequestMessage)(nil),
		(*Say_SetplayMessage)(nil),
		(*Say_PassRequestMessage)(nil),
		(*Say_StaminaMessage)(nil),
		(*Say_RecoveryMessage)(nil),
		(*Say_StaminaCapacityMessage)(nil),
		(*Say_DribbleMessage)(nil),
		(*Say_BallGoalieMessage)(nil),
		(*Say_OnePlayerMessage)(nil),
		(*Say_TwoPlayerMessage)(nil),
		(*Say_ThreePlayerMessage)(nil),
		(*Say_SelfMessage)(nil),
		(*Say_TeammateMessage)(nil),
		(*Say_OpponentMessage)(nil),
		(*Say_BallPlayerMessage)(nil),
	}
	file_service_proto_msgTypes[56].OneofWrappers = []any{
		(*Log_AddText)(nil),
		(*Log_AddPoint)(nil),
		(*Log_AddLine)(nil),
		(*Log_AddArc)(nil),
		(*Log_AddCircle)(nil),
		(*Log_AddTriangle)(nil),
		(*Log_AddRectangle)(nil),
		(*Log_AddSector)(nil),
		(*Log_AddMessage)(nil),
	}
	file_service_proto_msgTypes[109].OneofWrappers = []any{
		(*PlayerAction_Dash)(nil),
		(*PlayerAction_Turn)(nil),
		(*PlayerAction_Kick)(nil),
		(*PlayerAction_Tackle)(nil),
		(*PlayerAction_Catch)(nil),
		(*PlayerAction_Move)(nil),
		(*PlayerAction_TurnNeck)(nil),
		(*PlayerAction_ChangeView)(nil),
		(*PlayerAction_Say)(nil),
		(*PlayerAction_PointTo)(nil),
		(*PlayerAction_PointToOf)(nil),
		(*PlayerAction_AttentionTo)(nil),
		(*PlayerAction_AttentionToOf)(nil),
		(*PlayerAction_Log)(nil),
		(*PlayerAction_DebugClient)(nil),
		(*PlayerAction_BodyGoToPoint)(nil),
		(*PlayerAction_BodySmartKick)(nil),
		(*PlayerAction_BhvBeforeKickOff)(nil),
		(*PlayerAction_BhvBodyNeckToBall)(nil),
		(*PlayerAction_BhvBodyNeckToPoint)(nil),
		(*PlayerAction_BhvEmergency)(nil),
		(*PlayerAction_BhvGoToPointLookBall)(nil),
		(*PlayerAction_BhvNeckBodyToBall)(nil),
		(*PlayerAction_BhvNeckBodyToPoint)(nil),
		(*PlayerAction_BhvScanField)(nil),
		(*PlayerAction_BodyAdvanceBall)(nil),
		(*PlayerAction_BodyClearBall)(nil),
		(*PlayerAction_BodyDribble)(nil),
		(*PlayerAction_BodyGoToPointDodge)(nil),
		(*PlayerAction_BodyHoldBall)(nil),
		(*PlayerAction_BodyIntercept)(nil),
		(*PlayerAction_BodyKickOneStep)(nil),
		(*PlayerAction_BodyStopBall)(nil),
		(*PlayerAction_BodyStopDash)(nil),
		(*PlayerAction_BodyTackleToPoint)(nil),
		(*PlayerAction_BodyTurnToAngle)(nil),
		(*PlayerAction_BodyTurnToBall)(nil),
		(*PlayerAction_BodyTurnToPoint)(nil),
		(*PlayerAction_FocusMoveToPoint)(nil),
		(*PlayerAction_FocusReset)(nil),
		(*PlayerAction_NeckScanField)(nil),
		(*PlayerAction_NeckScanPlayers)(nil),
		(*PlayerAction_NeckTurnToBallAndPlayer)(nil),
		(*PlayerAction_NeckTurnToBallOrScan)(nil),
		(*PlayerAction_NeckTurnToBall)(nil),
		(*PlayerAction_NeckTurnToGoalieOrScan)(nil),
		(*PlayerAction_NeckTurnToLowConfTeammate)(nil),
		(*PlayerAction_NeckTurnToPlayerOrScan)(nil),
		(*PlayerAction_NeckTurnToPoint)(nil),
		(*PlayerAction_NeckTurnToRelative)(nil),
		(*PlayerAction_ViewChangeWidth)(nil),
		(*PlayerAction_ViewNormal)(nil),
		(*PlayerAction_ViewSynch)(nil),
		(*PlayerAction_ViewWide)(nil),
		(*PlayerAction_HeliosGoalie)(nil),
		(*PlayerAction_HeliosGoalieMove)(nil),
		(*PlayerAction_HeliosGoalieKick)(nil),
		(*PlayerAction_HeliosShoot)(nil),
		(*PlayerAction_HeliosOffensivePlanner)(nil),
		(*PlayerAction_HeliosBasicOffensive)(nil),
		(*PlayerAction_HeliosBasicMove)(nil),
		(*PlayerAction_HeliosSetPlay)(nil),
		(*PlayerAction_HeliosPenalty)(nil),
		(*PlayerAction_HeliosCommunication)(nil),
		(*PlayerAction_BhvDoForceKick)(nil),
		(*PlayerAction_BhvDoHeardPassRecieve)(nil),
	}
	file_service_proto_msgTypes[114].OneofWrappers = []any{
		(*CoachAction_ChangePlayerTypes)(nil),
		(*CoachAction_DoHeliosSubstitute)(nil),
		(*CoachAction_DoHeliosSayPlayerTypes)(nil),
	}
	file_service_proto_msgTypes[122].OneofWrappers = []any{
		(*TrainerAction_DoKickOff)(nil),
		(*TrainerAction_DoMoveBall)(nil),
		(*TrainerAction_DoMovePlayer)(nil),
		(*TrainerAction_DoRecover)(nil),
		(*TrainerAction_DoChangeMode)(nil),
		(*TrainerAction_DoChangePlayerType)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   137,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
		EnumInfos:         file_service_proto_enumTypes,
		MessageInfos:      file_service_proto_msgTypes,
	}.Build()
	File_service_proto = out.File
	file_service_proto_rawDesc = nil
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}
